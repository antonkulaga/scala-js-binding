app {
  host = "0.0.0.0"

  port = 5553

  secret = "OMxgxWJ_`ATJ0x=R^a3TxqSUXOn5Lo^uBGsTe640D?aOv2^[>WJm/Rwh<H?2H2ta"

  files = "files/"

  servers = [ { name : "localhost", host : "localhost",  port : 8080 }  ]
}


akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  #loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  jvm-exit-on-fatal-error = false
  jvm-exit-on-fatal-error = false

  stream {
    #materializer.debug.fuzzing-mode = on
    # materializer.auto-fusing = off
  }

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  idle-timeout = infinite

  http {

    server {
      idle-timeout = infinite

      verbose-error-messages = on

      parsing {
        max-content-length = 50m
      }
    }

    client {

      # The time period within which the TCP connecting process must be completed.
      connecting-timeout = 20s

      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = infinite

      parsing {
        max-content-length = 50m
      }
    }

    routing {
      # Enables/disables the returning of more detailed error messages to the
      # client in the error response
      # Should be disabled for browser-facing APIs due to the risk of XSS attacks
      # and (probably) enabled for internal or non-browser APIs
      # (Note that akka-http will always produce log messages containing the full error details)
      verbose-error-messages = on
    }


  }

  host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 4

    # The maximum number of times failed requests are attempted again,
    # (if the request can be safely retried) before giving up and returning an error.
    # Set to zero to completely disable request retries.
    max-retries = 5

    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 32

    # The maximum number of requests that are dispatched to the target host in
    # batch-mode across a single connection (HTTP pipelining).
    # A setting of 1 disables HTTP pipelining, since only one request per
    # connection can be "in flight" at any time.
    # Set to higher values to enable HTTP pipelining.
    # This value must be > 0.
    # (Note that, independently of this setting, pipelining will never be done
    # on a connection that still has a non-idempotent request in flight.
    # See http://tools.ietf.org/html/rfc7230#section-6.3.2 for more info.)
    pipelining-limit = 1

    # The time after which an idle connection pool (without pending requests)
    # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
    idle-timeout = infinite

    parsing {
      max-content-length = 50m
    }

  }

  }