'use strict';
/* Scala.js runtime support
 * Copyright 2013 LAMP/EPFL
 * Author: SÃ©bastien Doeraene
 */

/* ---------------------------------- *
 * The top-level Scala.js environment *
 * ---------------------------------- */

var ScalaJS = {
  // Fields
  g: (typeof global === "object" && global && global["Object"] === Object) ? global : this, // Global scope
  e: (typeof __ScalaJSExportsNamespace === "object" && __ScalaJSExportsNamespace) ? __ScalaJSExportsNamespace : // Where to send exports
      ((typeof global === "object" && global && global["Object"] === Object) ? global : this),
  d: {},         // Data for types
  c: {},         // Scala.js constructors
  h: {},         // Inheritable constructors (without initialization code)
  i: {},         // Implementation class modules
  n: {},         // Module instances
  m: {},         // Module accessors
  is: {},        // isInstanceOf methods
  as: {},        // asInstanceOf methods
  isArrayOf: {}, // isInstanceOfArrayOf methods
  asArrayOf: {}, // asInstanceOfArrayOf methods

  // Core mechanism

  makeIsArrayOfPrimitive: function(primitiveData) {
    return function(obj, depth) {
      return !!(obj && obj.$classData &&
        (obj.$classData.arrayDepth === depth) &&
        (obj.$classData.arrayBase === primitiveData));
    }
  },

  makeAsArrayOfPrimitive: function(isInstanceOfFunction, arrayEncodedName) {
    return function(obj, depth) {
      if (isInstanceOfFunction(obj, depth) || (obj === null))
        return obj;
      else
        ScalaJS.throwArrayCastException(obj, arrayEncodedName, depth);
    }
  },

  /** Encode a property name for runtime manipulation
   *  Usage:
   *    env.propertyName({someProp:0})
   *  Returns:
   *    "someProp"
   *  Useful when the property is renamed by a global optimizer (like Closure)
   *  but we must still get hold of a string of that name for runtime
   * reflection.
   */
  propertyName: function(obj) {
    var result;
    for (var prop in obj)
      result = prop;
    return result;
  },

  // Runtime functions

  isScalaJSObject: function(obj) {
    return !!(obj && obj.$classData);
  },

  throwClassCastException: function(instance, classFullName) {
    throw new ScalaJS.c.jl_ClassCastException().init___T(
      instance + " is not an instance of " + classFullName);
  },

  throwArrayCastException: function(instance, classArrayEncodedName, depth) {
    for (; depth; --depth)
      classArrayEncodedName = "[" + classArrayEncodedName;
    ScalaJS.throwClassCastException(instance, classArrayEncodedName);
  },

  wrapJavaScriptException: function(exception) {
    if (ScalaJS.isScalaJSObject(exception))
      return exception;
    else
      return new ScalaJS.c.sjs_js_JavaScriptException()
        .init___sjs_js_Any(exception);
  },

  unwrapJavaScriptException: function(exception) {
    if (ScalaJS.is.sjs_js_JavaScriptException(exception))
      return exception.exception__sjs_js_Any();
    else
      return exception;
  },

  makeNativeArrayWrapper: function(arrayClassData, nativeArray) {
    return new arrayClassData.constr(nativeArray);
  },

  newArrayObject: function(arrayClassData, lengths) {
    return ScalaJS.newArrayObjectInternal(arrayClassData, lengths, 0);
  },

  newArrayObjectInternal: function(arrayClassData, lengths, lengthIndex) {
    var result = new arrayClassData.constr(lengths[lengthIndex]);

    if (lengthIndex < lengths.length-1) {
      var subArrayClassData = arrayClassData.componentData;
      var subLengthIndex = lengthIndex+1;
      var underlying = result.u;
      for (var i = 0; i < underlying.length; i++) {
        underlying[i] = ScalaJS.newArrayObjectInternal(
          subArrayClassData, lengths, subLengthIndex);
      }
    }

    return result;
  },

  /** Protect the argument against `this` forgery (see genPrimitiveJSCall()) */
  protect: function(x) {
    return x;
  },

  cloneObject: function(obj) {
    function Clone(from) {
      for (var field in from)
        if (from["hasOwnProperty"](field))
          this[field] = from[field];
    }
    Clone.prototype = ScalaJS.g["Object"]["getPrototypeOf"](obj);
    return new Clone(obj);
  },

  applyMethodWithVarargs: function(instance, methodName, argArray) {
    // Note: cannot be inlined because `instance` would be evaluated twice
    return instance[methodName].apply(instance, argArray);
  },

  newInstanceWithVarargs: function(constructor, argArray) {
    // Not really "possible" in JavaScript, so we emulate what it would be
    function c() {};
    c.prototype = constructor.prototype;
    var instance = new c;
    var result = constructor.apply(instance, argArray);
    switch (typeof result) {
      case "undefined":
      case "number":
      case "boolean":
      case "string":
        return instance;
      default:
        if (result === null)
          return instance;
        else
          return result;
    }
  },

  anyEqEq: function(lhs, rhs) {
    if (ScalaJS.isScalaJSObject(lhs) || typeof lhs === "number") {
      return ScalaJS.m.sr_BoxesRunTime().equals__O__O__Z(lhs, rhs);
    } else {
      return lhs === rhs;
    }
  },

  anyRefEqEq: function(lhs, rhs) {
    if (lhs === null)
      return rhs === null;
    else
      return ScalaJS.objectEquals(lhs, rhs);
  },

  objectToString: function(instance) {
    if (instance === void 0)
      return "undefined";
    else
      return instance.toString();
  },

  objectGetClass: function(instance) {
    switch (typeof instance) {
      case "string":
        return ScalaJS.d.T.getClassOf();
      case "number":
        if (ScalaJS.isInt(instance))
          return ScalaJS.d.jl_Integer.getClassOf();
        else
          return ScalaJS.d.jl_Double.getClassOf();
      case "boolean":
        return ScalaJS.d.jl_Boolean.getClassOf();
      case "undefined":
        return ScalaJS.d.sr_BoxedUnit.getClassOf();
      default:
        if (ScalaJS.is.sjsr_RuntimeLong(instance))
          return ScalaJS.d.jl_Long.getClassOf();
        else if (ScalaJS.isScalaJSObject(instance) || (instance === null))
          return instance.getClass__jl_Class();
        else
          return null; // Exception?
    }
  },

  objectClone: function(instance) {
    if (ScalaJS.isScalaJSObject(instance) || (instance === null))
      return instance.clone__O();
    else
      throw new ScalaJS.c.jl_CloneNotSupportedException().init___();
  },

  objectNotify: function(instance) {
    // final and no-op in java.lang.Object
    if (instance === null)
      instance.notify__V();
  },

  objectNotifyAll: function(instance) {
    // final and no-op in java.lang.Object
    if (instance === null)
      instance.notifyAll__V();
  },

  objectFinalize: function(instance) {
    if (ScalaJS.isScalaJSObject(instance) || (instance === null))
      instance.finalize__V();
    // else no-op
  },

  objectEquals: function(instance, rhs) {
    if (ScalaJS.isScalaJSObject(instance) || (instance === null))
      return instance.equals__O__Z(rhs);
    else if (typeof instance === "number")
      return typeof rhs === "number" && ScalaJS.numberEquals(instance, rhs);
    else
      return instance === rhs;
  },

  numberEquals: function(lhs, rhs) {
    return (
      lhs === rhs // 0.0 === -0.0 to prioritize the Int case over the Double case
    ) || (
      // are they both NaN?
      (lhs !== lhs) && (rhs !== rhs)
    );
  },

  objectHashCode: function(instance) {
    switch (typeof instance) {
      case "string":
        // calculate hash of String as specified by JavaDoc
        var n = instance["length"];
        var res = 0;
        var mul = 1; // holds pow(31, n-i-1)
        // multiplications with `mul` do never overflow the 52 bits of precision:
        // - we truncate `mul` to 32 bits on each operation
        // - 31 has 5 significant bits only
        // - s[i] has 16 significant bits max
        // 32 + max(5, 16) = 48 < 52 => no overflow
        for (var i = n-1; i >= 0; --i) {
          // calculate s[i] * pow(31, n-i-1)
          res = res + (instance["charCodeAt"](i) * mul | 0) | 0
          // update mul for next iteration
          mul = mul * 31 | 0
        }
        return res;
      case "number":
        return instance | 0;
      case "boolean":
        return instance ? 1231 : 1237;
      case "undefined":
        return 0;
      default:
        if (ScalaJS.isScalaJSObject(instance) || instance === null)
          return instance.hashCode__I();
        else
          return 42; // TODO?
    }
  },

  comparableCompareTo: function(instance, rhs) {
    switch (typeof instance) {
      case "string":
        ScalaJS.as.T(rhs);
        return instance === rhs ? 0 : (instance < rhs ? -1 : 1);
      case "number":
        ScalaJS.as.jl_Number(rhs);
        return ScalaJS.numberEquals(instance, rhs) ? 0 : (instance < rhs ? -1 : 1);
      case "boolean":
        ScalaJS.asBoolean(rhs);
        return instance - rhs; // yes, this gives the right result
      default:
        return instance.compareTo__O__I(rhs);
    }
  },

  charSequenceLength: function(instance) {
    if (typeof(instance) === "string")
      return instance["length"];
    else
      return instance.length__I();
  },

  charSequenceCharAt: function(instance, index) {
    if (typeof(instance) === "string")
      return instance["charCodeAt"](index);
    else
      return instance.charAt__I__C(index);
  },

  charSequenceSubSequence: function(instance, start, end) {
    if (typeof(instance) === "string")
      return instance["substring"](start, end);
    else
      return instance.subSequence__I__I__jl_CharSequence(start, end);
  },

  booleanBooleanValue: function(instance) {
    if (typeof instance === "boolean") return instance;
    else                               return instance.booleanValue__Z();
  },

  numberByteValue: function(instance) {
    if (typeof instance === "number") return (instance << 24) >> 24;
    else                              return instance.byteValue__B();
  },
  numberShortValue: function(instance) {
    if (typeof instance === "number") return (instance << 16) >> 16;
    else                              return instance.shortValue__S();
  },
  numberIntValue: function(instance) {
    if (typeof instance === "number") return instance | 0;
    else                              return instance.intValue__I();
  },
  numberLongValue: function(instance) {
    if (typeof instance === "number")
      return ScalaJS.m.sjsr_RuntimeLong().fromDouble__D__sjsr_RuntimeLong(instance);
    else
      return instance.longValue__J();
  },
  numberFloatValue: function(instance) {
    if (typeof instance === "number") return instance;
    else                              return instance.floatValue__F();
  },
  numberDoubleValue: function(instance) {
    if (typeof instance === "number") return instance;
    else                              return instance.doubleValue__D();
  },

  isNaN: function(instance) {
    return instance !== instance;
  },

  isInfinite: function(instance) {
    return !ScalaJS.g["isFinite"](instance) && !ScalaJS.isNaN(instance);
  },

  propertiesOf: function(obj) {
    var result = new Array();
    for (var prop in obj)
      result["push"](prop.toString());
    return result;
  },

  systemArraycopy: function(src, srcPos, dest, destPos, length) {
    var srcu = src.u;
    var destu = dest.u;
    if (srcu !== destu || destPos < srcPos || srcPos + length < destPos) {
      for (var i = 0; i < length; i++)
        destu[destPos+i] = srcu[srcPos+i];
    } else {
      for (var i = length-1; i >= 0; i--)
        destu[destPos+i] = srcu[srcPos+i];
    }
  },

  // is/as for hijacked boxed classes (the non-trivial ones)

  isByte: function(v) {
    return (v << 24 >> 24) === v;
  },

  isShort: function(v) {
    return (v << 16 >> 16) === v;
  },

  isInt: function(v) {
    return (v | 0) === v;
  },

  asUnit: function(v) {
    if (v === void 0)
      return v;
    else
      ScalaJS.throwClassCastException(v, "scala.runtime.BoxedUnit");
  },

  asBoolean: function(v) {
    if (typeof v === "boolean" || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Boolean");
  },

  asByte: function(v) {
    if (ScalaJS.isByte(v) || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Byte");
  },

  asShort: function(v) {
    if (ScalaJS.isShort(v) || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Short");
  },

  asInt: function(v) {
    if (ScalaJS.isInt(v) || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Integer");
  },

  asFloat: function(v) {
    if (typeof v === "number" || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Float");
  },

  asDouble: function(v) {
    if (typeof v === "number" || v === null)
      return v;
    else
      ScalaJS.throwClassCastException(v, "java.lang.Double");
  },

  // Boxes

  bC: function(value) {
    return new ScalaJS.c.jl_Character().init___C(value);
  },

  // Unboxes

  uZ: function(value) {
    return ScalaJS.asBoolean(value) || false;
  },
  uC: function(value) {
    return null === value ? 0 : ScalaJS.as.jl_Character(value).value$1;
  },
  uB: function(value) {
    return ScalaJS.asByte(value) || 0;
  },
  uS: function(value) {
    return ScalaJS.asShort(value) || 0;
  },
  uI: function(value) {
    return ScalaJS.asInt(value) || 0;
  },
  uJ: function(value) {
    return ScalaJS.as.sjsr_RuntimeLong(value) ||
      ScalaJS.m.sjsr_RuntimeLong().zero__sjsr_RuntimeLong();
  },
  uF: function(value) {
    // NaN || 0.0 is unfortunately 0.0
    return null === value ? 0.0 : ScalaJS.asFloat(value);
  },
  uD: function(value) {
    // NaN || 0.0 is unfortunately 0.0
    return null === value ? 0.0 : ScalaJS.asDouble(value);
  }
}

/* We have to force a non-elidable *read* of ScalaJS.e, otherwise Closure will
 * eliminate it altogether, along with all the exports, which is ... er ...
 * plain wrong.
 */
this["__ScalaJSExportsNamespace"] = ScalaJS.e;

// Type data constructors

/** @constructor */
ScalaJS.PrimitiveTypeData = function(zero, arrayEncodedName, displayName) {
  // Runtime support
  this.constr = undefined;
  this.parentData = undefined;
  this.ancestors = {};
  this.componentData = null;
  this.zero = zero;
  this.arrayEncodedName = arrayEncodedName;
  this._classOf = undefined;
  this._arrayOf = undefined;
  this.isArrayOf = function(obj, depth) { return false; };

  // java.lang.Class support
  this["name"] = displayName;
  this["isPrimitive"] = true;
  this["isInterface"] = false;
  this["isArrayClass"] = false;
  this["isInstance"] = function(obj) { return false; };
};

/** @constructor */
ScalaJS.ClassTypeData = function(internalNameObj, isInterface, fullName,
                                 parentData, ancestors, isInstance, isArrayOf) {
  var internalName = ScalaJS.propertyName(internalNameObj);

  isInstance = isInstance || function(obj) {
    return !!(obj && obj.$classData && obj.$classData.ancestors[internalName]);
  };

  isArrayOf = isArrayOf || function(obj, depth) {
    return !!(obj && obj.$classData && (obj.$classData.arrayDepth === depth)
      && obj.$classData.arrayBase.ancestors[internalName])
  };

  // Runtime support
  this.constr = undefined;
  this.parentData = parentData;
  this.ancestors = ancestors;
  this.componentData = null;
  this.zero = null;
  this.arrayEncodedName = "L"+fullName+";";
  this._classOf = undefined;
  this._arrayOf = undefined;
  this.isArrayOf = isArrayOf;

  // java.lang.Class support
  this["name"] = fullName;
  this["isPrimitive"] = false;
  this["isInterface"] = isInterface;
  this["isArrayClass"] = false;
  this["isInstance"] = isInstance;
};

/** @constructor */
ScalaJS.ArrayTypeData = function(componentData) {
  // The constructor

  var componentZero = componentData.zero;

  // The zero for the Long runtime representation
  // is a special case here, since the class has not
  // been defined yet, when this file is read
  if (componentZero == "longZero")
    componentZero = ScalaJS.m.sjsr_RuntimeLong().zero__sjsr_RuntimeLong();

  /** @constructor */
  var ArrayClass = function(arg) {
    if (typeof(arg) === "number") {
      // arg is the length of the array
      this.u = new Array(arg);
      for (var i = 0; i < arg; i++)
        this.u[i] = componentZero;
    } else {
      // arg is a native array that we wrap
      this.u = arg;
    }
  }
  ArrayClass.prototype = new ScalaJS.h.O;
  ArrayClass.prototype.constructor = ArrayClass;
  ArrayClass.prototype.$classData = this;

  ArrayClass.prototype.clone__O = function() {
    return new ArrayClass(this.u["slice"](0));
  };

  // Don't generate reflective call proxies. The compiler special cases
  // reflective calls to methods on scala.Array

  // The data

  var encodedName = "[" + componentData.arrayEncodedName;
  var componentBase = componentData.arrayBase || componentData;
  var componentDepth = componentData.arrayDepth || 0;
  var arrayDepth = componentDepth + 1;

  var isInstance = function(obj) {
    return componentBase.isArrayOf(obj, arrayDepth);
  }

  // Runtime support
  this.constr = ArrayClass;
  this.parentData = ScalaJS.d.O;
  this.ancestors = {O: 1};
  this.componentData = componentData;
  this.arrayBase = componentBase;
  this.arrayDepth = arrayDepth;
  this.zero = null;
  this.arrayEncodedName = encodedName;
  this._classOf = undefined;
  this._arrayOf = undefined;
  this.isArrayOf = undefined;

  // java.lang.Class support
  this["name"] = encodedName;
  this["isPrimitive"] = false;
  this["isInterface"] = false;
  this["isArrayClass"] = true;
  this["isInstance"] = isInstance;
};

ScalaJS.ClassTypeData.prototype.getClassOf = function() {
  if (!this._classOf)
    this._classOf = new ScalaJS.c.jl_Class().init___jl_ScalaJSClassData(this);
  return this._classOf;
};

ScalaJS.ClassTypeData.prototype.getArrayOf = function() {
  if (!this._arrayOf)
    this._arrayOf = new ScalaJS.ArrayTypeData(this);
  return this._arrayOf;
};

// java.lang.Class support

ScalaJS.ClassTypeData.prototype["getFakeInstance"] = function() {
  if (this === ScalaJS.d.T)
    return "some string";
  else if (this === ScalaJS.d.jl_Boolean)
    return false;
  else if (this === ScalaJS.d.jl_Byte ||
           this === ScalaJS.d.jl_Short ||
           this === ScalaJS.d.jl_Integer ||
           this === ScalaJS.d.jl_Float ||
           this === ScalaJS.d.jl_Double)
    return 0;
  else if (this === ScalaJS.d.jl_Long)
    return ScalaJS.m.sjsr_RuntimeLong().zero__sjsr_RuntimeLong();
  else if (this === ScalaJS.d.sr_BoxedUnit)
    return void 0;
  else
    return {$classData: this};
};

ScalaJS.ClassTypeData.prototype["getSuperclass"] = function() {
  return this.parentData ? this.parentData.getClassOf() : null;
};

ScalaJS.ClassTypeData.prototype["getComponentType"] = function() {
  return this.componentData ? this.componentData.getClassOf() : null;
};

ScalaJS.ClassTypeData.prototype["newArrayOfThisClass"] = function(lengths) {
  var arrayClassData = this;
  for (var i = 0; i < lengths.length; i++)
    arrayClassData = arrayClassData.getArrayOf();
  return ScalaJS.newArrayObject(arrayClassData, lengths);
};

ScalaJS.PrimitiveTypeData.prototype = ScalaJS.ClassTypeData.prototype;
ScalaJS.ArrayTypeData.prototype = ScalaJS.ClassTypeData.prototype;

// Create primitive types

ScalaJS.d.V = new ScalaJS.PrimitiveTypeData(undefined, "V", "void");
ScalaJS.d.Z = new ScalaJS.PrimitiveTypeData(false, "Z", "boolean");
ScalaJS.d.C = new ScalaJS.PrimitiveTypeData(0, "C", "char");
ScalaJS.d.B = new ScalaJS.PrimitiveTypeData(0, "B", "byte");
ScalaJS.d.S = new ScalaJS.PrimitiveTypeData(0, "S", "short");
ScalaJS.d.I = new ScalaJS.PrimitiveTypeData(0, "I", "int");
ScalaJS.d.J = new ScalaJS.PrimitiveTypeData("longZero", "J", "long");
ScalaJS.d.F = new ScalaJS.PrimitiveTypeData(0.0, "F", "float");
ScalaJS.d.D = new ScalaJS.PrimitiveTypeData(0.0, "D", "double");

// Instance tests for array of primitives

ScalaJS.isArrayOf.Z = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.Z);
ScalaJS.asArrayOf.Z = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.Z, "Z");
ScalaJS.d.Z.isArrayOf = ScalaJS.isArrayOf.Z;

ScalaJS.isArrayOf.C = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.C);
ScalaJS.asArrayOf.C = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.C, "C");
ScalaJS.d.C.isArrayOf = ScalaJS.isArrayOf.C;

ScalaJS.isArrayOf.B = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.B);
ScalaJS.asArrayOf.B = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.B, "B");
ScalaJS.d.B.isArrayOf = ScalaJS.isArrayOf.B;

ScalaJS.isArrayOf.S = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.S);
ScalaJS.asArrayOf.S = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.S, "S");
ScalaJS.d.S.isArrayOf = ScalaJS.isArrayOf.S;

ScalaJS.isArrayOf.I = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.I);
ScalaJS.asArrayOf.I = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.I, "I");
ScalaJS.d.I.isArrayOf = ScalaJS.isArrayOf.I;

ScalaJS.isArrayOf.J = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.J);
ScalaJS.asArrayOf.J = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.J, "J");
ScalaJS.d.J.isArrayOf = ScalaJS.isArrayOf.J;

ScalaJS.isArrayOf.F = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.F);
ScalaJS.asArrayOf.F = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.F, "F");
ScalaJS.d.F.isArrayOf = ScalaJS.isArrayOf.F;

ScalaJS.isArrayOf.D = ScalaJS.makeIsArrayOfPrimitive(ScalaJS.d.D);
ScalaJS.asArrayOf.D = ScalaJS.makeAsArrayOfPrimitive(ScalaJS.isArrayOf.D, "D");
ScalaJS.d.D.isArrayOf = ScalaJS.isArrayOf.D;

// Polyfills

ScalaJS.imul = ScalaJS.g["Math"]["imul"] || (function(a, b) {
  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
  var ah = (a >>> 16) & 0xffff;
  var al = a & 0xffff;
  var bh = (b >>> 16) & 0xffff;
  var bl = b & 0xffff;
  // the shift by 0 fixes the sign on the high part
  // the final |0 converts the unsigned value into a signed value
  return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0);
});
ScalaJS.i.Lorg_denigma_binding_ClassBinder$class__classIf__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__V = (function($$this, element, className, cond) {
  ScalaJS.m.Lorg_denigma_extensions_package().MapOpt__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt(ScalaJS.as.Lorg_denigma_binding_ClassBinder($$this).bools__sci_Map()).getOrError__T__s_Option(cond).foreach__F1__V(new ScalaJS.c.Lorg_denigma_binding_ClassBinder$$anonfun$classIf$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, element, className))
});
ScalaJS.i.Lorg_denigma_binding_ClassBinder$class__classUnless__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__V = (function($$this, element, className, cond) {
  ScalaJS.m.Lorg_denigma_extensions_package().MapOpt__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt(ScalaJS.as.Lorg_denigma_binding_ClassBinder($$this).bools__sci_Map()).getOrError__T__s_Option(cond).foreach__F1__V(new ScalaJS.c.Lorg_denigma_binding_ClassBinder$$anonfun$classUnless$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, element, className))
});
ScalaJS.i.Lorg_denigma_binding_ClassBinder$class__classPartial__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction = (function($$this, el, value) {
  return new ScalaJS.c.Lorg_denigma_binding_ClassBinder$$anonfun$classPartial$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, el, value)
});
ScalaJS.i.Lorg_denigma_binding_ClassBinder$class__bindClass__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__V = (function($$this, element, prop) {
  ScalaJS.as.Lorg_denigma_binding_ClassBinder($$this).strings__sci_Map().get__O__s_Option(prop).foreach__F1__V(new ScalaJS.c.Lorg_denigma_binding_ClassBinder$$anonfun$bindClass$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, element, prop))
});
ScalaJS.i.Lorg_denigma_binding_ClassBinder$class__$init$__Lorg_denigma_binding_JustBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_CollectionBinding$class__extractListRx__Lorg_denigma_binding_CollectionBinding__O__Lorg_denigma_binding_macroses_ListRxMap__sci_Map = (function($$this, t, evidence$1) {
  return ScalaJS.as.Lorg_denigma_binding_macroses_ListRxMap(ScalaJS.m.s_Predef().implicitly__O__O(evidence$1)).asListRxMap__O__sci_Map(t)
});
ScalaJS.i.Lorg_denigma_binding_CollectionBinding$class__$init$__Lorg_denigma_binding_CollectionBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_EventBinding$class__extractMouseEvens__Lorg_denigma_binding_EventBinding__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map = (function($$this, t, evidence$2) {
  return ScalaJS.as.Lorg_denigma_binding_macroses_MouseEventMap(ScalaJS.m.s_Predef().implicitly__O__O(evidence$2)).asMouseEventMap__O__sci_Map(t)
});
ScalaJS.i.Lorg_denigma_binding_EventBinding$class__bindEvents__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function($$this, el, ats) {
  ats.withFilter__F1__scg_FilterMonadic(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(check$ifrefutable$1$2) {
      var check$ifrefutable$1 = ScalaJS.as.T2(check$ifrefutable$1$2);
      var x1 = check$ifrefutable$1;
      if ((x1 !== null)) {
        return true
      };
      return false
    })
  })())).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$1) {
    return (function(x$1$2) {
      var x$1 = ScalaJS.as.T2(x$1$2);
      var x1 = x$1;
      matchEnd3: {
        if ((x1 !== null)) {
          var key = ScalaJS.as.T(x1.$$und1__O());
          var value = ScalaJS.as.T(x1.$$und2__O());
          var x1$2 = key.toString();
          if (ScalaJS.anyRefEqEq("event-click", x1$2)) {
            var x1$3 = arg$outer.mouseEvents__sci_Map().get__O__s_Option(value);
            if (ScalaJS.is.s_Some(x1$3)) {
              var x2 = ScalaJS.as.s_Some(x1$3);
              var ev = ScalaJS.as.Lrx_core_Var(x2.x__O());
              arg$outer.bindClick__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Var__V(el$1, key, ev);
              break matchEnd3
            };
            ScalaJS.g["console"]["error"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["cannot bind click event for ", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [value]))));
            break matchEnd3
          };
          break matchEnd3
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1)
      }
    })
  })($$this, el)))
});
ScalaJS.i.Lorg_denigma_binding_EventBinding$class__bindClick__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Var__V = (function($$this, el, key, ev) {
  el["onclick"] = (function(arg$outer, ev$1) {
    return (function(m$2) {
      var m = m$2;
      ScalaJS.i.Lorg_denigma_binding_EventBinding$class__clickHandler$1__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_MouseEvent__Lrx_core_Var__V(arg$outer, m, ev$1)
    })
  })($$this, ev)
});
ScalaJS.i.Lorg_denigma_binding_EventBinding$class__clickHandler$1__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_MouseEvent__Lrx_core_Var__V = (function($$this, m, ev$1) {
  ev$1.update__F0__Lrx_core_Propagator__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(m$1) {
    return (function() {
      return m$1
    })
  })(m)), ScalaJS.m.Lrx_core_Propagator$Immediate())
});
ScalaJS.i.Lorg_denigma_binding_EventBinding$class__$init$__Lorg_denigma_binding_EventBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__extractStringRx__Lorg_denigma_binding_GeneralBinding__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map = (function($$this, t, evidence$2) {
  return ScalaJS.as.Lorg_denigma_binding_macroses_StringRxMap(ScalaJS.m.s_Predef().implicitly__O__O(evidence$2)).asStringRxMap__O__sci_Map(t)
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__extractBooleanRx__Lorg_denigma_binding_GeneralBinding__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map = (function($$this, t, evidence$3) {
  return ScalaJS.as.Lorg_denigma_binding_macroses_BooleanRxMap(ScalaJS.m.s_Predef().implicitly__O__O(evidence$3)).asBooleanRxMap__O__sci_Map(t)
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__loadIntoPartial__Lorg_denigma_binding_GeneralBinding__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction = (function($$this, el, value) {
  return new ScalaJS.c.Lorg_denigma_binding_GeneralBinding$$anonfun$loadIntoPartial$1().init___Lorg_denigma_binding_GeneralBinding__Lorg_scalajs_dom_HTMLElement__T($$this, el, value)
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__otherPartial__Lorg_denigma_binding_GeneralBinding__s_PartialFunction = (function($$this) {
  return new ScalaJS.c.Lorg_denigma_binding_GeneralBinding$$anonfun$otherPartial$1().init___Lorg_denigma_binding_GeneralBinding($$this)
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__bindLoadInto__Lorg_denigma_binding_GeneralBinding__Lorg_scalajs_dom_HTMLElement__T__Z__V = (function($$this, element, into, rel) {
  element["onclick"] = ScalaJS.as.Lorg_denigma_binding_JustBinding($$this).makeGoToHandler__Lorg_scalajs_dom_HTMLElement__T__Z__Z__sjs_js_Function1(element, into, true, rel)
});
ScalaJS.i.Lorg_denigma_binding_GeneralBinding$class__$init$__Lorg_denigma_binding_GeneralBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__propertyPartial__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__s_PartialFunction = (function($$this, el, key, value) {
  return new ScalaJS.c.Lorg_denigma_binding_PropertyBinder$$anonfun$propertyPartial$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T($$this, el, key, value)
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindProperty__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__Lorg_denigma_binding_PropertyBinder__Z = (function($$this, el, key, att, binder) {
  var x1 = new ScalaJS.c.T2().init___O__O(key.toString(), ScalaJS.i.sjsr_RuntimeString$class__toLowerCase__sjsr_RuntimeString__T(ScalaJS.as.T(el["tagName"])).toString());
  if ((x1 !== null)) {
    var p2 = ScalaJS.as.T(x1.$$und1__O());
    var p3 = ScalaJS.as.T(x1.$$und2__O());
    if (ScalaJS.anyRefEqEq("bind", p2)) {
      if (ScalaJS.anyRefEqEq("input", p3)) {
        var x1$2 = ScalaJS.m.Lorg_scalajs_dom_extensions_package().Attributes__Lorg_scalajs_dom_NamedNodeMap__Lorg_scalajs_dom_extensions_package$Attributes(el["attributes"]).get__T__s_Option("type").map__F1__s_Option(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
          return (function(x$1$2) {
            var x$1 = x$1$2;
            return ScalaJS.as.T(x$1["value"]).toString()
          })
        })()));
        if (ScalaJS.is.s_Some(x1$2)) {
          var x3 = ScalaJS.as.s_Some(x1$2);
          var p2$2 = ScalaJS.as.T(x3.x__O());
          if (ScalaJS.anyRefEqEq("checkbox", p2$2)) {
            var x1$3 = binder.bools__sci_Map().get__O__s_Option(att);
            if (ScalaJS.is.s_Some(x1$3)) {
              var x2 = ScalaJS.as.s_Some(x1$3);
              var b = ScalaJS.as.Lrx_core_Rx(x2.x__O());
              binder.bindCheckBox__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el, key, b);
              return true
            };
            if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1$3)) {
              return false
            };
            throw new ScalaJS.c.s_MatchError().init___O(x1$3)
          }
        };
        var x1$4 = binder.strings__sci_Map().get__O__s_Option(att);
        if (ScalaJS.is.s_Some(x1$4)) {
          var x2$2 = ScalaJS.as.s_Some(x1$4);
          var str = ScalaJS.as.Lrx_core_Rx(x2$2.x__O());
          el["onkeyup"] = (function(f) {
            return (function(arg1) {
              return f.apply__O__O(arg1)
            })
          })(binder.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el, str, "value"));
          binder.bindInput__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el, key, str);
          return true
        };
        if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1$4)) {
          return false
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1$4)
      }
    }
  };
  if ((x1 !== null)) {
    var p4 = ScalaJS.as.T(x1.$$und1__O());
    var p5 = ScalaJS.as.T(x1.$$und2__O());
    if (ScalaJS.anyRefEqEq("bind", p4)) {
      if (ScalaJS.anyRefEqEq("textarea", p5)) {
        var x1$5 = binder.strings__sci_Map().get__O__s_Option(att);
        if (ScalaJS.is.s_Some(x1$5)) {
          var x2$3 = ScalaJS.as.s_Some(x1$5);
          var str$2 = ScalaJS.as.Lrx_core_Rx(x2$3.x__O());
          el["onkeyup"] = (function(f) {
            return (function(arg1) {
              return f.apply__O__O(arg1)
            })
          })(binder.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el, str$2, "value"));
          ScalaJS.as.Lorg_denigma_binding_PropertyBinder($$this).bindText__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el, key, str$2);
          return true
        };
        if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1$5)) {
          return false
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1$5)
      }
    }
  };
  if ((x1 !== null)) {
    var p6 = ScalaJS.as.T(x1.$$und1__O());
    if (ScalaJS.anyRefEqEq("bind", p6)) {
      var x1$6 = binder.strings__sci_Map().get__O__s_Option(att);
      if (ScalaJS.is.s_Some(x1$6)) {
        var x2$4 = ScalaJS.as.s_Some(x1$6);
        var str$3 = ScalaJS.as.Lrx_core_Rx(x2$4.x__O());
        el["onkeyup"] = (function(f) {
          return (function(arg1) {
            return f.apply__O__O(arg1)
          })
        })(binder.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el, str$3, "value"));
        binder.bindText__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el, key, str$3);
        return true
      };
      if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1$6)) {
        return false
      };
      throw new ScalaJS.c.s_MatchError().init___O(x1$6)
    }
  };
  return false
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindProperty$default$4__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__Lorg_denigma_binding_PropertyBinder = (function($$this, el, key, att) {
  return ScalaJS.as.Lorg_denigma_binding_PropertyBinder($$this)
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindCheckBox__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V = (function($$this, el, key, rx) {
  $$this.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, rx, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(el$2, value$2) {
      var el = el$2;
      var value = ScalaJS.uZ(value$2);
      el["attributes"]["setNamedItem"](ScalaJS.m.Lorg_denigma_extensions_package().AttrFactory__T2__Lorg_denigma_extensions_AttributesOps$AttrFactory(ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("checked"), ScalaJS.objectToString(value))).toAtt__Lorg_scalajs_dom_Attr())
    })
  })()))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindInput__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V = (function($$this, el, key, str) {
  $$this.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, str, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(el$2, value$2) {
      var el = el$2;
      var value = ScalaJS.as.T(value$2);
      if ((ScalaJS.m.Lorg_denigma_extensions_package().AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(el).dyn__sjs_js_Dynamic()["value"] !== value)) {
        ScalaJS.m.Lorg_denigma_extensions_package().AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(el).dyn__sjs_js_Dynamic()["value"] = value
      }
    })
  })()))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindText__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V = (function($$this, el, key, str) {
  $$this.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, str, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(el$2, value$2) {
      var el = el$2;
      var value = ScalaJS.as.T(value$2);
      el["textContent"] = value
    })
  })()))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__makePropHandler__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1 = (function($$this, el, par, pname) {
  return $$this.makeEventHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F3__F1(el, par, new ScalaJS.c.Lorg_denigma_binding_PropertyBinder$$anonfun$makePropHandler$1().init___Lorg_denigma_binding_JustBinding__T($$this, pname))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindInnerHTML__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__V = (function($$this, el, key, att) {
  ScalaJS.as.Lorg_denigma_binding_PropertyBinder($$this).strings__sci_Map().get__O__s_Option(att).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$2, key$2) {
    return (function(str$2) {
      var str = ScalaJS.as.Lrx_core_Rx(str$2);
      el$2["onchange"] = (function(f) {
        return (function(arg1) {
          return f.apply__O__O(arg1)
        })
      })(ScalaJS.as.Lorg_denigma_binding_PropertyBinder(arg$outer).makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el$2, str, "innerHTML"));
      ScalaJS.as.Lorg_denigma_binding_PropertyBinder(arg$outer).bindInner__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el$2, key$2, str)
    })
  })($$this, el, key)))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindInner__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V = (function($$this, el, key, str) {
  $$this.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, str, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(el$2, value$2) {
      var el = el$2;
      var value = ScalaJS.as.T(value$2);
      el["innerHTML"] = value
    })
  })()))
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__bindAttribute__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__sci_Map__Z = (function($$this, el, key, value, mp) {
  var x1 = mp.get__O__s_Option(value);
  if (ScalaJS.is.s_Some(x1)) {
    var x2 = ScalaJS.as.s_Some(x1);
    var str = ScalaJS.as.Lrx_core_Rx(x2.x__O());
    $$this.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, str, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function(str$1, key$3) {
      return (function(el$2, value$2) {
        var el = el$2;
        var value = ScalaJS.as.T(value$2);
        el["attributes"]["setNamedItem"](ScalaJS.m.Lorg_denigma_extensions_package().AttrFactory__T2__Lorg_denigma_extensions_AttributesOps$AttrFactory(ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O(key$3), str$1.now__O())).toAtt__Lorg_scalajs_dom_Attr());
        ScalaJS.m.Lorg_denigma_extensions_package().AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(el).dyn__sjs_js_Dynamic()[key$3] = ScalaJS.as.T(str$1.now__O())
      })
    })(str, key)));
    return true
  };
  return false
});
ScalaJS.i.Lorg_denigma_binding_PropertyBinder$class__$init$__Lorg_denigma_binding_JustBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__extractTagRx__Lorg_denigma_binding_ScalaTagsBinder__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map = (function($$this, t, evidence$1) {
  return ScalaJS.as.Lorg_denigma_binding_macroses_TagRxMap(ScalaJS.m.s_Predef().implicitly__O__O(evidence$1)).asTagRxMap__O__sci_Map(t)
});
ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__bindHTML__Lorg_denigma_binding_ScalaTagsBinder__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function($$this, el, ats) {
  ats.get__O__s_Option("html").flatMap__F1__s_Option(new ScalaJS.c.Lorg_denigma_binding_ScalaTagsBinder$$anonfun$bindHTML$1().init___Lorg_denigma_binding_ScalaTagsBinder($$this)).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$1) {
    return (function(x0$1$2) {
      var x0$1 = ScalaJS.as.T2(x0$1$2);
      var x1 = x0$1;
      matchEnd3: {
        if ((x1 !== null)) {
          var key = ScalaJS.as.T(x1.$$und1__O());
          var rx = ScalaJS.as.Lrx_core_Rx(x1.$$und2__O());
          arg$outer.updateAttrByRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__V(key, el$1, rx);
          break matchEnd3
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1)
      }
    })
  })($$this, el)))
});
ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__updateAttrByRx__Lorg_denigma_binding_ScalaTagsBinder__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__V = (function($$this, key, el, rtag) {
  ScalaJS.as.Lorg_denigma_binding_JustBinding($$this).bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V(key, el, rtag, new ScalaJS.c.Lorg_denigma_binding_ScalaTagsBinder$$anonfun$updateAttrByRx$1().init___Lorg_denigma_binding_ScalaTagsBinder($$this))
});
ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__$init$__Lorg_denigma_binding_ScalaTagsBinder__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_binding_VisibilityBinder$class__visibilityPartial__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction = (function($$this, el, value) {
  return new ScalaJS.c.Lorg_denigma_binding_VisibilityBinder$$anonfun$visibilityPartial$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, el, value)
});
ScalaJS.i.Lorg_denigma_binding_VisibilityBinder$class__showIf__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__V = (function($$this, element, show, disp) {
  ScalaJS.m.Lorg_denigma_extensions_package().MapOpt__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt(ScalaJS.as.Lorg_denigma_binding_VisibilityBinder($$this).bools__sci_Map()).getOrError__T__s_Option(show).foreach__F1__V(new ScalaJS.c.Lorg_denigma_binding_VisibilityBinder$$anonfun$showIf$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, element, disp))
});
ScalaJS.i.Lorg_denigma_binding_VisibilityBinder$class__hideIf__Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__T__V = (function($$this, element, hide, disp) {
  ScalaJS.m.Lorg_denigma_extensions_package().MapOpt__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt(ScalaJS.as.Lorg_denigma_binding_VisibilityBinder($$this).bools__sci_Map()).getOrError__T__s_Option(hide).foreach__F1__V(new ScalaJS.c.Lorg_denigma_binding_VisibilityBinder$$anonfun$hideIf$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T($$this, element, disp))
});
ScalaJS.i.Lorg_denigma_binding_VisibilityBinder$class__$init$__Lorg_denigma_binding_JustBinding__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_extensions_AnyJsExtensions$class__AnyJs__Lorg_denigma_extensions_AnyJsExtensions__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function($$this, obj) {
  return new ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs().init___Lorg_denigma_extensions_AnyJsExtensions__sjs_js_Any($$this, obj)
});
ScalaJS.i.Lorg_denigma_extensions_AnyJsExtensions$class__$init$__Lorg_denigma_extensions_AnyJsExtensions__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_extensions_AttributesOps$class__AttrFactory__Lorg_denigma_extensions_AttributesOps__T2__Lorg_denigma_extensions_AttributesOps$AttrFactory = (function($$this, tuple) {
  return new ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory().init___Lorg_denigma_extensions_AttributesOps__T2($$this, tuple)
});
ScalaJS.i.Lorg_denigma_extensions_AttributesOps$class__$init$__Lorg_denigma_extensions_AttributesOps__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_extensions_CommonOps$class__MapOpt__Lorg_denigma_extensions_CommonOps__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt = (function($$this, source) {
  return new ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt().init___Lorg_denigma_extensions_CommonOps__sci_Map($$this, source)
});
ScalaJS.i.Lorg_denigma_extensions_CommonOps$class__$init$__Lorg_denigma_extensions_CommonOps__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_extensions_RxOps$class__AnyRx__Lorg_denigma_extensions_RxOps__Lrx_core_Rx__Lorg_denigma_extensions_RxOps$AnyRx = (function($$this, source) {
  return new ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx().init___Lorg_denigma_extensions_RxOps__Lrx_core_Rx($$this, source)
});
ScalaJS.i.Lorg_denigma_extensions_RxOps$class__$init$__Lorg_denigma_extensions_RxOps__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.Lorg_denigma_views_RemoteView$class__futureData__Lorg_denigma_views_RemoteView__F1__s_concurrent_Future = (function($$this, getFuture) {
  return ScalaJS.as.s_concurrent_Future(getFuture.apply__O__O($$this.path__T()))
});
ScalaJS.i.Lorg_denigma_views_RemoteView$class__$init$__Lorg_denigma_views_RemoteView__V = (function($$this) {
  /*<skip>*/
});
/** @constructor */
ScalaJS.c.O = (function() {
  /*<skip>*/
});
/** @constructor */
ScalaJS.h.O = (function() {
  /*<skip>*/
});
ScalaJS.h.O.prototype = ScalaJS.c.O.prototype;
ScalaJS.c.O.prototype.init___ = (function() {
  return this
});
ScalaJS.c.O.prototype.getClass__jl_Class = (function() {
  return this.$classData.getClassOf()
});
ScalaJS.c.O.prototype.hashCode__I = (function() {
  return 42
});
ScalaJS.c.O.prototype.equals__O__Z = (function(that) {
  return (this === that)
});
ScalaJS.c.O.prototype.toString__T = (function() {
  return ((this.getClass__jl_Class().getName__T() + "@") + (this.hashCode__I() >>> 0)["toString"](16))
});
ScalaJS.c.O.prototype["toString"] = (function() {
  return this.toString__T()
});
ScalaJS.is.O = (function(obj) {
  return (obj !== null)
});
ScalaJS.as.O = (function(obj) {
  return obj
});
ScalaJS.isArrayOf.O = (function(obj, depth) {
  var data = (obj && obj.$classData);
  if ((!data)) {
    return false
  } else {
    var arrayDepth = (data.arrayDepth || 0);
    if ((arrayDepth < depth)) {
      return false
    } else {
      if ((arrayDepth > depth)) {
        return true
      } else {
        return (!data.arrayBase["isPrimitive"])
      }
    }
  }
});
ScalaJS.asArrayOf.O = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.O(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Object;", depth)
  }
});
ScalaJS.d.O = new ScalaJS.ClassTypeData({
  O: 0
}, false, "java.lang.Object", null, {
  O: 1
}, ScalaJS.is.O, ScalaJS.isArrayOf.O);
ScalaJS.c.O.prototype.$classData = ScalaJS.d.O;
/*<skip>*/;
ScalaJS.i.jl_JSConsoleBasedPrintStream$class__print__jl_JSConsoleBasedPrintStream__T__V = (function($$this, s) {
  if ((s === null)) {
    var rest = "null"
  } else {
    var rest = s
  };
  while ((!ScalaJS.i.sjsr_RuntimeString$class__isEmpty__sjsr_RuntimeString__Z(rest))) {
    var nlPos = ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__T__I(rest, "\n");
    if ((nlPos < 0)) {
      $$this.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V((("" + $$this.java$lang$JSConsoleBasedPrintStream$$buffer__T()) + rest));
      $$this.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V(false);
      rest = ""
    } else {
      $$this.doWriteLine__T__V((("" + $$this.java$lang$JSConsoleBasedPrintStream$$buffer__T()) + ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__I__T(rest, 0, nlPos)));
      $$this.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V("");
      $$this.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V(true);
      rest = ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T(rest, ((nlPos + 1) | 0))
    }
  }
});
ScalaJS.i.jl_JSConsoleBasedPrintStream$class__flush__jl_JSConsoleBasedPrintStream__V = (function($$this) {
  if ((!$$this.java$lang$JSConsoleBasedPrintStream$$flushed__Z())) {
    $$this.doWriteLine__T__V((("" + $$this.java$lang$JSConsoleBasedPrintStream$$buffer__T()) + $$this.java$lang$JSConsoleBasedPrintStream$$lineContEnd__T()));
    $$this.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V($$this.java$lang$JSConsoleBasedPrintStream$$lineContStart__T());
    $$this.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V(true)
  }
});
ScalaJS.i.jl_JSConsoleBasedPrintStream$class__$init$__jl_JSConsoleBasedPrintStream__V = (function($$this) {
  $$this.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V(true);
  $$this.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V("");
  $$this.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContEnd$und$eq__T__V("\u21a9");
  $$this.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContStart$und$eq__T__V("\u21aa")
});
ScalaJS.i.s_Function0$class__toString__F0__T = (function($$this) {
  return "<function0>"
});
ScalaJS.i.s_Function0$class__$init$__F0__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Function0$mcV$sp$class__$init$__s_Function0$mcV$sp__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Function1$class__toString__F1__T = (function($$this) {
  return "<function1>"
});
ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V = (function($$this, v1) {
  $$this.apply__O__O(v1)
});
ScalaJS.i.s_Function1$class__$init$__F1__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Function1$mcVI$sp$class__$init$__s_Function1$mcVI$sp__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Function2$class__toString__F2__T = (function($$this) {
  return "<function2>"
});
ScalaJS.i.s_Function2$class__$init$__F2__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Function3$class__toString__F3__T = (function($$this) {
  return "<function3>"
});
ScalaJS.i.s_Function3$class__$init$__F3__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_PartialFunction$class__orElse__s_PartialFunction__s_PartialFunction__s_PartialFunction = (function($$this, that) {
  return new ScalaJS.c.s_PartialFunction$OrElse().init___s_PartialFunction__s_PartialFunction($$this, that)
});
ScalaJS.i.s_PartialFunction$class__applyOrElse__s_PartialFunction__O__F1__O = (function($$this, x, default$2) {
  if ($$this.isDefinedAt__O__Z(x)) {
    return $$this.apply__O__O(x)
  } else {
    return default$2.apply__O__O(x)
  }
});
ScalaJS.i.s_PartialFunction$class__$init$__s_PartialFunction__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Product$class__$init$__s_Product__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Product2$class__productArity__s_Product2__I = (function($$this) {
  return 2
});
ScalaJS.i.s_Product2$class__productElement__s_Product2__I__O = (function($$this, n) {
  var x1 = n;
  switch (x1) {
    case 0:
      {
        return $$this.$$und1__O();
        break
      };
    case 1:
      {
        return $$this.$$und2__O();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(n));
  }
});
ScalaJS.i.s_Product2$class__$init$__s_Product2__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Product5$class__productArity__s_Product5__I = (function($$this) {
  return 5
});
ScalaJS.i.s_Product5$class__productElement__s_Product5__I__O = (function($$this, n) {
  var x1 = n;
  switch (x1) {
    case 0:
      {
        return $$this.$$und1__O();
        break
      };
    case 1:
      {
        return $$this.$$und2__O();
        break
      };
    case 2:
      {
        return $$this.$$und3__O();
        break
      };
    case 3:
      {
        return $$this.$$und4__O();
        break
      };
    case 4:
      {
        return $$this.$$und5__O();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(n));
  }
});
ScalaJS.i.s_Product5$class__$init$__s_Product5__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_Proxy$class__hashCode__s_Proxy__I = (function($$this) {
  return ScalaJS.objectHashCode($$this.self__O())
});
ScalaJS.i.s_Proxy$class__equals__s_Proxy__O__Z = (function($$this, that) {
  var x1 = that;
  if ((null === x1)) {
    return false
  };
  var x = that;
  return (((x === $$this) || (x === $$this.self__O())) || ScalaJS.objectEquals(x, $$this.self__O()))
});
ScalaJS.i.s_Proxy$class__toString__s_Proxy__T = (function($$this) {
  return ("" + $$this.self__O())
});
ScalaJS.i.s_Proxy$class__$init$__s_Proxy__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_concurrent_ExecutionContext$class__$init$__s_concurrent_ExecutionContext__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_math_LowPriorityEquiv$class__$init$__s_math_Equiv$__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_math_LowPriorityOrderingImplicits$class__$init$__s_math_LowPriorityOrderingImplicits__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_math_Ordered$class__$init$__s_math_Ordered__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_reflect_ClassManifestDeprecatedApis$class__$init$__s_reflect_ClassTag__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_reflect_ClassTag$class__newArray__s_reflect_ClassTag__I__O = (function($$this, len) {
  var x1 = $$this.runtimeClass__jl_Class();
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Byte().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.B.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Short().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.S.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Character().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.C.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Integer().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.I.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Long().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.J.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Float().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.F.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Double().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.D.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Boolean().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.Z.getArrayOf(), [len])
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.jl_Void().TYPE__jl_Class(), x1)) {
    return ScalaJS.newArrayObject(ScalaJS.d.sr_BoxedUnit.getArrayOf(), [len])
  };
  return ScalaJS.m.jl_reflect_Array().newInstance__jl_Class__I__O($$this.runtimeClass__jl_Class(), len)
});
ScalaJS.i.s_reflect_ClassTag$class__equals__s_reflect_ClassTag__O__Z = (function($$this, x) {
  return (ScalaJS.is.s_reflect_ClassTag(x) && ScalaJS.anyRefEqEq($$this.runtimeClass__jl_Class(), ScalaJS.as.s_reflect_ClassTag(x).runtimeClass__jl_Class()))
});
ScalaJS.i.s_reflect_ClassTag$class__hashCode__s_reflect_ClassTag__I = (function($$this) {
  return ScalaJS.m.sr_ScalaRunTime().hash__O__I($$this.runtimeClass__jl_Class())
});
ScalaJS.i.s_reflect_ClassTag$class__toString__s_reflect_ClassTag__T = (function($$this) {
  return ScalaJS.i.s_reflect_ClassTag$class__prettyprint$1__s_reflect_ClassTag__jl_Class__T($$this, $$this.runtimeClass__jl_Class())
});
ScalaJS.i.s_reflect_ClassTag$class__prettyprint$1__s_reflect_ClassTag__jl_Class__T = (function($$this, clazz) {
  if (clazz.isArray__Z()) {
    return new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["Array[", "]"]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [ScalaJS.i.s_reflect_ClassTag$class__prettyprint$1__s_reflect_ClassTag__jl_Class__T($$this, ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(clazz))])))
  } else {
    return clazz.getName__T()
  }
});
ScalaJS.i.s_reflect_ClassTag$class__$init$__s_reflect_ClassTag__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_reflect_Manifest$class__$init$__s_reflect_Manifest__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_util_control_NoStackTrace$class__fillInStackTrace__s_util_control_NoStackTrace__jl_Throwable = (function($$this) {
  if (ScalaJS.m.s_util_control_NoStackTrace().noSuppression__Z()) {
    return $$this.scala$util$control$NoStackTrace$$super$fillInStackTrace__jl_Throwable()
  } else {
    return ScalaJS.as.jl_Throwable($$this)
  }
});
ScalaJS.i.s_util_control_NoStackTrace$class__$init$__s_util_control_NoStackTrace__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.s_xml_Equality$class__hashCode__s_xml_Equality__I = (function($$this) {
  return ScalaJS.m.sr_ScalaRunTime().hash__O__I($$this.basisForHashCode__sc_Seq())
});
ScalaJS.i.s_xml_Equality$class__equals__s_xml_Equality__O__Z = (function($$this, other) {
  return ScalaJS.i.s_xml_Equality$class__doComparison__s_xml_Equality__O__Z__Z($$this, other, false)
});
ScalaJS.i.s_xml_Equality$class__doComparison__s_xml_Equality__O__Z__Z = (function($$this, other, blithe) {
  var x1 = other;
  matchEnd5: {
    if (ScalaJS.is.O(x1)) {
      var x2 = x1;
      if (($$this === x2)) {
        var strictlyEqual = true;
        break matchEnd5
      }
    };
    if (ScalaJS.is.s_xml_Equality(x1)) {
      var x3 = ScalaJS.as.s_xml_Equality(x1);
      var strictlyEqual = (x3.canEqual__O__Z($$this) && $$this.strict$und$eq$eq__s_xml_Equality__Z(x3));
      break matchEnd5
    };
    var strictlyEqual = false;
    break matchEnd5
  };
  return (strictlyEqual || (blithe && ScalaJS.m.s_xml_Equality().compareBlithely__O__O__Z($$this, ScalaJS.m.s_xml_Equality().asRef__O__O(other))))
});
ScalaJS.i.s_xml_Equality$class__$init$__s_xml_Equality__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_BufferedIterator$class__$init$__sc_BufferedIterator__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenIterable$class__$init$__sc_GenIterable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenMapLike$class__hashCode__sc_GenMapLike__I = (function($$this) {
  return ScalaJS.m.s_util_hashing_MurmurHash3().mapHash__sc_Map__I($$this.seq__sc_Map())
});
ScalaJS.i.sc_GenMapLike$class__equals__sc_GenMapLike__O__Z = (function($$this, that) {
  var x1 = that;
  if (ScalaJS.is.sc_GenMap(x1)) {
    var x2 = ScalaJS.as.sc_GenMap(x1);
    return (($$this === x2) || ((x2.canEqual__O__Z($$this) && ($$this.size__I() === x2.size__I())) && ScalaJS.i.sc_GenMapLike$class__liftedTree1$1__sc_GenMapLike__sc_GenMap__Z($$this, x2)))
  };
  return false
});
ScalaJS.i.sc_GenMapLike$class__liftedTree1$1__sc_GenMapLike__sc_GenMap__Z = (function($$this, x2$1) {
  try {
    return $$this.forall__F1__Z(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(x2$1) {
      return (function(x0$1$2) {
        var x0$1 = ScalaJS.as.T2(x0$1$2);
        var x1 = x0$1;
        if ((x1 !== null)) {
          var k = x1.$$und1__O();
          var v = x1.$$und2__O();
          var x1$2 = x2$1.get__O__s_Option(k);
          if (ScalaJS.is.s_Some(x1$2)) {
            var x3 = ScalaJS.as.s_Some(x1$2);
            var p2 = x3.x__O();
            if (ScalaJS.anyEqEq(v, p2)) {
              return true
            }
          };
          return false
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1)
      })
    })(x2$1)))
  } catch (ex) {
    if (ScalaJS.is.jl_ClassCastException(ex)) {
      var ex$2 = ex;
      ScalaJS.m.s_Predef().println__O__V("class cast ");
      return false
    } else {
      throw ex
    }
  }
});
ScalaJS.i.sc_GenMapLike$class__$init$__sc_GenMapLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenSeq$class__$init$__sc_GenSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenSeqLike$class__isDefinedAt__sc_GenSeqLike__I__Z = (function($$this, idx) {
  return ((idx >= 0) && (idx < $$this.length__I()))
});
ScalaJS.i.sc_GenSeqLike$class__prefixLength__sc_GenSeqLike__F1__I = (function($$this, p) {
  return $$this.segmentLength__F1__I__I(p, 0)
});
ScalaJS.i.sc_GenSeqLike$class__hashCode__sc_GenSeqLike__I = (function($$this) {
  return ScalaJS.m.s_util_hashing_MurmurHash3().seqHash__sc_Seq__I($$this.seq__sc_Seq())
});
ScalaJS.i.sc_GenSeqLike$class__equals__sc_GenSeqLike__O__Z = (function($$this, that) {
  var x1 = that;
  if (ScalaJS.is.sc_GenSeq(x1)) {
    var x2 = ScalaJS.as.sc_GenSeq(x1);
    return (x2.canEqual__O__Z($$this) && $$this.sameElements__sc_GenIterable__Z(x2))
  };
  return false
});
ScalaJS.i.sc_GenSeqLike$class__$init$__sc_GenSeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenSet$class__$init$__sc_GenSet__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenSetLike$class__apply__sc_GenSetLike__O__Z = (function($$this, elem) {
  return $$this.contains__O__Z(elem)
});
ScalaJS.i.sc_GenSetLike$class__subsetOf__sc_GenSetLike__sc_GenSet__Z = (function($$this, that) {
  return $$this.forall__F1__Z(that)
});
ScalaJS.i.sc_GenSetLike$class__equals__sc_GenSetLike__O__Z = (function($$this, that) {
  var x1 = that;
  if (ScalaJS.is.sc_GenSet(x1)) {
    var x2 = ScalaJS.as.sc_GenSet(x1);
    return (($$this === x2) || ((x2.canEqual__O__Z($$this) && ($$this.size__I() === x2.size__I())) && ScalaJS.i.sc_GenSetLike$class__liftedTree1$1__sc_GenSetLike__sc_GenSet__Z($$this, x2)))
  };
  return false
});
ScalaJS.i.sc_GenSetLike$class__hashCode__sc_GenSetLike__I = (function($$this) {
  return ScalaJS.m.s_util_hashing_MurmurHash3().setHash__sc_Set__I($$this.seq__sc_Set())
});
ScalaJS.i.sc_GenSetLike$class__liftedTree1$1__sc_GenSetLike__sc_GenSet__Z = (function($$this, x2$1) {
  try {
    return $$this.subsetOf__sc_GenSet__Z(x2$1)
  } catch (ex) {
    if (ScalaJS.is.jl_ClassCastException(ex)) {
      var ex$2 = ex;
      return false
    } else {
      throw ex
    }
  }
});
ScalaJS.i.sc_GenSetLike$class__$init$__sc_GenSetLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenTraversable$class__$init$__sc_GenTraversable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_GenTraversableOnce$class__$init$__sc_GenTraversableOnce__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I = (function($$this) {
  return ScalaJS.m.s_util_hashing_MurmurHash3().seqHash__sc_Seq__I($$this.seq__sc_IndexedSeq())
});
ScalaJS.i.sc_IndexedSeqLike$class__thisCollection__sc_IndexedSeqLike__sc_IndexedSeq = (function($$this) {
  return ScalaJS.as.sc_IndexedSeq($$this)
});
ScalaJS.i.sc_IndexedSeqLike$class__toCollection__sc_IndexedSeqLike__O__sc_IndexedSeq = (function($$this, repr) {
  return ScalaJS.as.sc_IndexedSeq(repr)
});
ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator = (function($$this) {
  return new ScalaJS.c.sc_IndexedSeqLike$Elements().init___sc_IndexedSeqLike__I__I($$this, 0, $$this.length__I())
});
ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer = (function($$this) {
  var result = new ScalaJS.c.scm_ArrayBuffer().init___I($$this.size__I());
  $$this.copyToBuffer__scm_Buffer__V(result);
  return result
});
ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_IndexedSeqOptimized$class__isEmpty__sc_IndexedSeqOptimized__Z = (function($$this) {
  return ($$this.length__I() === 0)
});
ScalaJS.i.sc_IndexedSeqOptimized$class__foreach__sc_IndexedSeqOptimized__F1__V = (function($$this, f) {
  var i = 0;
  var len = $$this.length__I();
  while ((i < len)) {
    f.apply__O__O($$this.apply__I__O(i));
    i = ((i + 1) | 0)
  }
});
ScalaJS.i.sc_IndexedSeqOptimized$class__find__sc_IndexedSeqOptimized__F1__s_Option = (function($$this, p) {
  var i = $$this.prefixLength__F1__I(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(p$3) {
    return (function(x$3$2) {
      var x$3 = ScalaJS.as.O(x$3$2);
      return (!ScalaJS.uZ(p$3.apply__O__O(x$3)))
    })
  })(p)));
  if ((i < $$this.length__I())) {
    return new ScalaJS.c.s_Some().init___O($$this.apply__I__O(i))
  } else {
    return ScalaJS.m.s_None()
  }
});
ScalaJS.i.sc_IndexedSeqOptimized$class__foldl__sc_IndexedSeqOptimized__I__I__O__F2__O = (function($$this, start, end, z, op) {
  tailCallLoop: while (true) {
    if ((start === end)) {
      return z
    } else {
      var temp$start = ((start + 1) | 0);
      var temp$z = op.apply__O__O__O(z, $$this.apply__I__O(start));
      start = temp$start;
      z = temp$z;
      continue tailCallLoop
    }
  }
});
ScalaJS.i.sc_IndexedSeqOptimized$class__foldLeft__sc_IndexedSeqOptimized__O__F2__O = (function($$this, z, op) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__foldl__sc_IndexedSeqOptimized__I__I__O__F2__O($$this, 0, $$this.length__I(), z, op)
});
ScalaJS.i.sc_IndexedSeqOptimized$class__sameElements__sc_IndexedSeqOptimized__sc_GenIterable__Z = (function($$this, that) {
  var x1 = that;
  if (ScalaJS.is.sc_IndexedSeq(x1)) {
    var x2 = ScalaJS.as.sc_IndexedSeq(x1);
    var len = $$this.length__I();
    if ((len === x2.length__I())) {
      var i = 0;
      while (((i < len) && ScalaJS.anyEqEq($$this.apply__I__O(i), x2.apply__I__O(i)))) {
        i = ((i + 1) | 0)
      };
      return (i === len)
    } else {
      return false
    }
  };
  return $$this.scala$collection$IndexedSeqOptimized$$super$sameElements__sc_GenIterable__Z(that)
});
ScalaJS.i.sc_IndexedSeqOptimized$class__copyToArray__sc_IndexedSeqOptimized__O__I__I__V = (function($$this, xs, start, len) {
  var i = 0;
  var j = start;
  var end = ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I($$this.length__I()), len)), ((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0));
  while ((i < end)) {
    ScalaJS.m.sr_ScalaRunTime().array$undupdate__O__I__O__V(xs, j, $$this.apply__I__O(i));
    i = ((i + 1) | 0);
    j = ((j + 1) | 0)
  }
});
ScalaJS.i.sc_IndexedSeqOptimized$class__lengthCompare__sc_IndexedSeqOptimized__I__I = (function($$this, len) {
  return (($$this.length__I() - len) | 0)
});
ScalaJS.i.sc_IndexedSeqOptimized$class__segmentLength__sc_IndexedSeqOptimized__F1__I__I = (function($$this, p, from) {
  var len = $$this.length__I();
  var i = from;
  while (((i < len) && ScalaJS.uZ(p.apply__O__O($$this.apply__I__O(i))))) {
    i = ((i + 1) | 0)
  };
  return ((i - from) | 0)
});
ScalaJS.i.sc_IndexedSeqOptimized$class__reverse__sc_IndexedSeqOptimized__O = (function($$this) {
  var b = $$this.newBuilder__scm_Builder();
  b.sizeHint__I__V($$this.length__I());
  var i = $$this.length__I();
  while ((0 < i)) {
    i = ((i - 1) | 0);
    b.$$plus$eq__O__scm_Builder($$this.apply__I__O(i))
  };
  return b.result__O()
});
ScalaJS.i.sc_IndexedSeqOptimized$class__$init$__sc_IndexedSeqOptimized__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Iterable$class__companion__sc_Iterable__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.sc_Iterable()
});
ScalaJS.i.sc_Iterable$class__seq__sc_Iterable__sc_Iterable = (function($$this) {
  return $$this
});
ScalaJS.i.sc_Iterable$class__$init$__sc_Iterable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_IterableLike$class__thisCollection__sc_IterableLike__sc_Iterable = (function($$this) {
  return ScalaJS.as.sc_Iterable($$this)
});
ScalaJS.i.sc_IterableLike$class__foreach__sc_IterableLike__F1__V = (function($$this, f) {
  $$this.iterator__sc_Iterator().foreach__F1__V(f)
});
ScalaJS.i.sc_IterableLike$class__forall__sc_IterableLike__F1__Z = (function($$this, p) {
  return $$this.iterator__sc_Iterator().forall__F1__Z(p)
});
ScalaJS.i.sc_IterableLike$class__find__sc_IterableLike__F1__s_Option = (function($$this, p) {
  return $$this.iterator__sc_Iterator().find__F1__s_Option(p)
});
ScalaJS.i.sc_IterableLike$class__isEmpty__sc_IterableLike__Z = (function($$this) {
  return (!$$this.iterator__sc_Iterator().hasNext__Z())
});
ScalaJS.i.sc_IterableLike$class__head__sc_IterableLike__O = (function($$this) {
  return $$this.iterator__sc_Iterator().next__O()
});
ScalaJS.i.sc_IterableLike$class__take__sc_IterableLike__I__O = (function($$this, n) {
  var b = $$this.newBuilder__scm_Builder();
  if ((n <= 0)) {
    return b.result__O()
  } else {
    b.sizeHintBounded__I__sc_TraversableLike__V(n, $$this);
    var i = 0;
    var it = $$this.iterator__sc_Iterator();
    while (((i < n) && it.hasNext__Z())) {
      b.$$plus$eq__O__scm_Builder(it.next__O());
      i = ((i + 1) | 0)
    };
    return b.result__O()
  }
});
ScalaJS.i.sc_IterableLike$class__copyToArray__sc_IterableLike__O__I__I__V = (function($$this, xs, start, len) {
  var i = start;
  var end = ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(((start + len) | 0)), ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs));
  var it = $$this.iterator__sc_Iterator();
  while (((i < end) && it.hasNext__Z())) {
    ScalaJS.m.sr_ScalaRunTime().array$undupdate__O__I__O__V(xs, i, it.next__O());
    i = ((i + 1) | 0)
  }
});
ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z = (function($$this, that) {
  var these = $$this.iterator__sc_Iterator();
  var those = that.iterator__sc_Iterator();
  while ((these.hasNext__Z() && those.hasNext__Z())) {
    if ((!ScalaJS.anyEqEq(these.next__O(), those.next__O()))) {
      return false
    }
  };
  return ((!these.hasNext__Z()) && (!those.hasNext__Z()))
});
ScalaJS.i.sc_IterableLike$class__toStream__sc_IterableLike__sci_Stream = (function($$this) {
  return $$this.iterator__sc_Iterator().toStream__sci_Stream()
});
ScalaJS.i.sc_IterableLike$class__canEqual__sc_IterableLike__O__Z = (function($$this, that) {
  return true
});
ScalaJS.i.sc_IterableLike$class__$init$__sc_IterableLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Iterator$class__seq__sc_Iterator__sc_Iterator = (function($$this) {
  return $$this
});
ScalaJS.i.sc_Iterator$class__isEmpty__sc_Iterator__Z = (function($$this) {
  return (!$$this.hasNext__Z())
});
ScalaJS.i.sc_Iterator$class__isTraversableAgain__sc_Iterator__Z = (function($$this) {
  return false
});
ScalaJS.i.sc_Iterator$class__drop__sc_Iterator__I__sc_Iterator = (function($$this, n) {
  return $$this.slice__I__I__sc_Iterator(n, 2147483647)
});
ScalaJS.i.sc_Iterator$class__slice__sc_Iterator__I__I__sc_Iterator = (function($$this, from, until) {
  var lo = ScalaJS.m.sr_RichInt().max$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(from), 0);
  var toDrop = lo;
  while (((toDrop > 0) && $$this.hasNext__Z())) {
    $$this.next__O();
    toDrop = ((toDrop - 1) | 0)
  };
  return new ScalaJS.c.sc_Iterator$$anon$10().init___sc_Iterator__I__I($$this, lo, until)
});
ScalaJS.i.sc_Iterator$class__map__sc_Iterator__F1__sc_Iterator = (function($$this, f) {
  return new ScalaJS.c.sc_Iterator$$anon$11().init___sc_Iterator__F1($$this, f)
});
ScalaJS.i.sc_Iterator$class__foreach__sc_Iterator__F1__V = (function($$this, f) {
  while ($$this.hasNext__Z()) {
    f.apply__O__O($$this.next__O())
  }
});
ScalaJS.i.sc_Iterator$class__forall__sc_Iterator__F1__Z = (function($$this, p) {
  var res = true;
  while ((res && $$this.hasNext__Z())) {
    res = ScalaJS.uZ(p.apply__O__O($$this.next__O()))
  };
  return res
});
ScalaJS.i.sc_Iterator$class__find__sc_Iterator__F1__s_Option = (function($$this, p) {
  var res = ScalaJS.m.s_None();
  while ((res.isEmpty__Z() && $$this.hasNext__Z())) {
    var e = $$this.next__O();
    if (ScalaJS.uZ(p.apply__O__O(e))) {
      res = new ScalaJS.c.s_Some().init___O(e)
    }
  };
  return res
});
ScalaJS.i.sc_Iterator$class__copyToArray__sc_Iterator__O__I__I__V = (function($$this, xs, start, len) {
  ScalaJS.m.s_Predef().require__Z__F0__V(((start >= 0) && ((start < ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs)) || (ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) === 0))), new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(xs$2, start$4) {
    return (function() {
      return new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["start ", " out of range ", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [start$4, ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs$2)])))
    })
  })(xs, start)));
  var i = start;
  var end = ((start + ScalaJS.m.s_math_package().min__I__I__I(len, ((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0))) | 0);
  while (((i < end) && $$this.hasNext__Z())) {
    ScalaJS.m.sr_ScalaRunTime().array$undupdate__O__I__O__V(xs, i, $$this.next__O());
    i = ((i + 1) | 0)
  }
});
ScalaJS.i.sc_Iterator$class__toStream__sc_Iterator__sci_Stream = (function($$this) {
  if ($$this.hasNext__Z()) {
    return ScalaJS.m.sci_Stream$cons().apply__O__F0__sci_Stream$Cons($$this.next__O(), new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer) {
      return (function() {
        return arg$outer.toStream__sci_Stream()
      })
    })($$this)))
  } else {
    return ScalaJS.m.sci_Stream().empty__sci_Stream()
  }
});
ScalaJS.i.sc_Iterator$class__toString__sc_Iterator__T = (function($$this) {
  if ($$this.hasNext__Z()) {
    var jsx$1 = "non-empty"
  } else {
    var jsx$1 = "empty"
  };
  return (jsx$1 + " iterator")
});
ScalaJS.i.sc_Iterator$class__$init$__sc_Iterator__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_LinearSeq$class__$init$__sc_LinearSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_LinearSeqLike$class__thisCollection__sc_LinearSeqLike__sc_LinearSeq = (function($$this) {
  return ScalaJS.as.sc_LinearSeq($$this)
});
ScalaJS.i.sc_LinearSeqLike$class__toCollection__sc_LinearSeqLike__sc_LinearSeqLike__sc_LinearSeq = (function($$this, repr) {
  return ScalaJS.as.sc_LinearSeq(repr)
});
ScalaJS.i.sc_LinearSeqLike$class__hashCode__sc_LinearSeqLike__I = (function($$this) {
  return ScalaJS.m.s_util_hashing_MurmurHash3().seqHash__sc_Seq__I($$this.seq__sc_LinearSeq())
});
ScalaJS.i.sc_LinearSeqLike$class__iterator__sc_LinearSeqLike__sc_Iterator = (function($$this) {
  return new ScalaJS.c.sc_LinearSeqLike$$anon$1().init___sc_LinearSeqLike($$this)
});
ScalaJS.i.sc_LinearSeqLike$class__$init$__sc_LinearSeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_LinearSeqOptimized$class__length__sc_LinearSeqOptimized__I = (function($$this) {
  var these = $$this;
  var len = 0;
  while ((!these.isEmpty__Z())) {
    len = ((len + 1) | 0);
    these = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O())
  };
  return len
});
ScalaJS.i.sc_LinearSeqOptimized$class__apply__sc_LinearSeqOptimized__I__O = (function($$this, n) {
  var rest = $$this.drop__I__sc_LinearSeqOptimized(n);
  if (((n < 0) || rest.isEmpty__Z())) {
    throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(("" + n))
  };
  return rest.head__O()
});
ScalaJS.i.sc_LinearSeqOptimized$class__find__sc_LinearSeqOptimized__F1__s_Option = (function($$this, p) {
  var these = $$this;
  while ((!these.isEmpty__Z())) {
    if (ScalaJS.uZ(p.apply__O__O(these.head__O()))) {
      return new ScalaJS.c.s_Some().init___O(these.head__O())
    };
    these = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O())
  };
  return ScalaJS.m.s_None()
});
ScalaJS.i.sc_LinearSeqOptimized$class__foldLeft__sc_LinearSeqOptimized__O__F2__O = (function($$this, z, f) {
  var acc = z;
  var these = $$this;
  while ((!these.isEmpty__Z())) {
    acc = f.apply__O__O__O(acc, these.head__O());
    these = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O())
  };
  return acc
});
ScalaJS.i.sc_LinearSeqOptimized$class__last__sc_LinearSeqOptimized__O = (function($$this) {
  if ($$this.isEmpty__Z()) {
    throw new ScalaJS.c.ju_NoSuchElementException().init___()
  };
  var these = $$this;
  var nx = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O());
  while ((!nx.isEmpty__Z())) {
    these = nx;
    nx = ScalaJS.as.sc_LinearSeqOptimized(nx.tail__O())
  };
  return these.head__O()
});
ScalaJS.i.sc_LinearSeqOptimized$class__sameElements__sc_LinearSeqOptimized__sc_GenIterable__Z = (function($$this, that) {
  var x1 = that;
  if (ScalaJS.is.sc_LinearSeq(x1)) {
    var x2 = ScalaJS.as.sc_LinearSeq(x1);
    var these = $$this;
    var those = x2;
    while ((((!these.isEmpty__Z()) && (!those.isEmpty__Z())) && ScalaJS.anyEqEq(these.head__O(), those.head__O()))) {
      these = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O());
      those = ScalaJS.as.sc_LinearSeq(those.tail__O())
    };
    return (these.isEmpty__Z() && those.isEmpty__Z())
  };
  return $$this.scala$collection$LinearSeqOptimized$$super$sameElements__sc_GenIterable__Z(that)
});
ScalaJS.i.sc_LinearSeqOptimized$class__lengthCompare__sc_LinearSeqOptimized__I__I = (function($$this, len) {
  if ((len < 0)) {
    return 1
  } else {
    return ScalaJS.i.sc_LinearSeqOptimized$class__loop$1__sc_LinearSeqOptimized__I__sc_LinearSeqOptimized__I__I($$this, 0, $$this, len)
  }
});
ScalaJS.i.sc_LinearSeqOptimized$class__isDefinedAt__sc_LinearSeqOptimized__I__Z = (function($$this, x) {
  return ((x >= 0) && ($$this.lengthCompare__I__I(x) > 0))
});
ScalaJS.i.sc_LinearSeqOptimized$class__segmentLength__sc_LinearSeqOptimized__F1__I__I = (function($$this, p, from) {
  var i = 0;
  var these = $$this.drop__I__sc_LinearSeqOptimized(from);
  while (((!these.isEmpty__Z()) && ScalaJS.uZ(p.apply__O__O(these.head__O())))) {
    i = ((i + 1) | 0);
    these = ScalaJS.as.sc_LinearSeqOptimized(these.tail__O())
  };
  return i
});
ScalaJS.i.sc_LinearSeqOptimized$class__loop$1__sc_LinearSeqOptimized__I__sc_LinearSeqOptimized__I__I = (function($$this, i, xs, len$1) {
  tailCallLoop: while (true) {
    if ((i === len$1)) {
      if (xs.isEmpty__Z()) {
        return 0
      } else {
        return 1
      }
    } else {
      if (xs.isEmpty__Z()) {
        return -1
      } else {
        var temp$i = ((i + 1) | 0);
        var temp$xs = ScalaJS.as.sc_LinearSeqOptimized(xs.tail__O());
        i = temp$i;
        xs = temp$xs;
        continue tailCallLoop
      }
    }
  }
});
ScalaJS.i.sc_LinearSeqOptimized$class__$init$__sc_LinearSeqOptimized__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Map$class__$init$__sc_Map__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_MapLike$class__newBuilder__sc_MapLike__scm_Builder = (function($$this) {
  return new ScalaJS.c.scm_MapBuilder().init___sc_GenMap($$this.empty__sc_Map())
});
ScalaJS.i.sc_MapLike$class__isEmpty__sc_MapLike__Z = (function($$this) {
  return ($$this.size__I() === 0)
});
ScalaJS.i.sc_MapLike$class__getOrElse__sc_MapLike__O__F0__O = (function($$this, key, default$2) {
  var x1 = $$this.get__O__s_Option(key);
  if (ScalaJS.is.s_Some(x1)) {
    var x2 = ScalaJS.as.s_Some(x1);
    var v = x2.x__O();
    return v
  };
  if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1)) {
    return default$2.apply__O()
  };
  throw new ScalaJS.c.s_MatchError().init___O(x1)
});
ScalaJS.i.sc_MapLike$class__apply__sc_MapLike__O__O = (function($$this, key) {
  var x1 = $$this.get__O__s_Option(key);
  if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1)) {
    return $$this.$default__O__O(key)
  };
  if (ScalaJS.is.s_Some(x1)) {
    var x2 = ScalaJS.as.s_Some(x1);
    var value = x2.x__O();
    return value
  };
  throw new ScalaJS.c.s_MatchError().init___O(x1)
});
ScalaJS.i.sc_MapLike$class__contains__sc_MapLike__O__Z = (function($$this, key) {
  return $$this.get__O__s_Option(key).isDefined__Z()
});
ScalaJS.i.sc_MapLike$class__isDefinedAt__sc_MapLike__O__Z = (function($$this, key) {
  return $$this.contains__O__Z(key)
});
ScalaJS.i.sc_MapLike$class__values__sc_MapLike__sc_Iterable = (function($$this) {
  return new ScalaJS.c.sc_MapLike$DefaultValuesIterable().init___sc_MapLike($$this)
});
ScalaJS.i.sc_MapLike$class__valuesIterator__sc_MapLike__sc_Iterator = (function($$this) {
  return new ScalaJS.c.sc_MapLike$$anon$2().init___sc_MapLike($$this)
});
ScalaJS.i.sc_MapLike$class__default__sc_MapLike__O__O = (function($$this, key) {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T(("key not found: " + key))
});
ScalaJS.i.sc_MapLike$class__toBuffer__sc_MapLike__scm_Buffer = (function($$this) {
  var result = new ScalaJS.c.scm_ArrayBuffer().init___I($$this.size__I());
  $$this.copyToBuffer__scm_Buffer__V(result);
  return result
});
ScalaJS.i.sc_MapLike$class__addString__sc_MapLike__scm_StringBuilder__T__T__T__scm_StringBuilder = (function($$this, b, start, sep, end) {
  return $$this.iterator__sc_Iterator().map__F1__sc_Iterator(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x0$1$2) {
      var x0$1 = ScalaJS.as.T2(x0$1$2);
      var x1 = x0$1;
      if ((x1 !== null)) {
        var k = x1.$$und1__O();
        var v = x1.$$und2__O();
        return (("" + ScalaJS.m.sr_StringAdd().$$plus$extension__O__T__T(ScalaJS.m.s_Predef().any2stringadd__O__O(k), " -> ")) + v)
      };
      throw new ScalaJS.c.s_MatchError().init___O(x1)
    })
  })())).addString__scm_StringBuilder__T__T__T__scm_StringBuilder(b, start, sep, end)
});
ScalaJS.i.sc_MapLike$class__stringPrefix__sc_MapLike__T = (function($$this) {
  return "Map"
});
ScalaJS.i.sc_MapLike$class__toString__sc_MapLike__T = (function($$this) {
  return ScalaJS.i.sc_TraversableLike$class__toString__sc_TraversableLike__T($$this)
});
ScalaJS.i.sc_MapLike$class__$init$__sc_MapLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Parallelizable$class__$init$__sc_Parallelizable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Seq$class__$init$__sc_Seq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_SeqLike$class__thisCollection__sc_SeqLike__sc_Seq = (function($$this) {
  return ScalaJS.as.sc_Seq($$this)
});
ScalaJS.i.sc_SeqLike$class__toCollection__sc_SeqLike__O__sc_Seq = (function($$this, repr) {
  return ScalaJS.as.sc_Seq(repr)
});
ScalaJS.i.sc_SeqLike$class__lengthCompare__sc_SeqLike__I__I = (function($$this, len) {
  if ((len < 0)) {
    return 1
  } else {
    var i = 0;
    var it = $$this.iterator__sc_Iterator();
    while (it.hasNext__Z()) {
      if ((i === len)) {
        if (it.hasNext__Z()) {
          return 1
        } else {
          return 0
        }
      };
      it.next__O();
      i = ((i + 1) | 0)
    };
    return ((i - len) | 0)
  }
});
ScalaJS.i.sc_SeqLike$class__isEmpty__sc_SeqLike__Z = (function($$this) {
  return ($$this.lengthCompare__I__I(0) === 0)
});
ScalaJS.i.sc_SeqLike$class__size__sc_SeqLike__I = (function($$this) {
  return $$this.length__I()
});
ScalaJS.i.sc_SeqLike$class__segmentLength__sc_SeqLike__F1__I__I = (function($$this, p, from) {
  var i = 0;
  var it = $$this.iterator__sc_Iterator().drop__I__sc_Iterator(from);
  while ((it.hasNext__Z() && ScalaJS.uZ(p.apply__O__O(it.next__O())))) {
    i = ((i + 1) | 0)
  };
  return i
});
ScalaJS.i.sc_SeqLike$class__reverse__sc_SeqLike__O = (function($$this) {
  var xs = new ScalaJS.c.sr_ObjectRef().init___O(ScalaJS.m.sci_Nil());
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(xs$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      var x$10 = x;
      var jsx$1 = ScalaJS.as.sci_List(xs$1.elem$1).$$colon$colon__O__sci_List(x$10);
      xs$1.elem$1 = jsx$1
    })
  })(xs)));
  var b = $$this.newBuilder__scm_Builder();
  b.sizeHint__sc_TraversableLike__V($$this);
  ScalaJS.as.sci_List(xs.elem$1).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(b$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      return b$1.$$plus$eq__O__scm_Builder(x)
    })
  })(b)));
  return b.result__O()
});
ScalaJS.i.sc_SeqLike$class__reverseIterator__sc_SeqLike__sc_Iterator = (function($$this) {
  return $$this.toCollection__O__sc_Seq($$this.reverse__O()).iterator__sc_Iterator()
});
ScalaJS.i.sc_SeqLike$class__toString__sc_SeqLike__T = (function($$this) {
  return ScalaJS.i.sc_TraversableLike$class__toString__sc_TraversableLike__T($$this)
});
ScalaJS.i.sc_SeqLike$class__$init$__sc_SeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Set$class__$init$__sc_Set__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_SetLike$class__newBuilder__sc_SetLike__scm_Builder = (function($$this) {
  return new ScalaJS.c.scm_SetBuilder().init___sc_Set($$this.empty__sc_Set())
});
ScalaJS.i.sc_SetLike$class__toBuffer__sc_SetLike__scm_Buffer = (function($$this) {
  var result = new ScalaJS.c.scm_ArrayBuffer().init___I($$this.size__I());
  $$this.copyToBuffer__scm_Buffer__V(result);
  return result
});
ScalaJS.i.sc_SetLike$class__map__sc_SetLike__F1__scg_CanBuildFrom__O = (function($$this, f, bf) {
  return $$this.scala$collection$SetLike$$super$map__F1__scg_CanBuildFrom__O(f, bf)
});
ScalaJS.i.sc_SetLike$class__$plus$plus__sc_SetLike__sc_GenTraversableOnce__sc_Set = (function($$this, elems) {
  var x$1 = ScalaJS.as.sc_Set($$this.repr__O());
  return ScalaJS.as.sc_Set(elems.seq__sc_TraversableOnce().$$div$colon__O__F2__O(x$1, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(x$2$2, x$3$2) {
      var x$2 = ScalaJS.as.sc_Set(x$2$2);
      var x$3 = ScalaJS.as.O(x$3$2);
      return x$2.$$plus__O__sc_Set(x$3)
    })
  })())))
});
ScalaJS.i.sc_SetLike$class__isEmpty__sc_SetLike__Z = (function($$this) {
  return ($$this.size__I() === 0)
});
ScalaJS.i.sc_SetLike$class__stringPrefix__sc_SetLike__T = (function($$this) {
  return "Set"
});
ScalaJS.i.sc_SetLike$class__toString__sc_SetLike__T = (function($$this) {
  return ScalaJS.i.sc_TraversableLike$class__toString__sc_TraversableLike__T($$this)
});
ScalaJS.i.sc_SetLike$class__$init$__sc_SetLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_Traversable$class__$init$__sc_Traversable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_TraversableLike$class__repr__sc_TraversableLike__O = (function($$this) {
  return $$this
});
ScalaJS.i.sc_TraversableLike$class__isTraversableAgain__sc_TraversableLike__Z = (function($$this) {
  return true
});
ScalaJS.i.sc_TraversableLike$class__$plus$plus__sc_TraversableLike__sc_GenTraversableOnce__scg_CanBuildFrom__O = (function($$this, that, bf) {
  var b = bf.apply__O__scm_Builder($$this.repr__O());
  if (ScalaJS.is.sc_IndexedSeqLike(that)) {
    b.sizeHint__sc_TraversableLike__I__V($$this, that.seq__sc_TraversableOnce().size__I())
  };
  b.$$plus$plus$eq__sc_TraversableOnce__scg_Growable($$this.thisCollection__sc_Traversable());
  b.$$plus$plus$eq__sc_TraversableOnce__scg_Growable(that.seq__sc_TraversableOnce());
  return b.result__O()
});
ScalaJS.i.sc_TraversableLike$class__map__sc_TraversableLike__F1__scg_CanBuildFrom__O = (function($$this, f, bf) {
  var b = ScalaJS.i.sc_TraversableLike$class__builder$1__sc_TraversableLike__scg_CanBuildFrom__scm_Builder($$this, bf);
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(b$1, f$4) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      return b$1.$$plus$eq__O__scm_Builder(f$4.apply__O__O(x))
    })
  })(b, f)));
  return b.result__O()
});
ScalaJS.i.sc_TraversableLike$class__flatMap__sc_TraversableLike__F1__scg_CanBuildFrom__O = (function($$this, f, bf) {
  var b = ScalaJS.i.sc_TraversableLike$class__builder$2__sc_TraversableLike__scg_CanBuildFrom__scm_Builder($$this, bf);
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(b$2, f$5) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      return ScalaJS.as.scm_Builder(b$2.$$plus$plus$eq__sc_TraversableOnce__scg_Growable(ScalaJS.as.sc_GenTraversableOnce(f$5.apply__O__O(x)).seq__sc_TraversableOnce()))
    })
  })(b, f)));
  return b.result__O()
});
ScalaJS.i.sc_TraversableLike$class__collect__sc_TraversableLike__s_PartialFunction__scg_CanBuildFrom__O = (function($$this, pf, bf) {
  var b = bf.apply__O__scm_Builder($$this.repr__O());
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(b$4, pf$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      if (pf$1.isDefinedAt__O__Z(x)) {
        return b$4.$$plus$eq__O__scm_Builder(pf$1.apply__O__O(x))
      } else {
        return undefined
      }
    })
  })(b, pf)));
  return b.result__O()
});
ScalaJS.i.sc_TraversableLike$class__to__sc_TraversableLike__scg_CanBuildFrom__O = (function($$this, cbf) {
  var b = cbf.apply__scm_Builder();
  b.sizeHint__sc_TraversableLike__V($$this);
  b.$$plus$plus$eq__sc_TraversableOnce__scg_Growable($$this.thisCollection__sc_Traversable());
  return b.result__O()
});
ScalaJS.i.sc_TraversableLike$class__toString__sc_TraversableLike__T = (function($$this) {
  return $$this.mkString__T__T__T__T(($$this.stringPrefix__T() + "("), ", ", ")")
});
ScalaJS.i.sc_TraversableLike$class__stringPrefix__sc_TraversableLike__T = (function($$this) {
  var string = ScalaJS.objectGetClass($$this.repr__O()).getName__T();
  var idx1 = ScalaJS.i.sjsr_RuntimeString$class__lastIndexOf__sjsr_RuntimeString__I__I(string, 46);
  if ((idx1 !== -1)) {
    string = ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T(string, ((idx1 + 1) | 0))
  };
  var idx2 = ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__I__I(string, 36);
  if ((idx2 !== -1)) {
    string = ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__I__T(string, 0, idx2)
  };
  return string
});
ScalaJS.i.sc_TraversableLike$class__withFilter__sc_TraversableLike__F1__scg_FilterMonadic = (function($$this, p) {
  return new ScalaJS.c.sc_TraversableLike$WithFilter().init___sc_TraversableLike__F1($$this, p)
});
ScalaJS.i.sc_TraversableLike$class__builder$1__sc_TraversableLike__scg_CanBuildFrom__scm_Builder = (function($$this, bf$1) {
  var b = bf$1.apply__O__scm_Builder($$this.repr__O());
  b.sizeHint__sc_TraversableLike__V($$this);
  return b
});
ScalaJS.i.sc_TraversableLike$class__builder$2__sc_TraversableLike__scg_CanBuildFrom__scm_Builder = (function($$this, bf$2) {
  return bf$2.apply__O__scm_Builder($$this.repr__O())
});
ScalaJS.i.sc_TraversableLike$class__$init$__sc_TraversableLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sc_TraversableOnce$class__size__sc_TraversableOnce__I = (function($$this) {
  var result = new ScalaJS.c.sr_IntRef().init___I(0);
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(result$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      result$1.elem$1 = ((result$1.elem$1 + 1) | 0)
    })
  })(result)));
  return result.elem$1
});
ScalaJS.i.sc_TraversableOnce$class__nonEmpty__sc_TraversableOnce__Z = (function($$this) {
  return (!$$this.isEmpty__Z())
});
ScalaJS.i.sc_TraversableOnce$class__$div$colon__sc_TraversableOnce__O__F2__O = (function($$this, z, op) {
  return $$this.foldLeft__O__F2__O(z, op)
});
ScalaJS.i.sc_TraversableOnce$class__foldLeft__sc_TraversableOnce__O__F2__O = (function($$this, z, op) {
  var result = new ScalaJS.c.sr_ObjectRef().init___O(z);
  $$this.seq__sc_TraversableOnce().foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(result$2, op$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      result$2.elem$1 = op$1.apply__O__O__O(result$2.elem$1, x)
    })
  })(result, op)));
  return result.elem$1
});
ScalaJS.i.sc_TraversableOnce$class__copyToBuffer__sc_TraversableOnce__scm_Buffer__V = (function($$this, dest) {
  dest.$$plus$plus$eq__sc_TraversableOnce__scg_Growable($$this.seq__sc_TraversableOnce())
});
ScalaJS.i.sc_TraversableOnce$class__copyToArray__sc_TraversableOnce__O__I__V = (function($$this, xs, start) {
  $$this.copyToArray__O__I__I__V(xs, start, ((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0))
});
ScalaJS.i.sc_TraversableOnce$class__toArray__sc_TraversableOnce__s_reflect_ClassTag__O = (function($$this, evidence$1) {
  if ($$this.isTraversableAgain__Z()) {
    var result = evidence$1.newArray__I__O($$this.size__I());
    $$this.copyToArray__O__I__V(result, 0);
    return result
  } else {
    return $$this.toBuffer__scm_Buffer().toArray__s_reflect_ClassTag__O(evidence$1)
  }
});
ScalaJS.i.sc_TraversableOnce$class__toList__sc_TraversableOnce__sci_List = (function($$this) {
  return ScalaJS.as.sci_List($$this.to__scg_CanBuildFrom__O(ScalaJS.m.sci_List().canBuildFrom__scg_CanBuildFrom()))
});
ScalaJS.i.sc_TraversableOnce$class__toBuffer__sc_TraversableOnce__scm_Buffer = (function($$this) {
  return ScalaJS.as.scm_Buffer($$this.to__scg_CanBuildFrom__O(ScalaJS.m.scm_ArrayBuffer().canBuildFrom__scg_CanBuildFrom()))
});
ScalaJS.i.sc_TraversableOnce$class__to__sc_TraversableOnce__scg_CanBuildFrom__O = (function($$this, cbf) {
  var b = cbf.apply__scm_Builder();
  b.$$plus$plus$eq__sc_TraversableOnce__scg_Growable($$this.seq__sc_TraversableOnce());
  return b.result__O()
});
ScalaJS.i.sc_TraversableOnce$class__toMap__sc_TraversableOnce__s_Predef$$less$colon$less__sci_Map = (function($$this, ev) {
  var b = ScalaJS.m.sci_Map().newBuilder__scm_Builder();
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(b$1, ev$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      return b$1.$$plus$eq__O__scm_Builder(ev$1.apply__O__O(x))
    })
  })(b, ev)));
  return ScalaJS.as.sci_Map(b.result__O())
});
ScalaJS.i.sc_TraversableOnce$class__mkString__sc_TraversableOnce__T__T__T__T = (function($$this, start, sep, end) {
  return $$this.addString__scm_StringBuilder__T__T__T__scm_StringBuilder(new ScalaJS.c.scm_StringBuilder().init___(), start, sep, end).toString__T()
});
ScalaJS.i.sc_TraversableOnce$class__mkString__sc_TraversableOnce__T__T = (function($$this, sep) {
  return $$this.mkString__T__T__T__T("", sep, "")
});
ScalaJS.i.sc_TraversableOnce$class__mkString__sc_TraversableOnce__T = (function($$this) {
  return $$this.mkString__T__T("")
});
ScalaJS.i.sc_TraversableOnce$class__addString__sc_TraversableOnce__scm_StringBuilder__T__T__T__scm_StringBuilder = (function($$this, b, start, sep, end) {
  var first = new ScalaJS.c.sr_BooleanRef().init___Z(true);
  b.append__T__scm_StringBuilder(start);
  $$this.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(first$2, b$2, sep$1) {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      if (first$2.elem$1) {
        b$2.append__O__scm_StringBuilder(x);
        first$2.elem$1 = false;
        return undefined
      } else {
        b$2.append__T__scm_StringBuilder(sep$1);
        return b$2.append__O__scm_StringBuilder(x)
      }
    })
  })(first, b, sep)));
  b.append__T__scm_StringBuilder(end);
  return b
});
ScalaJS.i.sc_TraversableOnce$class__$init$__sc_TraversableOnce__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_BitOperations$Int$class__$init$__scg_BitOperations$Int__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_GenericSetTemplate$class__empty__scg_GenericSetTemplate__sc_GenSet = (function($$this) {
  return ScalaJS.as.sc_GenSet($$this.companion__scg_GenericCompanion().empty__sc_GenTraversable())
});
ScalaJS.i.scg_GenericSetTemplate$class__$init$__scg_GenericSetTemplate__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_GenericTraversableTemplate$class__newBuilder__scg_GenericTraversableTemplate__scm_Builder = (function($$this) {
  return $$this.companion__scg_GenericCompanion().newBuilder__scm_Builder()
});
ScalaJS.i.scg_GenericTraversableTemplate$class__genericBuilder__scg_GenericTraversableTemplate__scm_Builder = (function($$this) {
  return $$this.companion__scg_GenericCompanion().newBuilder__scm_Builder()
});
ScalaJS.i.scg_GenericTraversableTemplate$class__$init$__scg_GenericTraversableTemplate__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable = (function($$this, xs) {
  xs.seq__sc_TraversableOnce().foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer) {
    return (function(elem$2) {
      var elem = ScalaJS.as.O(elem$2);
      return arg$outer.$$plus$eq__O__scg_Growable(elem)
    })
  })($$this)));
  return $$this
});
ScalaJS.i.scg_Growable$class__$init$__scg_Growable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_IterableForwarder$class__sameElements__scg_IterableForwarder__sc_GenIterable__Z = (function($$this, that) {
  return $$this.underlying__sc_Iterable().sameElements__sc_GenIterable__Z(that)
});
ScalaJS.i.scg_IterableForwarder$class__$init$__scg_IterableForwarder__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_SeqForwarder$class__apply__scg_SeqForwarder__I__O = (function($$this, idx) {
  return $$this.underlying__sc_Seq().apply__I__O(idx)
});
ScalaJS.i.scg_SeqForwarder$class__lengthCompare__scg_SeqForwarder__I__I = (function($$this, len) {
  return $$this.underlying__sc_Seq().lengthCompare__I__I(len)
});
ScalaJS.i.scg_SeqForwarder$class__isDefinedAt__scg_SeqForwarder__I__Z = (function($$this, x) {
  return $$this.underlying__sc_Seq().isDefinedAt__I__Z(x)
});
ScalaJS.i.scg_SeqForwarder$class__segmentLength__scg_SeqForwarder__F1__I__I = (function($$this, p, from) {
  return $$this.underlying__sc_Seq().segmentLength__F1__I__I(p, from)
});
ScalaJS.i.scg_SeqForwarder$class__$init$__scg_SeqForwarder__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_Shrinkable$class__$init$__scg_Shrinkable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_Subtractable$class__$init$__scg_Subtractable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scg_TraversableForwarder$class__foreach__scg_TraversableForwarder__F1__V = (function($$this, f) {
  $$this.underlying__sc_Traversable().foreach__F1__V(f)
});
ScalaJS.i.scg_TraversableForwarder$class__isEmpty__scg_TraversableForwarder__Z = (function($$this) {
  return $$this.underlying__sc_Traversable().isEmpty__Z()
});
ScalaJS.i.scg_TraversableForwarder$class__find__scg_TraversableForwarder__F1__s_Option = (function($$this, p) {
  return $$this.underlying__sc_Traversable().find__F1__s_Option(p)
});
ScalaJS.i.scg_TraversableForwarder$class__foldLeft__scg_TraversableForwarder__O__F2__O = (function($$this, z, op) {
  return $$this.underlying__sc_Traversable().foldLeft__O__F2__O(z, op)
});
ScalaJS.i.scg_TraversableForwarder$class__$div$colon__scg_TraversableForwarder__O__F2__O = (function($$this, z, op) {
  return $$this.underlying__sc_Traversable().$$div$colon__O__F2__O(z, op)
});
ScalaJS.i.scg_TraversableForwarder$class__copyToArray__scg_TraversableForwarder__O__I__I__V = (function($$this, xs, start, len) {
  $$this.underlying__sc_Traversable().copyToArray__O__I__I__V(xs, start, len)
});
ScalaJS.i.scg_TraversableForwarder$class__copyToArray__scg_TraversableForwarder__O__I__V = (function($$this, xs, start) {
  $$this.underlying__sc_Traversable().copyToArray__O__I__V(xs, start)
});
ScalaJS.i.scg_TraversableForwarder$class__toArray__scg_TraversableForwarder__s_reflect_ClassTag__O = (function($$this, evidence$1) {
  return $$this.underlying__sc_Traversable().toArray__s_reflect_ClassTag__O(evidence$1)
});
ScalaJS.i.scg_TraversableForwarder$class__toBuffer__scg_TraversableForwarder__scm_Buffer = (function($$this) {
  return $$this.underlying__sc_Traversable().toBuffer__scm_Buffer()
});
ScalaJS.i.scg_TraversableForwarder$class__toStream__scg_TraversableForwarder__sci_Stream = (function($$this) {
  return $$this.underlying__sc_Traversable().toStream__sci_Stream()
});
ScalaJS.i.scg_TraversableForwarder$class__toMap__scg_TraversableForwarder__s_Predef$$less$colon$less__sci_Map = (function($$this, ev) {
  return $$this.underlying__sc_Traversable().toMap__s_Predef$$less$colon$less__sci_Map(ev)
});
ScalaJS.i.scg_TraversableForwarder$class__mkString__scg_TraversableForwarder__T__T__T__T = (function($$this, start, sep, end) {
  return $$this.underlying__sc_Traversable().mkString__T__T__T__T(start, sep, end)
});
ScalaJS.i.scg_TraversableForwarder$class__mkString__scg_TraversableForwarder__T__T = (function($$this, sep) {
  return $$this.underlying__sc_Traversable().mkString__T__T(sep)
});
ScalaJS.i.scg_TraversableForwarder$class__addString__scg_TraversableForwarder__scm_StringBuilder__T__T__T__scm_StringBuilder = (function($$this, b, start, sep, end) {
  return $$this.underlying__sc_Traversable().addString__scm_StringBuilder__T__T__T__scm_StringBuilder(b, start, sep, end)
});
ScalaJS.i.scg_TraversableForwarder$class__$init$__scg_TraversableForwarder__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_IndexedSeq$class__companion__sci_IndexedSeq__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.sci_IndexedSeq()
});
ScalaJS.i.sci_IndexedSeq$class__seq__sci_IndexedSeq__sci_IndexedSeq = (function($$this) {
  return $$this
});
ScalaJS.i.sci_IndexedSeq$class__$init$__sci_IndexedSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_Iterable$class__companion__sci_Iterable__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.sci_Iterable()
});
ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_LinearSeq$class__seq__sci_LinearSeq__sci_LinearSeq = (function($$this) {
  return $$this
});
ScalaJS.i.sci_LinearSeq$class__$init$__sci_LinearSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_Map$class__empty__sci_Map__sci_Map = (function($$this) {
  return ScalaJS.m.sci_Map().empty__sci_Map()
});
ScalaJS.i.sci_Map$class__toMap__sci_Map__s_Predef$$less$colon$less__sci_Map = (function($$this, ev) {
  return $$this
});
ScalaJS.i.sci_Map$class__seq__sci_Map__sci_Map = (function($$this) {
  return $$this
});
ScalaJS.i.sci_Map$class__$init$__sci_Map__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_MapLike$class__$init$__sci_MapLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.sci_Set()
});
ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set = (function($$this) {
  return $$this
});
ScalaJS.i.sci_Set$class__$init$__sci_Set__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_StringLike$class__apply__sci_StringLike__I__C = (function($$this, n) {
  return ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C($$this.toString__T(), n)
});
ScalaJS.i.sci_StringLike$class__scala$collection$immutable$StringLike$$isLineBreak__sci_StringLike__C__Z = (function($$this, c) {
  return ((c === ScalaJS.m.sci_StringLike().scala$collection$immutable$StringLike$$LF__C()) || (c === ScalaJS.m.sci_StringLike().scala$collection$immutable$StringLike$$FF__C()))
});
ScalaJS.i.sci_StringLike$class__linesWithSeparators__sci_StringLike__sc_Iterator = (function($$this) {
  return new ScalaJS.c.sci_StringLike$$anon$1().init___sci_StringLike($$this)
});
ScalaJS.i.sci_StringLike$class__stripMargin__sci_StringLike__C__T = (function($$this, marginChar) {
  var buf = new ScalaJS.c.scm_StringBuilder().init___();
  $$this.linesWithSeparators__sc_Iterator().foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(buf$2, marginChar$1) {
    return (function(line$2) {
      var line = ScalaJS.as.T(line$2);
      var len = ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(line);
      var index = 0;
      while (((index < len) && (ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(line, index) <= 32))) {
        index = ((index + 1) | 0)
      };
      if (((index < len) && (ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(line, index) === marginChar$1))) {
        var jsx$1 = ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T(line, ((index + 1) | 0))
      } else {
        var jsx$1 = line
      };
      return buf$2.append__T__scm_StringBuilder(jsx$1)
    })
  })(buf, marginChar)));
  return buf.toString__T()
});
ScalaJS.i.sci_StringLike$class__stripMargin__sci_StringLike__T = (function($$this) {
  return $$this.stripMargin__C__T(124)
});
ScalaJS.i.sci_StringLike$class__toArray__sci_StringLike__s_reflect_ClassTag__O = (function($$this, evidence$1) {
  return ScalaJS.i.sjsr_RuntimeString$class__toCharArray__sjsr_RuntimeString__AC($$this.toString__T())
});
ScalaJS.i.sci_StringLike$class__scala$collection$immutable$StringLike$$unwrapArg__sci_StringLike__O__O = (function($$this, arg) {
  var x1 = arg;
  if (ScalaJS.is.s_math_ScalaNumber(x1)) {
    var x2 = ScalaJS.as.s_math_ScalaNumber(x1);
    return x2.underlying__O()
  };
  return x1
});
ScalaJS.i.sci_StringLike$class__format__sci_StringLike__sc_Seq__T = (function($$this, args) {
  return ScalaJS.m.sjsr_RuntimeString().format__T__AO__T($$this.toString__T(), ScalaJS.asArrayOf.O(ScalaJS.as.sc_TraversableOnce(args.map__F1__scg_CanBuildFrom__O(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer) {
    return (function(arg$2) {
      var arg = ScalaJS.as.O(arg$2);
      return ScalaJS.i.sci_StringLike$class__scala$collection$immutable$StringLike$$unwrapArg__sci_StringLike__O__O(arg$outer, arg)
    })
  })($$this)), ScalaJS.m.sc_Seq().canBuildFrom__scg_CanBuildFrom())).toArray__s_reflect_ClassTag__O(ScalaJS.m.s_reflect_ClassTag().AnyRef__s_reflect_ClassTag()), 1))
});
ScalaJS.i.sci_StringLike$class__$init$__sci_StringLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sci_VectorPointer$class__initFrom__sci_VectorPointer__sci_VectorPointer__V = (function($$this, that) {
  $$this.initFrom__sci_VectorPointer__I__V(that, that.depth__I())
});
ScalaJS.i.sci_VectorPointer$class__initFrom__sci_VectorPointer__sci_VectorPointer__I__V = (function($$this, that, depth) {
  $$this.depth$und$eq__I__V(depth);
  var x1 = ((depth - 1) | 0);
  switch (x1) {
    case -1:
      break;
    case 0:
      {
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    case 1:
      {
        $$this.display1$und$eq__AO__V(that.display1__AO());
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    case 2:
      {
        $$this.display2$und$eq__AO__V(that.display2__AO());
        $$this.display1$und$eq__AO__V(that.display1__AO());
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    case 3:
      {
        $$this.display3$und$eq__AO__V(that.display3__AO());
        $$this.display2$und$eq__AO__V(that.display2__AO());
        $$this.display1$und$eq__AO__V(that.display1__AO());
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    case 4:
      {
        $$this.display4$und$eq__AO__V(that.display4__AO());
        $$this.display3$und$eq__AO__V(that.display3__AO());
        $$this.display2$und$eq__AO__V(that.display2__AO());
        $$this.display1$und$eq__AO__V(that.display1__AO());
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    case 5:
      {
        $$this.display5$und$eq__AO__V(that.display5__AO());
        $$this.display4$und$eq__AO__V(that.display4__AO());
        $$this.display3$und$eq__AO__V(that.display3__AO());
        $$this.display2$und$eq__AO__V(that.display2__AO());
        $$this.display1$und$eq__AO__V(that.display1__AO());
        $$this.display0$und$eq__AO__V(that.display0__AO());
        break
      };
    default:
      throw new ScalaJS.c.s_MatchError().init___O(x1);
  }
});
ScalaJS.i.sci_VectorPointer$class__getElem__sci_VectorPointer__I__I__O = (function($$this, index, xor) {
  if ((xor < 32)) {
    return $$this.display0__AO().u[(index & 31)]
  } else {
    if ((xor < 1024)) {
      return ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1).u[(index & 31)]
    } else {
      if ((xor < 32768)) {
        return ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1).u[((index >> 5) & 31)], 1).u[(index & 31)]
      } else {
        if ((xor < 1048576)) {
          return ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O($$this.display3__AO().u[((index >> 15) & 31)], 1).u[((index >> 10) & 31)], 1).u[((index >> 5) & 31)], 1).u[(index & 31)]
        } else {
          if ((xor < 33554432)) {
            return ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O($$this.display4__AO().u[((index >> 20) & 31)], 1).u[((index >> 15) & 31)], 1).u[((index >> 10) & 31)], 1).u[((index >> 5) & 31)], 1).u[(index & 31)]
          } else {
            if ((xor < 1073741824)) {
              return ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O(ScalaJS.asArrayOf.O($$this.display5__AO().u[((index >> 25) & 31)], 1).u[((index >> 20) & 31)], 1).u[((index >> 15) & 31)], 1).u[((index >> 10) & 31)], 1).u[((index >> 5) & 31)], 1).u[(index & 31)]
            } else {
              throw new ScalaJS.c.jl_IllegalArgumentException().init___()
            }
          }
        }
      }
    }
  }
});
ScalaJS.i.sci_VectorPointer$class__gotoPos__sci_VectorPointer__I__I__V = (function($$this, index, xor) {
  if ((xor < 32)) {
    /*<skip>*/
  } else {
    if ((xor < 1024)) {
      $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
    } else {
      if ((xor < 32768)) {
        $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1));
        $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
      } else {
        if ((xor < 1048576)) {
          $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[((index >> 15) & 31)], 1));
          $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1));
          $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
        } else {
          if ((xor < 33554432)) {
            $$this.display3$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display4__AO().u[((index >> 20) & 31)], 1));
            $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[((index >> 15) & 31)], 1));
            $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1));
            $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
          } else {
            if ((xor < 1073741824)) {
              $$this.display4$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display5__AO().u[((index >> 25) & 31)], 1));
              $$this.display3$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display4__AO().u[((index >> 20) & 31)], 1));
              $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[((index >> 15) & 31)], 1));
              $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1));
              $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
            } else {
              throw new ScalaJS.c.jl_IllegalArgumentException().init___()
            }
          }
        }
      }
    }
  }
});
ScalaJS.i.sci_VectorPointer$class__gotoNextBlockStart__sci_VectorPointer__I__I__V = (function($$this, index, xor) {
  if ((xor < 1024)) {
    $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[((index >> 5) & 31)], 1))
  } else {
    if ((xor < 32768)) {
      $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[((index >> 10) & 31)], 1));
      $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[0], 1))
    } else {
      if ((xor < 1048576)) {
        $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[((index >> 15) & 31)], 1));
        $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[0], 1));
        $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[0], 1))
      } else {
        if ((xor < 33554432)) {
          $$this.display3$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display4__AO().u[((index >> 20) & 31)], 1));
          $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[0], 1));
          $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[0], 1));
          $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[0], 1))
        } else {
          if ((xor < 1073741824)) {
            $$this.display4$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display5__AO().u[((index >> 25) & 31)], 1));
            $$this.display3$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display4__AO().u[0], 1));
            $$this.display2$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display3__AO().u[0], 1));
            $$this.display1$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display2__AO().u[0], 1));
            $$this.display0$und$eq__AO__V(ScalaJS.asArrayOf.O($$this.display1__AO().u[0], 1))
          } else {
            throw new ScalaJS.c.jl_IllegalArgumentException().init___()
          }
        }
      }
    }
  }
});
ScalaJS.i.sci_VectorPointer$class__gotoNextBlockStartWritable__sci_VectorPointer__I__I__V = (function($$this, index, xor) {
  if ((xor < 1024)) {
    if (($$this.depth__I() === 1)) {
      $$this.display1$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
      $$this.display1__AO().u[0] = $$this.display0__AO();
      $$this.depth$und$eq__I__V((($$this.depth__I() + 1) | 0))
    };
    $$this.display0$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
    $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO()
  } else {
    if ((xor < 32768)) {
      if (($$this.depth__I() === 2)) {
        $$this.display2$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
        $$this.display2__AO().u[0] = $$this.display1__AO();
        $$this.depth$und$eq__I__V((($$this.depth__I() + 1) | 0))
      };
      $$this.display0$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
      $$this.display1$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
      $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
      $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO()
    } else {
      if ((xor < 1048576)) {
        if (($$this.depth__I() === 3)) {
          $$this.display3$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
          $$this.display3__AO().u[0] = $$this.display2__AO();
          $$this.depth$und$eq__I__V((($$this.depth__I() + 1) | 0))
        };
        $$this.display0$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
        $$this.display1$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
        $$this.display2$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
        $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO()
      } else {
        if ((xor < 33554432)) {
          if (($$this.depth__I() === 4)) {
            $$this.display4$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display4__AO().u[0] = $$this.display3__AO();
            $$this.depth$und$eq__I__V((($$this.depth__I() + 1) | 0))
          };
          $$this.display0$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
          $$this.display1$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
          $$this.display2$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
          $$this.display3$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
          $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
          $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
          $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO();
          $$this.display4__AO().u[((index >> 20) & 31)] = $$this.display3__AO()
        } else {
          if ((xor < 1073741824)) {
            if (($$this.depth__I() === 5)) {
              $$this.display5$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
              $$this.display5__AO().u[0] = $$this.display4__AO();
              $$this.depth$und$eq__I__V((($$this.depth__I() + 1) | 0))
            };
            $$this.display0$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display1$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display2$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display3$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display4$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [32]));
            $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
            $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
            $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO();
            $$this.display4__AO().u[((index >> 20) & 31)] = $$this.display3__AO();
            $$this.display5__AO().u[((index >> 25) & 31)] = $$this.display4__AO()
          } else {
            throw new ScalaJS.c.jl_IllegalArgumentException().init___()
          }
        }
      }
    }
  }
});
ScalaJS.i.sci_VectorPointer$class__copyOf__sci_VectorPointer__AO__AO = (function($$this, a) {
  if ((a === null)) {
    ScalaJS.m.s_Predef().println__O__V("NULL")
  };
  var b = ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [a.u["length"]]);
  ScalaJS.m.s_compat_Platform().arraycopy__O__I__O__I__I__V(a, 0, b, 0, a.u["length"]);
  return b
});
ScalaJS.i.sci_VectorPointer$class__stabilize__sci_VectorPointer__I__V = (function($$this, index) {
  var x1 = (($$this.depth__I() - 1) | 0);
  switch (x1) {
    case 5:
      {
        $$this.display5$und$eq__AO__V($$this.copyOf__AO__AO($$this.display5__AO()));
        $$this.display4$und$eq__AO__V($$this.copyOf__AO__AO($$this.display4__AO()));
        $$this.display3$und$eq__AO__V($$this.copyOf__AO__AO($$this.display3__AO()));
        $$this.display2$und$eq__AO__V($$this.copyOf__AO__AO($$this.display2__AO()));
        $$this.display1$und$eq__AO__V($$this.copyOf__AO__AO($$this.display1__AO()));
        $$this.display5__AO().u[((index >> 25) & 31)] = $$this.display4__AO();
        $$this.display4__AO().u[((index >> 20) & 31)] = $$this.display3__AO();
        $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO();
        $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        break
      };
    case 4:
      {
        $$this.display4$und$eq__AO__V($$this.copyOf__AO__AO($$this.display4__AO()));
        $$this.display3$und$eq__AO__V($$this.copyOf__AO__AO($$this.display3__AO()));
        $$this.display2$und$eq__AO__V($$this.copyOf__AO__AO($$this.display2__AO()));
        $$this.display1$und$eq__AO__V($$this.copyOf__AO__AO($$this.display1__AO()));
        $$this.display4__AO().u[((index >> 20) & 31)] = $$this.display3__AO();
        $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO();
        $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        break
      };
    case 3:
      {
        $$this.display3$und$eq__AO__V($$this.copyOf__AO__AO($$this.display3__AO()));
        $$this.display2$und$eq__AO__V($$this.copyOf__AO__AO($$this.display2__AO()));
        $$this.display1$und$eq__AO__V($$this.copyOf__AO__AO($$this.display1__AO()));
        $$this.display3__AO().u[((index >> 15) & 31)] = $$this.display2__AO();
        $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        break
      };
    case 2:
      {
        $$this.display2$und$eq__AO__V($$this.copyOf__AO__AO($$this.display2__AO()));
        $$this.display1$und$eq__AO__V($$this.copyOf__AO__AO($$this.display1__AO()));
        $$this.display2__AO().u[((index >> 10) & 31)] = $$this.display1__AO();
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        break
      };
    case 1:
      {
        $$this.display1$und$eq__AO__V($$this.copyOf__AO__AO($$this.display1__AO()));
        $$this.display1__AO().u[((index >> 5) & 31)] = $$this.display0__AO();
        break
      };
    case 0:
      break;
    default:
      throw new ScalaJS.c.s_MatchError().init___O(x1);
  }
});
ScalaJS.i.sci_VectorPointer$class__$init$__sci_VectorPointer__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_ArrayLike$class__$init$__scm_ArrayLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_ArrayOps$class__elementClass__scm_ArrayOps__jl_Class = (function($$this) {
  return ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(ScalaJS.objectGetClass($$this.repr__O()))
});
ScalaJS.i.scm_ArrayOps$class__copyToArray__scm_ArrayOps__O__I__I__V = (function($$this, xs, start, len) {
  var l = ScalaJS.m.s_math_package().min__I__I__I(len, ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I($$this.repr__O()));
  if ((((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0) < l)) {
    l = ScalaJS.m.sr_RichInt().max$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0)), 0)
  };
  ScalaJS.m.s_Array().copy__O__I__O__I__I__V($$this.repr__O(), 0, xs, start, l)
});
ScalaJS.i.scm_ArrayOps$class__toArray__scm_ArrayOps__s_reflect_ClassTag__O = (function($$this, evidence$1) {
  var thatElementClass = ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(ScalaJS.m.s_Predef().implicitly__O__O(evidence$1));
  if ((ScalaJS.i.scm_ArrayOps$class__elementClass__scm_ArrayOps__jl_Class($$this) === thatElementClass)) {
    return $$this.repr__O()
  } else {
    return $$this.scala$collection$mutable$ArrayOps$$super$toArray__s_reflect_ClassTag__O(evidence$1)
  }
});
ScalaJS.i.scm_ArrayOps$class__seq__scm_ArrayOps__scm_IndexedSeq = (function($$this) {
  return $$this.thisCollection__scm_IndexedSeq()
});
ScalaJS.i.scm_ArrayOps$class__$init$__scm_ArrayOps__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Buffer$class__$init$__scm_Buffer__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_BufferLike$class__$init$__scm_Buffer__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__I__V = (function($$this, size) {
  /*<skip>*/
});
ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V = (function($$this, coll) {
  if (ScalaJS.is.sc_IndexedSeqLike(coll)) {
    $$this.sizeHint__I__V(coll.size__I())
  }
});
ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V = (function($$this, coll, delta) {
  if (ScalaJS.is.sc_IndexedSeqLike(coll)) {
    $$this.sizeHint__I__V(((coll.size__I() + delta) | 0))
  }
});
ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V = (function($$this, size, boundingColl) {
  if (ScalaJS.is.sc_IndexedSeqLike(boundingColl)) {
    $$this.sizeHint__I__V(ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(size), boundingColl.size__I()))
  }
});
ScalaJS.i.scm_Builder$class__mapResult__scm_Builder__F1__scm_Builder = (function($$this, f) {
  return new ScalaJS.c.scm_Builder$$anon$1().init___scm_Builder__F1($$this, f)
});
ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Cloneable$class__$init$__scm_Cloneable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_FlatHashTable$HashUtils$class__sizeMapBucketBitSize__scm_FlatHashTable$HashUtils__I = (function($$this) {
  return 5
});
ScalaJS.i.scm_FlatHashTable$HashUtils$class__sizeMapBucketSize__scm_FlatHashTable$HashUtils__I = (function($$this) {
  return (1 << $$this.sizeMapBucketBitSize__I())
});
ScalaJS.i.scm_FlatHashTable$HashUtils$class__elemHashCode__scm_FlatHashTable$HashUtils__O__I = (function($$this, elem) {
  if ((elem === null)) {
    throw new ScalaJS.c.jl_IllegalArgumentException().init___T("Flat hash tables cannot contain null elements.")
  } else {
    return ScalaJS.objectHashCode(elem)
  }
});
ScalaJS.i.scm_FlatHashTable$HashUtils$class__improve__scm_FlatHashTable$HashUtils__I__I__I = (function($$this, hcode, seed) {
  var improved = ScalaJS.m.s_util_hashing_package().byteswap32__I__I(hcode);
  var rotation = (seed % 32);
  var rotated = (((improved >>> rotation) | 0) | (improved << ((32 - rotation) | 0)));
  return rotated
});
ScalaJS.i.scm_FlatHashTable$HashUtils$class__$init$__scm_FlatHashTable$HashUtils__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_FlatHashTable$class__tableDebug__scm_FlatHashTable__Z = (function($$this) {
  return false
});
ScalaJS.i.scm_FlatHashTable$class__capacity__scm_FlatHashTable__I__I = (function($$this, expectedSize) {
  if ((expectedSize === 0)) {
    return 1
  } else {
    return ScalaJS.m.scm_HashTable().powerOfTwo__I__I(expectedSize)
  }
});
ScalaJS.i.scm_FlatHashTable$class__initialSize__scm_FlatHashTable__I = (function($$this) {
  return 32
});
ScalaJS.i.scm_FlatHashTable$class__initialCapacity__scm_FlatHashTable__I = (function($$this) {
  return $$this.capacity__I__I($$this.initialSize__I())
});
ScalaJS.i.scm_FlatHashTable$class__tableSizeSeed__scm_FlatHashTable__I = (function($$this) {
  return ScalaJS.m.jl_Integer().bitCount__I__I((($$this.table__AO().u["length"] - 1) | 0))
});
ScalaJS.i.scm_FlatHashTable$class__containsEntry__scm_FlatHashTable__O__Z = (function($$this, elem) {
  return (null !== ScalaJS.i.scm_FlatHashTable$class__findEntryImpl__scm_FlatHashTable__O__O($$this, elem))
});
ScalaJS.i.scm_FlatHashTable$class__findEntryImpl__scm_FlatHashTable__O__O = (function($$this, elem) {
  var h = $$this.index__I__I($$this.elemHashCode__O__I(elem));
  var entry = $$this.table__AO().u[h];
  while (((null !== entry) && (!ScalaJS.anyEqEq(entry, elem)))) {
    h = (((h + 1) | 0) % $$this.table__AO().u["length"]);
    entry = $$this.table__AO().u[h]
  };
  return entry
});
ScalaJS.i.scm_FlatHashTable$class__addEntry__scm_FlatHashTable__O__Z = (function($$this, elem) {
  var h = $$this.index__I__I($$this.elemHashCode__O__I(elem));
  var entry = $$this.table__AO().u[h];
  while ((null !== entry)) {
    if (ScalaJS.anyEqEq(entry, elem)) {
      return false
    };
    h = (((h + 1) | 0) % $$this.table__AO().u["length"]);
    entry = $$this.table__AO().u[h]
  };
  $$this.table__AO().u[h] = elem;
  $$this.tableSize$und$eq__I__V((($$this.tableSize__I() + 1) | 0));
  $$this.nnSizeMapAdd__I__V(h);
  if (($$this.tableSize__I() >= $$this.threshold__I())) {
    ScalaJS.i.scm_FlatHashTable$class__growTable__scm_FlatHashTable__V($$this)
  };
  return true
});
ScalaJS.i.scm_FlatHashTable$class__iterator__scm_FlatHashTable__sc_Iterator = (function($$this) {
  return new ScalaJS.c.scm_FlatHashTable$$anon$1().init___scm_FlatHashTable($$this)
});
ScalaJS.i.scm_FlatHashTable$class__growTable__scm_FlatHashTable__V = (function($$this) {
  var oldtable = $$this.table__AO();
  $$this.table$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [ScalaJS.imul($$this.table__AO().u["length"], 2)]));
  $$this.tableSize$und$eq__I__V(0);
  $$this.nnSizeMapReset__I__V($$this.table__AO().u["length"]);
  $$this.seedvalue$und$eq__I__V($$this.tableSizeSeed__I());
  $$this.threshold$und$eq__I__V(ScalaJS.m.scm_FlatHashTable().newThreshold__I__I__I($$this.$$undloadFactor__I(), $$this.table__AO().u["length"]));
  var i = 0;
  while ((i < oldtable.u["length"])) {
    var entry = oldtable.u[i];
    if ((null !== entry)) {
      $$this.addEntry__O__Z(entry)
    };
    i = ((i + 1) | 0)
  };
  if (ScalaJS.i.scm_FlatHashTable$class__tableDebug__scm_FlatHashTable__Z($$this)) {
    ScalaJS.i.scm_FlatHashTable$class__checkConsistent__scm_FlatHashTable__V($$this)
  }
});
ScalaJS.i.scm_FlatHashTable$class__checkConsistent__scm_FlatHashTable__V = (function($$this) {
  ScalaJS.m.sr_RichInt().until$extension0__I__I__sci_Range(ScalaJS.m.s_Predef().intWrapper__I__I(0), $$this.table__AO().u["length"]).foreach$mVc$sp__F1__V(new ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1().init___scm_FlatHashTable($$this))
});
ScalaJS.i.scm_FlatHashTable$class__nnSizeMapAdd__scm_FlatHashTable__I__V = (function($$this, h) {
  if (($$this.sizemap__AI() !== null)) {
    var p = (h >> $$this.sizeMapBucketBitSize__I());
    var ev$1 = $$this.sizemap__AI();
    ev$1.u[p] = ((ev$1.u[p] + 1) | 0)
  }
});
ScalaJS.i.scm_FlatHashTable$class__nnSizeMapReset__scm_FlatHashTable__I__V = (function($$this, tableLength) {
  if (($$this.sizemap__AI() !== null)) {
    var nsize = $$this.calcSizeMapSize__I__I(tableLength);
    if (($$this.sizemap__AI().u["length"] !== nsize)) {
      $$this.sizemap$und$eq__AI__V(ScalaJS.newArrayObject(ScalaJS.d.I.getArrayOf(), [nsize]))
    } else {
      ScalaJS.m.ju_Arrays().fill__AI__I__V($$this.sizemap__AI(), 0)
    }
  }
});
ScalaJS.i.scm_FlatHashTable$class__totalSizeMapBuckets__scm_FlatHashTable__I = (function($$this) {
  return (((((($$this.table__AO().u["length"] - 1) | 0) / $$this.sizeMapBucketSize__I()) | 0) + 1) | 0)
});
ScalaJS.i.scm_FlatHashTable$class__calcSizeMapSize__scm_FlatHashTable__I__I = (function($$this, tableLength) {
  return (((tableLength >> $$this.sizeMapBucketBitSize__I()) + 1) | 0)
});
ScalaJS.i.scm_FlatHashTable$class__sizeMapInit__scm_FlatHashTable__I__V = (function($$this, tableLength) {
  $$this.sizemap$und$eq__AI__V(ScalaJS.newArrayObject(ScalaJS.d.I.getArrayOf(), [$$this.calcSizeMapSize__I__I(tableLength)]))
});
ScalaJS.i.scm_FlatHashTable$class__sizeMapInitAndRebuild__scm_FlatHashTable__V = (function($$this) {
  $$this.sizeMapInit__I__V($$this.table__AO().u["length"]);
  var totalbuckets = $$this.totalSizeMapBuckets__I();
  var bucketidx = 0;
  var tableidx = 0;
  var tbl = $$this.table__AO();
  var tableuntil = ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I($$this.sizeMapBucketSize__I()), tbl.u["length"]);
  while ((bucketidx < totalbuckets)) {
    var currbucketsz = 0;
    while ((tableidx < tableuntil)) {
      if ((tbl.u[tableidx] !== null)) {
        currbucketsz = ((currbucketsz + 1) | 0)
      };
      tableidx = ((tableidx + 1) | 0)
    };
    $$this.sizemap__AI().u[bucketidx] = currbucketsz;
    tableuntil = ((tableuntil + $$this.sizeMapBucketSize__I()) | 0);
    bucketidx = ((bucketidx + 1) | 0)
  }
});
ScalaJS.i.scm_FlatHashTable$class__alwaysInitSizeMap__scm_FlatHashTable__Z = (function($$this) {
  return false
});
ScalaJS.i.scm_FlatHashTable$class__index__scm_FlatHashTable__I__I = (function($$this, hcode) {
  var improved = $$this.improve__I__I__I(hcode, $$this.seedvalue__I());
  var ones = (($$this.table__AO().u["length"] - 1) | 0);
  return (((improved >>> ((32 - ScalaJS.m.jl_Integer().bitCount__I__I(ones)) | 0)) | 0) & ones)
});
ScalaJS.i.scm_FlatHashTable$class__initWithContents__scm_FlatHashTable__scm_FlatHashTable$Contents__V = (function($$this, c) {
  if ((c !== null)) {
    $$this.$$undloadFactor$und$eq__I__V(c.loadFactor__I());
    $$this.table$und$eq__AO__V(c.table__AO());
    $$this.tableSize$und$eq__I__V(c.tableSize__I());
    $$this.threshold$und$eq__I__V(c.threshold__I());
    $$this.seedvalue$und$eq__I__V(c.seedvalue__I());
    $$this.sizemap$und$eq__AI__V(c.sizemap__AI())
  };
  if (($$this.alwaysInitSizeMap__Z() && ($$this.sizemap__AI() === null))) {
    $$this.sizeMapInitAndRebuild__V()
  }
});
ScalaJS.i.scm_FlatHashTable$class__$init$__scm_FlatHashTable__V = (function($$this) {
  $$this.$$undloadFactor$und$eq__I__V(ScalaJS.m.scm_FlatHashTable().defaultLoadFactor__I());
  $$this.table$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [ScalaJS.i.scm_FlatHashTable$class__initialCapacity__scm_FlatHashTable__I($$this)]));
  $$this.tableSize$und$eq__I__V(0);
  $$this.threshold$und$eq__I__V(ScalaJS.m.scm_FlatHashTable().newThreshold__I__I__I($$this.$$undloadFactor__I(), ScalaJS.i.scm_FlatHashTable$class__initialCapacity__scm_FlatHashTable__I($$this)));
  $$this.sizemap$und$eq__AI__V(null);
  $$this.seedvalue$und$eq__I__V($$this.tableSizeSeed__I())
});
ScalaJS.i.scm_HashEntry$class__$init$__scm_HashEntry__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_HashTable$HashUtils$class__sizeMapBucketBitSize__scm_HashTable$HashUtils__I = (function($$this) {
  return 5
});
ScalaJS.i.scm_HashTable$HashUtils$class__sizeMapBucketSize__scm_HashTable$HashUtils__I = (function($$this) {
  return (1 << $$this.sizeMapBucketBitSize__I())
});
ScalaJS.i.scm_HashTable$HashUtils$class__elemHashCode__scm_HashTable$HashUtils__O__I = (function($$this, key) {
  return ScalaJS.m.sr_ScalaRunTime().hash__O__I(key)
});
ScalaJS.i.scm_HashTable$HashUtils$class__improve__scm_HashTable$HashUtils__I__I__I = (function($$this, hcode, seed) {
  var i = ScalaJS.m.s_util_hashing_package().byteswap32__I__I(hcode);
  var rotation = (seed % 32);
  var rotated = (((i >>> rotation) | 0) | (i << ((32 - rotation) | 0)));
  return rotated
});
ScalaJS.i.scm_HashTable$HashUtils$class__$init$__scm_HashTable$HashUtils__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_HashTable$class__tableSizeSeed__scm_HashTable__I = (function($$this) {
  return ScalaJS.m.jl_Integer().bitCount__I__I((($$this.table__Ascm_HashEntry().u["length"] - 1) | 0))
});
ScalaJS.i.scm_HashTable$class__initialSize__scm_HashTable__I = (function($$this) {
  return 16
});
ScalaJS.i.scm_HashTable$class__initialThreshold__scm_HashTable__I__I = (function($$this, _loadFactor) {
  return ScalaJS.m.scm_HashTable().newThreshold__I__I__I(_loadFactor, ScalaJS.i.scm_HashTable$class__initialCapacity__scm_HashTable__I($$this))
});
ScalaJS.i.scm_HashTable$class__initialCapacity__scm_HashTable__I = (function($$this) {
  return ScalaJS.m.scm_HashTable().capacity__I__I($$this.initialSize__I())
});
ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$lastPopulatedIndex__scm_HashTable__I = (function($$this) {
  var idx = (($$this.table__Ascm_HashEntry().u["length"] - 1) | 0);
  while ((($$this.table__Ascm_HashEntry().u[idx] === null) && (idx > 0))) {
    idx = ((idx - 1) | 0)
  };
  return idx
});
ScalaJS.i.scm_HashTable$class__findEntry__scm_HashTable__O__scm_HashEntry = (function($$this, key) {
  return ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$findEntry0__scm_HashTable__O__I__scm_HashEntry($$this, key, $$this.index__I__I($$this.elemHashCode__O__I(key)))
});
ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$findEntry0__scm_HashTable__O__I__scm_HashEntry = (function($$this, key, h) {
  var e = $$this.table__Ascm_HashEntry().u[h];
  while (((e !== null) && (!$$this.elemEquals__O__O__Z(e.key__O(), key)))) {
    e = ScalaJS.as.scm_HashEntry(e.next__O())
  };
  return e
});
ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$addEntry0__scm_HashTable__scm_HashEntry__I__V = (function($$this, e, h) {
  e.next$und$eq__O__V($$this.table__Ascm_HashEntry().u[h]);
  $$this.table__Ascm_HashEntry().u[h] = e;
  $$this.tableSize$und$eq__I__V((($$this.tableSize__I() + 1) | 0));
  $$this.nnSizeMapAdd__I__V(h);
  if (($$this.tableSize__I() > $$this.threshold__I())) {
    ScalaJS.i.scm_HashTable$class__resize__scm_HashTable__I__V($$this, ScalaJS.imul(2, $$this.table__Ascm_HashEntry().u["length"]))
  }
});
ScalaJS.i.scm_HashTable$class__findOrAddEntry__scm_HashTable__O__O__scm_HashEntry = (function($$this, key, value) {
  var h = $$this.index__I__I($$this.elemHashCode__O__I(key));
  var e = ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$findEntry0__scm_HashTable__O__I__scm_HashEntry($$this, key, h);
  if ((e !== null)) {
    return e
  } else {
    ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$addEntry0__scm_HashTable__scm_HashEntry__I__V($$this, $$this.createNewEntry__O__O__scm_HashEntry(key, value), h);
    return null
  }
});
ScalaJS.i.scm_HashTable$class__entriesIterator__scm_HashTable__sc_Iterator = (function($$this) {
  return new ScalaJS.c.scm_HashTable$$anon$1().init___scm_HashTable($$this)
});
ScalaJS.i.scm_HashTable$class__foreachEntry__scm_HashTable__F1__V = (function($$this, f) {
  var iterTable = $$this.table__Ascm_HashEntry();
  var idx = ScalaJS.i.scm_HashTable$class__scala$collection$mutable$HashTable$$lastPopulatedIndex__scm_HashTable__I($$this);
  var es = iterTable.u[idx];
  while ((es !== null)) {
    f.apply__O__O(es);
    es = ScalaJS.as.scm_HashEntry(es.next__O());
    while (((es === null) && (idx > 0))) {
      idx = ((idx - 1) | 0);
      es = iterTable.u[idx]
    }
  }
});
ScalaJS.i.scm_HashTable$class__resize__scm_HashTable__I__V = (function($$this, newSize) {
  var oldTable = $$this.table__Ascm_HashEntry();
  $$this.table$und$eq__Ascm_HashEntry__V(ScalaJS.newArrayObject(ScalaJS.d.scm_HashEntry.getArrayOf(), [newSize]));
  $$this.nnSizeMapReset__I__V($$this.table__Ascm_HashEntry().u["length"]);
  var i = ((oldTable.u["length"] - 1) | 0);
  while ((i >= 0)) {
    var e = oldTable.u[i];
    while ((e !== null)) {
      var h = $$this.index__I__I($$this.elemHashCode__O__I(e.key__O()));
      var e1 = ScalaJS.as.scm_HashEntry(e.next__O());
      e.next$und$eq__O__V($$this.table__Ascm_HashEntry().u[h]);
      $$this.table__Ascm_HashEntry().u[h] = e;
      e = e1;
      $$this.nnSizeMapAdd__I__V(h)
    };
    i = ((i - 1) | 0)
  };
  $$this.threshold$und$eq__I__V(ScalaJS.m.scm_HashTable().newThreshold__I__I__I($$this.$$undloadFactor__I(), newSize))
});
ScalaJS.i.scm_HashTable$class__nnSizeMapAdd__scm_HashTable__I__V = (function($$this, h) {
  if (($$this.sizemap__AI() !== null)) {
    var ev$1 = $$this.sizemap__AI();
    var ev$2 = (h >> $$this.sizeMapBucketBitSize__I());
    ev$1.u[ev$2] = ((ev$1.u[ev$2] + 1) | 0)
  }
});
ScalaJS.i.scm_HashTable$class__nnSizeMapReset__scm_HashTable__I__V = (function($$this, tableLength) {
  if (($$this.sizemap__AI() !== null)) {
    var nsize = $$this.calcSizeMapSize__I__I(tableLength);
    if (($$this.sizemap__AI().u["length"] !== nsize)) {
      $$this.sizemap$und$eq__AI__V(ScalaJS.newArrayObject(ScalaJS.d.I.getArrayOf(), [nsize]))
    } else {
      ScalaJS.m.ju_Arrays().fill__AI__I__V($$this.sizemap__AI(), 0)
    }
  }
});
ScalaJS.i.scm_HashTable$class__totalSizeMapBuckets__scm_HashTable__I = (function($$this) {
  if (($$this.sizeMapBucketSize__I() < $$this.table__Ascm_HashEntry().u["length"])) {
    return 1
  } else {
    return (($$this.table__Ascm_HashEntry().u["length"] / $$this.sizeMapBucketSize__I()) | 0)
  }
});
ScalaJS.i.scm_HashTable$class__calcSizeMapSize__scm_HashTable__I__I = (function($$this, tableLength) {
  return (((tableLength >> $$this.sizeMapBucketBitSize__I()) + 1) | 0)
});
ScalaJS.i.scm_HashTable$class__sizeMapInit__scm_HashTable__I__V = (function($$this, tableLength) {
  $$this.sizemap$und$eq__AI__V(ScalaJS.newArrayObject(ScalaJS.d.I.getArrayOf(), [$$this.calcSizeMapSize__I__I(tableLength)]))
});
ScalaJS.i.scm_HashTable$class__sizeMapInitAndRebuild__scm_HashTable__V = (function($$this) {
  $$this.sizeMapInit__I__V($$this.table__Ascm_HashEntry().u["length"]);
  var tableidx = 0;
  var bucketidx = 0;
  var tbl = $$this.table__Ascm_HashEntry();
  var tableuntil = 0;
  if ((tbl.u["length"] < $$this.sizeMapBucketSize__I())) {
    tableuntil = tbl.u["length"]
  } else {
    tableuntil = $$this.sizeMapBucketSize__I()
  };
  var totalbuckets = $$this.totalSizeMapBuckets__I();
  while ((bucketidx < totalbuckets)) {
    var currbucketsize = 0;
    while ((tableidx < tableuntil)) {
      var e = tbl.u[tableidx];
      while ((e !== null)) {
        currbucketsize = ((currbucketsize + 1) | 0);
        e = ScalaJS.as.scm_HashEntry(e.next__O())
      };
      tableidx = ((tableidx + 1) | 0)
    };
    $$this.sizemap__AI().u[bucketidx] = currbucketsize;
    tableuntil = ((tableuntil + $$this.sizeMapBucketSize__I()) | 0);
    bucketidx = ((bucketidx + 1) | 0)
  }
});
ScalaJS.i.scm_HashTable$class__alwaysInitSizeMap__scm_HashTable__Z = (function($$this) {
  return false
});
ScalaJS.i.scm_HashTable$class__elemEquals__scm_HashTable__O__O__Z = (function($$this, key1, key2) {
  return ScalaJS.anyEqEq(key1, key2)
});
ScalaJS.i.scm_HashTable$class__index__scm_HashTable__I__I = (function($$this, hcode) {
  var ones = (($$this.table__Ascm_HashEntry().u["length"] - 1) | 0);
  var improved = $$this.improve__I__I__I(hcode, $$this.seedvalue__I());
  var shifted = ((improved >> ((32 - ScalaJS.m.jl_Integer().bitCount__I__I(ones)) | 0)) & ones);
  return shifted
});
ScalaJS.i.scm_HashTable$class__initWithContents__scm_HashTable__scm_HashTable$Contents__V = (function($$this, c) {
  if ((c !== null)) {
    $$this.$$undloadFactor$und$eq__I__V(c.loadFactor__I());
    $$this.table$und$eq__Ascm_HashEntry__V(c.table__Ascm_HashEntry());
    $$this.tableSize$und$eq__I__V(c.tableSize__I());
    $$this.threshold$und$eq__I__V(c.threshold__I());
    $$this.seedvalue$und$eq__I__V(c.seedvalue__I());
    $$this.sizemap$und$eq__AI__V(c.sizemap__AI())
  };
  if (($$this.alwaysInitSizeMap__Z() && ($$this.sizemap__AI() === null))) {
    $$this.sizeMapInitAndRebuild__V()
  }
});
ScalaJS.i.scm_HashTable$class__$init$__scm_HashTable__V = (function($$this) {
  $$this.$$undloadFactor$und$eq__I__V(ScalaJS.m.scm_HashTable().defaultLoadFactor__I());
  $$this.table$und$eq__Ascm_HashEntry__V(ScalaJS.newArrayObject(ScalaJS.d.scm_HashEntry.getArrayOf(), [ScalaJS.i.scm_HashTable$class__initialCapacity__scm_HashTable__I($$this)]));
  $$this.tableSize$und$eq__I__V(0);
  $$this.threshold$und$eq__I__V(ScalaJS.i.scm_HashTable$class__initialThreshold__scm_HashTable__I__I($$this, $$this.$$undloadFactor__I()));
  $$this.sizemap$und$eq__AI__V(null);
  $$this.seedvalue$und$eq__I__V($$this.tableSizeSeed__I())
});
ScalaJS.i.scm_IndexedSeq$class__companion__scm_IndexedSeq__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.scm_IndexedSeq()
});
ScalaJS.i.scm_IndexedSeq$class__seq__scm_IndexedSeq__scm_IndexedSeq = (function($$this) {
  return $$this
});
ScalaJS.i.scm_IndexedSeq$class__$init$__scm_IndexedSeq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_IndexedSeqLike$class__thisCollection__scm_IndexedSeqLike__scm_IndexedSeq = (function($$this) {
  return ScalaJS.as.scm_IndexedSeq($$this)
});
ScalaJS.i.scm_IndexedSeqLike$class__toCollection__scm_IndexedSeqLike__O__scm_IndexedSeq = (function($$this, repr) {
  return ScalaJS.as.scm_IndexedSeq(repr)
});
ScalaJS.i.scm_IndexedSeqLike$class__$init$__scm_IndexedSeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Iterable$class__companion__scm_Iterable__scg_GenericCompanion = (function($$this) {
  return ScalaJS.m.scm_Iterable()
});
ScalaJS.i.scm_Iterable$class__$init$__scm_Iterable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Map$class__seq__scm_Map__scm_Map = (function($$this) {
  return $$this
});
ScalaJS.i.scm_Map$class__$init$__scm_Map__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_MapLike$class__newBuilder__scm_MapLike__scm_Builder = (function($$this) {
  return ScalaJS.as.scm_Builder($$this.empty__sc_Map())
});
ScalaJS.i.scm_MapLike$class__$plus__scm_MapLike__T2__scm_Map = (function($$this, kv) {
  return ScalaJS.as.scm_Map($$this.clone__scm_Map().$$plus$eq__T2__scm_MapLike(kv))
});
ScalaJS.i.scm_MapLike$class__clone__scm_MapLike__scm_Map = (function($$this) {
  return ScalaJS.as.scm_Map(ScalaJS.as.scg_Growable($$this.empty__sc_Map()).$$plus$plus$eq__sc_TraversableOnce__scg_Growable(ScalaJS.as.sc_TraversableOnce($$this.repr__O())))
});
ScalaJS.i.scm_MapLike$class__result__scm_MapLike__scm_Map = (function($$this) {
  return ScalaJS.as.scm_Map($$this.repr__O())
});
ScalaJS.i.scm_MapLike$class__$init$__scm_MapLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_ResizableArray$class__length__scm_ResizableArray__I = (function($$this) {
  return $$this.size0__I()
});
ScalaJS.i.scm_ResizableArray$class__apply__scm_ResizableArray__I__O = (function($$this, idx) {
  if ((idx >= $$this.size0__I())) {
    throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(idx))
  };
  return $$this.array__AO().u[idx]
});
ScalaJS.i.scm_ResizableArray$class__foreach__scm_ResizableArray__F1__V = (function($$this, f) {
  var i = 0;
  var top = $$this.size__I();
  while ((i < top)) {
    f.apply__O__O($$this.array__AO().u[i]);
    i = ((i + 1) | 0)
  }
});
ScalaJS.i.scm_ResizableArray$class__copyToArray__scm_ResizableArray__O__I__I__V = (function($$this, xs, start, len) {
  var len1 = ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(ScalaJS.m.sr_RichInt().min$extension__I__I__I(ScalaJS.m.s_Predef().intWrapper__I__I(len), ((ScalaJS.m.sr_ScalaRunTime().array$undlength__O__I(xs) - start) | 0))), $$this.length__I());
  ScalaJS.m.s_Array().copy__O__I__O__I__I__V($$this.array__AO(), 0, xs, start, len1)
});
ScalaJS.i.scm_ResizableArray$class__ensureSize__scm_ResizableArray__I__V = (function($$this, n) {
  if ((n > $$this.array__AO().u["length"])) {
    var newsize = ScalaJS.imul($$this.array__AO().u["length"], 2);
    while ((n > newsize)) {
      newsize = ScalaJS.imul(newsize, 2)
    };
    var newar = ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [newsize]);
    ScalaJS.m.s_compat_Platform().arraycopy__O__I__O__I__I__V($$this.array__AO(), 0, newar, 0, $$this.size0__I());
    $$this.array$und$eq__AO__V(newar)
  }
});
ScalaJS.i.scm_ResizableArray$class__$init$__scm_ResizableArray__V = (function($$this) {
  $$this.array$und$eq__AO__V(ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [ScalaJS.m.s_math_package().max__I__I__I($$this.initialSize__I(), 1)]));
  $$this.size0$und$eq__I__V(0)
});
ScalaJS.i.scm_Seq$class__seq__scm_Seq__scm_Seq = (function($$this) {
  return $$this
});
ScalaJS.i.scm_Seq$class__$init$__scm_Seq__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_SeqLike$class__$init$__scm_SeqLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Set$class__seq__scm_Set__scm_Set = (function($$this) {
  return $$this
});
ScalaJS.i.scm_Set$class__$init$__scm_Set__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_SetLike$class__newBuilder__scm_SetLike__scm_Builder = (function($$this) {
  return ScalaJS.as.scm_Builder($$this.empty__sc_Set())
});
ScalaJS.i.scm_SetLike$class__result__scm_SetLike__scm_Set = (function($$this) {
  return ScalaJS.as.scm_Set($$this.repr__O())
});
ScalaJS.i.scm_SetLike$class__$plus__scm_SetLike__O__scm_Set = (function($$this, elem) {
  return ScalaJS.as.scm_Set($$this.clone__scm_Set().$$plus$eq__O__scm_SetLike(elem))
});
ScalaJS.i.scm_SetLike$class__$init$__scm_SetLike__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.scm_Traversable$class__$init$__scm_Traversable__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sjs_js_JSApp$class__$init$__sjs_js_JSApp__V = (function($$this) {
  /*<skip>*/
});
ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C = (function($$this, index) {
  return (ScalaJS.uD($$this["charCodeAt"](index)) & 65535)
});
ScalaJS.i.sjsr_RuntimeString$class__contains__sjsr_RuntimeString__jl_CharSequence__Z = (function($$this, s) {
  return ((ScalaJS.uD($$this["indexOf"](ScalaJS.objectToString(s))) | 0) !== -1)
});
ScalaJS.i.sjsr_RuntimeString$class__endsWith__sjsr_RuntimeString__T__Z = (function($$this, suffix) {
  var thisjs = $$this;
  return (suffix === thisjs["substring"]((thisjs["length"] - ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(suffix))))
});
ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__I__I = (function($$this, ch) {
  var search = ScalaJS.as.T(ScalaJS.applyMethodWithVarargs(ScalaJS.g["String"], "fromCharCode", ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [ch])))));
  return (ScalaJS.uD($$this["indexOf"](search)) | 0)
});
ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__T__I = (function($$this, str) {
  return (ScalaJS.uD($$this["indexOf"](str)) | 0)
});
ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__T__I__I = (function($$this, str, fromIndex) {
  return (ScalaJS.uD($$this["indexOf"](str, fromIndex)) | 0)
});
ScalaJS.i.sjsr_RuntimeString$class__isEmpty__sjsr_RuntimeString__Z = (function($$this) {
  return ScalaJS.uZ((!$$this["length"]))
});
ScalaJS.i.sjsr_RuntimeString$class__lastIndexOf__sjsr_RuntimeString__I__I = (function($$this, ch) {
  var search = ScalaJS.as.T(ScalaJS.applyMethodWithVarargs(ScalaJS.g["String"], "fromCharCode", ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [ch])))));
  return (ScalaJS.uD($$this["lastIndexOf"](search)) | 0)
});
ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I = (function($$this) {
  return (ScalaJS.uD($$this["length"]) | 0)
});
ScalaJS.i.sjsr_RuntimeString$class__replace__sjsr_RuntimeString__jl_CharSequence__jl_CharSequence__T = (function($$this, target, replacement) {
  return ScalaJS.as.T($$this["split"](ScalaJS.objectToString(target))["join"](ScalaJS.objectToString(replacement)))
});
ScalaJS.i.sjsr_RuntimeString$class__startsWith__sjsr_RuntimeString__T__Z = (function($$this, prefix) {
  return ScalaJS.i.sjsr_RuntimeString$class__startsWith__sjsr_RuntimeString__T__I__Z(ScalaJS.as.T($$this), prefix, 0)
});
ScalaJS.i.sjsr_RuntimeString$class__startsWith__sjsr_RuntimeString__T__I__Z = (function($$this, prefix, toffset) {
  return (prefix === $$this["substring"](toffset, ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(prefix)))
});
ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T = (function($$this, beginIndex) {
  return ScalaJS.as.T($$this["substring"](beginIndex))
});
ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__I__T = (function($$this, beginIndex, endIndex) {
  return ScalaJS.as.T($$this["substring"](beginIndex, endIndex))
});
ScalaJS.i.sjsr_RuntimeString$class__toCharArray__sjsr_RuntimeString__AC = (function($$this) {
  var length = (ScalaJS.uD($$this["length"]) | 0);
  var result = ScalaJS.newArrayObject(ScalaJS.d.C.getArrayOf(), [length]);
  var i = 0;
  while ((i < length)) {
    result.u[i] = ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(ScalaJS.as.T($$this), i);
    i = ((i + 1) | 0)
  };
  return result
});
ScalaJS.i.sjsr_RuntimeString$class__toLowerCase__sjsr_RuntimeString__T = (function($$this) {
  return ScalaJS.as.T($$this["toLowerCase"]())
});
ScalaJS.i.sjsr_RuntimeString$class__toUpperCase__sjsr_RuntimeString__T = (function($$this) {
  return ScalaJS.as.T($$this["toUpperCase"]())
});
ScalaJS.is.F2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.F2)))
});
ScalaJS.as.F2 = (function(obj) {
  if ((ScalaJS.is.F2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Function2")
  }
});
ScalaJS.isArrayOf.F2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.F2)))
});
ScalaJS.asArrayOf.F2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.F2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Function2;", depth)
  }
});
ScalaJS.d.F2 = new ScalaJS.ClassTypeData({
  F2: 0
}, true, "scala.Function2", undefined, {
  F2: 1,
  O: 1
});
ScalaJS.is.Ljava_io_Closeable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Ljava_io_Closeable)))
});
ScalaJS.as.Ljava_io_Closeable = (function(obj) {
  if ((ScalaJS.is.Ljava_io_Closeable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.io.Closeable")
  }
});
ScalaJS.isArrayOf.Ljava_io_Closeable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Ljava_io_Closeable)))
});
ScalaJS.asArrayOf.Ljava_io_Closeable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Ljava_io_Closeable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.io.Closeable;", depth)
  }
});
ScalaJS.d.Ljava_io_Closeable = new ScalaJS.ClassTypeData({
  Ljava_io_Closeable: 0
}, true, "java.io.Closeable", undefined, {
  Ljava_io_Closeable: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.Ljava_io_OutputStream = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Ljava_io_OutputStream.prototype = new ScalaJS.h.O();
ScalaJS.c.Ljava_io_OutputStream.prototype.constructor = ScalaJS.c.Ljava_io_OutputStream;
/** @constructor */
ScalaJS.h.Ljava_io_OutputStream = (function() {
  /*<skip>*/
});
ScalaJS.h.Ljava_io_OutputStream.prototype = ScalaJS.c.Ljava_io_OutputStream.prototype;
ScalaJS.c.Ljava_io_OutputStream.prototype.close__V = (function() {
  /*<skip>*/
});
/*<skip>*/;
ScalaJS.is.Ljava_io_OutputStream = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Ljava_io_OutputStream)))
});
ScalaJS.as.Ljava_io_OutputStream = (function(obj) {
  if ((ScalaJS.is.Ljava_io_OutputStream(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.io.OutputStream")
  }
});
ScalaJS.isArrayOf.Ljava_io_OutputStream = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Ljava_io_OutputStream)))
});
ScalaJS.asArrayOf.Ljava_io_OutputStream = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Ljava_io_OutputStream(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.io.OutputStream;", depth)
  }
});
ScalaJS.d.Ljava_io_OutputStream = new ScalaJS.ClassTypeData({
  Ljava_io_OutputStream: 0
}, false, "java.io.OutputStream", ScalaJS.d.O, {
  Ljava_io_OutputStream: 1,
  Ljava_io_Flushable: 1,
  Ljava_io_Closeable: 1,
  O: 1
});
ScalaJS.c.Ljava_io_OutputStream.prototype.$classData = ScalaJS.d.Ljava_io_OutputStream;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_AcceptPrivateChat$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.constructor = ScalaJS.c.Lmodels_AcceptPrivateChat$;
/** @constructor */
ScalaJS.h.Lmodels_AcceptPrivateChat$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_AcceptPrivateChat$.prototype = ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype;
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.productPrefix__T = (function() {
  return "AcceptPrivateChat"
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.productArity__I = (function() {
  return 0
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1))
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.hashCode__I = (function() {
  return 1100804403
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.toString__T = (function() {
  return "AcceptPrivateChat"
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lmodels_AcceptPrivateChat = this;
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_AcceptPrivateChat$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_AcceptPrivateChat$)))
});
ScalaJS.as.Lmodels_AcceptPrivateChat$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_AcceptPrivateChat$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.AcceptPrivateChat$")
  }
});
ScalaJS.isArrayOf.Lmodels_AcceptPrivateChat$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_AcceptPrivateChat$)))
});
ScalaJS.asArrayOf.Lmodels_AcceptPrivateChat$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_AcceptPrivateChat$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.AcceptPrivateChat$;", depth)
  }
});
ScalaJS.d.Lmodels_AcceptPrivateChat$ = new ScalaJS.ClassTypeData({
  Lmodels_AcceptPrivateChat$: 0
}, false, "models.AcceptPrivateChat$", ScalaJS.d.O, {
  Lmodels_AcceptPrivateChat$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.Lmodels_AcceptPrivateChat$.prototype.$classData = ScalaJS.d.Lmodels_AcceptPrivateChat$;
ScalaJS.n.Lmodels_AcceptPrivateChat = undefined;
ScalaJS.m.Lmodels_AcceptPrivateChat = (function() {
  if ((!ScalaJS.n.Lmodels_AcceptPrivateChat)) {
    ScalaJS.n.Lmodels_AcceptPrivateChat = new ScalaJS.c.Lmodels_AcceptPrivateChat$().init___()
  };
  return ScalaJS.n.Lmodels_AcceptPrivateChat
});
/*<skip>*/;
ScalaJS.is.Lmodels_Connect = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Connect)))
});
ScalaJS.as.Lmodels_Connect = (function(obj) {
  if ((ScalaJS.is.Lmodels_Connect(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Connect")
  }
});
ScalaJS.isArrayOf.Lmodels_Connect = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Connect)))
});
ScalaJS.asArrayOf.Lmodels_Connect = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Connect(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Connect;", depth)
  }
});
ScalaJS.d.Lmodels_Connect = new ScalaJS.ClassTypeData({
  Lmodels_Connect: 0
}, false, "models.Connect", ScalaJS.d.O, {
  Lmodels_Connect: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_GenericConsPickler = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_GenericConsPickler.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_GenericConsPickler.prototype.constructor = ScalaJS.c.Lmodels_GenericConsPickler;
/** @constructor */
ScalaJS.h.Lmodels_GenericConsPickler = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_GenericConsPickler.prototype = ScalaJS.c.Lmodels_GenericConsPickler.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_GenericConsPickler = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_GenericConsPickler)))
});
ScalaJS.as.Lmodels_GenericConsPickler = (function(obj) {
  if ((ScalaJS.is.Lmodels_GenericConsPickler(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.GenericConsPickler")
  }
});
ScalaJS.isArrayOf.Lmodels_GenericConsPickler = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_GenericConsPickler)))
});
ScalaJS.asArrayOf.Lmodels_GenericConsPickler = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_GenericConsPickler(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.GenericConsPickler;", depth)
  }
});
ScalaJS.d.Lmodels_GenericConsPickler = new ScalaJS.ClassTypeData({
  Lmodels_GenericConsPickler: 0
}, false, "models.GenericConsPickler", ScalaJS.d.O, {
  Lmodels_GenericConsPickler: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_GenericConsPickler.prototype.$classData = ScalaJS.d.Lmodels_GenericConsPickler;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_GenericConsUnpickler = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_GenericConsUnpickler.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_GenericConsUnpickler.prototype.constructor = ScalaJS.c.Lmodels_GenericConsUnpickler;
/** @constructor */
ScalaJS.h.Lmodels_GenericConsUnpickler = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_GenericConsUnpickler.prototype = ScalaJS.c.Lmodels_GenericConsUnpickler.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_GenericConsUnpickler = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_GenericConsUnpickler)))
});
ScalaJS.as.Lmodels_GenericConsUnpickler = (function(obj) {
  if ((ScalaJS.is.Lmodels_GenericConsUnpickler(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.GenericConsUnpickler")
  }
});
ScalaJS.isArrayOf.Lmodels_GenericConsUnpickler = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_GenericConsUnpickler)))
});
ScalaJS.asArrayOf.Lmodels_GenericConsUnpickler = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_GenericConsUnpickler(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.GenericConsUnpickler;", depth)
  }
});
ScalaJS.d.Lmodels_GenericConsUnpickler = new ScalaJS.ClassTypeData({
  Lmodels_GenericConsUnpickler: 0
}, false, "models.GenericConsUnpickler", ScalaJS.d.O, {
  Lmodels_GenericConsUnpickler: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_GenericConsUnpickler.prototype.$classData = ScalaJS.d.Lmodels_GenericConsUnpickler;
/*<skip>*/;
ScalaJS.is.Lmodels_Join = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Join)))
});
ScalaJS.as.Lmodels_Join = (function(obj) {
  if ((ScalaJS.is.Lmodels_Join(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Join")
  }
});
ScalaJS.isArrayOf.Lmodels_Join = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Join)))
});
ScalaJS.asArrayOf.Lmodels_Join = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Join(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Join;", depth)
  }
});
ScalaJS.d.Lmodels_Join = new ScalaJS.ClassTypeData({
  Lmodels_Join: 0
}, false, "models.Join", ScalaJS.d.O, {
  Lmodels_Join: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_JoinedRoom = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_JoinedRoom)))
});
ScalaJS.as.Lmodels_JoinedRoom = (function(obj) {
  if ((ScalaJS.is.Lmodels_JoinedRoom(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.JoinedRoom")
  }
});
ScalaJS.isArrayOf.Lmodels_JoinedRoom = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_JoinedRoom)))
});
ScalaJS.asArrayOf.Lmodels_JoinedRoom = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_JoinedRoom(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.JoinedRoom;", depth)
  }
});
ScalaJS.d.Lmodels_JoinedRoom = new ScalaJS.ClassTypeData({
  Lmodels_JoinedRoom: 0
}, false, "models.JoinedRoom", ScalaJS.d.O, {
  Lmodels_JoinedRoom: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_Leave$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_Leave$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_Leave$.prototype.constructor = ScalaJS.c.Lmodels_Leave$;
/** @constructor */
ScalaJS.h.Lmodels_Leave$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_Leave$.prototype = ScalaJS.c.Lmodels_Leave$.prototype;
ScalaJS.c.Lmodels_Leave$.prototype.productPrefix__T = (function() {
  return "Leave"
});
ScalaJS.c.Lmodels_Leave$.prototype.productArity__I = (function() {
  return 0
});
ScalaJS.c.Lmodels_Leave$.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1))
});
ScalaJS.c.Lmodels_Leave$.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.Lmodels_Leave$.prototype.hashCode__I = (function() {
  return 73293463
});
ScalaJS.c.Lmodels_Leave$.prototype.toString__T = (function() {
  return "Leave"
});
ScalaJS.c.Lmodels_Leave$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lmodels_Leave = this;
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_Leave$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Leave$)))
});
ScalaJS.as.Lmodels_Leave$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_Leave$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Leave$")
  }
});
ScalaJS.isArrayOf.Lmodels_Leave$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Leave$)))
});
ScalaJS.asArrayOf.Lmodels_Leave$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Leave$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Leave$;", depth)
  }
});
ScalaJS.d.Lmodels_Leave$ = new ScalaJS.ClassTypeData({
  Lmodels_Leave$: 0
}, false, "models.Leave$", ScalaJS.d.O, {
  Lmodels_Leave$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.Lmodels_Leave$.prototype.$classData = ScalaJS.d.Lmodels_Leave$;
ScalaJS.n.Lmodels_Leave = undefined;
ScalaJS.m.Lmodels_Leave = (function() {
  if ((!ScalaJS.n.Lmodels_Leave)) {
    ScalaJS.n.Lmodels_Leave = new ScalaJS.c.Lmodels_Leave$().init___()
  };
  return ScalaJS.n.Lmodels_Leave
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_Menu = (function() {
  ScalaJS.c.O.call(this);
  this.uri$1 = null;
  this.title$1 = null;
  this.children$1 = null
});
ScalaJS.c.Lmodels_Menu.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_Menu.prototype.constructor = ScalaJS.c.Lmodels_Menu;
/** @constructor */
ScalaJS.h.Lmodels_Menu = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_Menu.prototype = ScalaJS.c.Lmodels_Menu.prototype;
ScalaJS.c.Lmodels_Menu.prototype.uri__Lorg_scalax_semweb_rdf_IRI = (function() {
  return this.uri$1
});
ScalaJS.c.Lmodels_Menu.prototype.title__T = (function() {
  return this.title$1
});
ScalaJS.c.Lmodels_Menu.prototype.children__sci_List = (function() {
  return this.children$1
});
ScalaJS.c.Lmodels_Menu.prototype.productPrefix__T = (function() {
  return "Menu"
});
ScalaJS.c.Lmodels_Menu.prototype.productArity__I = (function() {
  return 3
});
ScalaJS.c.Lmodels_Menu.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  switch (x1) {
    case 0:
      {
        return this.uri__Lorg_scalax_semweb_rdf_IRI();
        break
      };
    case 1:
      {
        return this.title__T();
        break
      };
    case 2:
      {
        return this.children__sci_List();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1));
  }
});
ScalaJS.c.Lmodels_Menu.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.Lmodels_Menu.prototype.canEqual__O__Z = (function(x$1) {
  return ScalaJS.is.Lmodels_Menu(x$1)
});
ScalaJS.c.Lmodels_Menu.prototype.hashCode__I = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undhashCode__s_Product__I(this)
});
ScalaJS.c.Lmodels_Menu.prototype.toString__T = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undtoString__s_Product__T(this)
});
ScalaJS.c.Lmodels_Menu.prototype.equals__O__Z = (function(x$1) {
  if ((this === x$1)) {
    return true
  } else {
    var x1 = x$1;
    matchEnd4: {
      if (ScalaJS.is.Lmodels_Menu(x1)) {
        var jsx$1 = true;
        break matchEnd4
      };
      var jsx$1 = false;
      break matchEnd4
    };
    if (jsx$1) {
      var Menu$1 = ScalaJS.as.Lmodels_Menu(x$1);
      return (((ScalaJS.anyRefEqEq(this.uri__Lorg_scalax_semweb_rdf_IRI(), Menu$1.uri__Lorg_scalax_semweb_rdf_IRI()) && ScalaJS.anyRefEqEq(this.title__T(), Menu$1.title__T())) && ScalaJS.anyRefEqEq(this.children__sci_List(), Menu$1.children__sci_List())) && Menu$1.canEqual__O__Z(this))
    } else {
      return false
    }
  }
});
ScalaJS.c.Lmodels_Menu.prototype.init___Lorg_scalax_semweb_rdf_IRI__T__sci_List = (function(uri, title, children) {
  this.uri$1 = uri;
  this.title$1 = title;
  this.children$1 = children;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_Menu = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Menu)))
});
ScalaJS.as.Lmodels_Menu = (function(obj) {
  if ((ScalaJS.is.Lmodels_Menu(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Menu")
  }
});
ScalaJS.isArrayOf.Lmodels_Menu = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Menu)))
});
ScalaJS.asArrayOf.Lmodels_Menu = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Menu(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Menu;", depth)
  }
});
ScalaJS.d.Lmodels_Menu = new ScalaJS.ClassTypeData({
  Lmodels_Menu: 0
}, false, "models.Menu", ScalaJS.d.O, {
  Lmodels_Menu: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  Lmodels_MenuItemLike: 1,
  O: 1
});
ScalaJS.c.Lmodels_Menu.prototype.$classData = ScalaJS.d.Lmodels_Menu;
/*<skip>*/;
ScalaJS.is.Lmodels_MenuItem = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_MenuItem)))
});
ScalaJS.as.Lmodels_MenuItem = (function(obj) {
  if ((ScalaJS.is.Lmodels_MenuItem(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.MenuItem")
  }
});
ScalaJS.isArrayOf.Lmodels_MenuItem = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_MenuItem)))
});
ScalaJS.asArrayOf.Lmodels_MenuItem = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_MenuItem(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.MenuItem;", depth)
  }
});
ScalaJS.d.Lmodels_MenuItem = new ScalaJS.ClassTypeData({
  Lmodels_MenuItem: 0
}, false, "models.MenuItem", ScalaJS.d.O, {
  Lmodels_MenuItem: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  Lmodels_MenuItemLike: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_Message = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Message)))
});
ScalaJS.as.Lmodels_Message = (function(obj) {
  if ((ScalaJS.is.Lmodels_Message(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Message")
  }
});
ScalaJS.isArrayOf.Lmodels_Message = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Message)))
});
ScalaJS.asArrayOf.Lmodels_Message = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Message(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Message;", depth)
  }
});
ScalaJS.d.Lmodels_Message = new ScalaJS.ClassTypeData({
  Lmodels_Message: 0
}, false, "models.Message", ScalaJS.d.O, {
  Lmodels_Message: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_ReceiveMessage = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_ReceiveMessage)))
});
ScalaJS.as.Lmodels_ReceiveMessage = (function(obj) {
  if ((ScalaJS.is.Lmodels_ReceiveMessage(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.ReceiveMessage")
  }
});
ScalaJS.isArrayOf.Lmodels_ReceiveMessage = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_ReceiveMessage)))
});
ScalaJS.asArrayOf.Lmodels_ReceiveMessage = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_ReceiveMessage(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.ReceiveMessage;", depth)
  }
});
ScalaJS.d.Lmodels_ReceiveMessage = new ScalaJS.ClassTypeData({
  Lmodels_ReceiveMessage: 0
}, false, "models.ReceiveMessage", ScalaJS.d.O, {
  Lmodels_ReceiveMessage: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$.prototype;
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$1$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$17$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$17$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$1$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$17$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$2$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$18$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$18$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$2$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$18$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$3$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$19$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$19$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$3$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$19$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$4$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$20$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$20$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$4$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$20$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$5$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$21$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$21$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$5$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$21$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$6$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$22$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$22$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$6$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$22$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$7$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$23$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$23$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$7$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$23$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$8$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$24$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$24$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$8$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$24$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$9$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$25$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$25$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$9$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$25$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$10$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$26$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$26$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$10$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$26$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$11$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$27$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$27$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$11$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$27$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$12$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$28$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$28$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$12$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$28$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$13$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$29$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$29$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$13$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$29$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$14$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$30$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$30$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$14$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$30$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$15$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$31$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$31$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$15$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$31$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$16$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$32$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$32$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$16$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(x$1) {
  if ((x$1.elem$1 === null)) {
    x$1.elem$1 = new ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$().init___()
  };
  return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$32$(x$1.elem$1)
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.registerPicklers__V = (function() {
  /*<skip>*/
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$1__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$17$ = (function(GenPickler$module$1) {
  if ((GenPickler$module$1.elem$1 === null)) {
    return this.GenPickler$1$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$17$(GenPickler$module$1)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$17$(GenPickler$module$1.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$1__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(GenUnpickler$module$1) {
  if ((GenUnpickler$module$1.elem$1 === null)) {
    return this.GenUnpickler$1$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$17$(GenUnpickler$module$1)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$17$(GenUnpickler$module$1.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$2__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$18$ = (function(GenPickler$module$2) {
  if ((GenPickler$module$2.elem$1 === null)) {
    return this.GenPickler$2$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$18$(GenPickler$module$2)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$18$(GenPickler$module$2.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$2__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(GenUnpickler$module$2) {
  if ((GenUnpickler$module$2.elem$1 === null)) {
    return this.GenUnpickler$2$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$18$(GenUnpickler$module$2)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$18$(GenUnpickler$module$2.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$3__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$19$ = (function(GenPickler$module$3) {
  if ((GenPickler$module$3.elem$1 === null)) {
    return this.GenPickler$3$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$19$(GenPickler$module$3)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$19$(GenPickler$module$3.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$3__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(GenUnpickler$module$3) {
  if ((GenUnpickler$module$3.elem$1 === null)) {
    return this.GenUnpickler$3$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$19$(GenUnpickler$module$3)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$19$(GenUnpickler$module$3.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$4__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$20$ = (function(GenPickler$module$4) {
  if ((GenPickler$module$4.elem$1 === null)) {
    return this.GenPickler$4$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$20$(GenPickler$module$4)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$20$(GenPickler$module$4.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$4__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(GenUnpickler$module$4) {
  if ((GenUnpickler$module$4.elem$1 === null)) {
    return this.GenUnpickler$4$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$20$(GenUnpickler$module$4)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$20$(GenUnpickler$module$4.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$5__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$21$ = (function(GenPickler$module$5) {
  if ((GenPickler$module$5.elem$1 === null)) {
    return this.GenPickler$5$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$21$(GenPickler$module$5)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$21$(GenPickler$module$5.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$5__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(GenUnpickler$module$5) {
  if ((GenUnpickler$module$5.elem$1 === null)) {
    return this.GenUnpickler$5$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$21$(GenUnpickler$module$5)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$21$(GenUnpickler$module$5.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$6__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$22$ = (function(GenPickler$module$6) {
  if ((GenPickler$module$6.elem$1 === null)) {
    return this.GenPickler$6$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$22$(GenPickler$module$6)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$22$(GenPickler$module$6.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$6__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(GenUnpickler$module$6) {
  if ((GenUnpickler$module$6.elem$1 === null)) {
    return this.GenUnpickler$6$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$22$(GenUnpickler$module$6)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$22$(GenUnpickler$module$6.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$7__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$23$ = (function(GenPickler$module$7) {
  if ((GenPickler$module$7.elem$1 === null)) {
    return this.GenPickler$7$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$23$(GenPickler$module$7)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$23$(GenPickler$module$7.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$7__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(GenUnpickler$module$7) {
  if ((GenUnpickler$module$7.elem$1 === null)) {
    return this.GenUnpickler$7$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$23$(GenUnpickler$module$7)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$23$(GenUnpickler$module$7.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$8__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$24$ = (function(GenPickler$module$8) {
  if ((GenPickler$module$8.elem$1 === null)) {
    return this.GenPickler$8$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$24$(GenPickler$module$8)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$24$(GenPickler$module$8.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$8__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(GenUnpickler$module$8) {
  if ((GenUnpickler$module$8.elem$1 === null)) {
    return this.GenUnpickler$8$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$24$(GenUnpickler$module$8)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$24$(GenUnpickler$module$8.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$9__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$25$ = (function(GenPickler$module$9) {
  if ((GenPickler$module$9.elem$1 === null)) {
    return this.GenPickler$9$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$25$(GenPickler$module$9)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$25$(GenPickler$module$9.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$9__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(GenUnpickler$module$9) {
  if ((GenUnpickler$module$9.elem$1 === null)) {
    return this.GenUnpickler$9$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$25$(GenUnpickler$module$9)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$25$(GenUnpickler$module$9.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$10__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$26$ = (function(GenPickler$module$10) {
  if ((GenPickler$module$10.elem$1 === null)) {
    return this.GenPickler$10$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$26$(GenPickler$module$10)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$26$(GenPickler$module$10.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$10__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(GenUnpickler$module$10) {
  if ((GenUnpickler$module$10.elem$1 === null)) {
    return this.GenUnpickler$10$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$26$(GenUnpickler$module$10)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$26$(GenUnpickler$module$10.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$11__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$27$ = (function(GenPickler$module$11) {
  if ((GenPickler$module$11.elem$1 === null)) {
    return this.GenPickler$11$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$27$(GenPickler$module$11)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$27$(GenPickler$module$11.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$11__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(GenUnpickler$module$11) {
  if ((GenUnpickler$module$11.elem$1 === null)) {
    return this.GenUnpickler$11$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$27$(GenUnpickler$module$11)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$27$(GenUnpickler$module$11.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$12__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$28$ = (function(GenPickler$module$12) {
  if ((GenPickler$module$12.elem$1 === null)) {
    return this.GenPickler$12$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$28$(GenPickler$module$12)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$28$(GenPickler$module$12.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$12__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(GenUnpickler$module$12) {
  if ((GenUnpickler$module$12.elem$1 === null)) {
    return this.GenUnpickler$12$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$28$(GenUnpickler$module$12)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$28$(GenUnpickler$module$12.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$13__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$29$ = (function(GenPickler$module$13) {
  if ((GenPickler$module$13.elem$1 === null)) {
    return this.GenPickler$13$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$29$(GenPickler$module$13)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$29$(GenPickler$module$13.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$13__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(GenUnpickler$module$13) {
  if ((GenUnpickler$module$13.elem$1 === null)) {
    return this.GenUnpickler$13$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$29$(GenUnpickler$module$13)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$29$(GenUnpickler$module$13.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$14__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$30$ = (function(GenPickler$module$14) {
  if ((GenPickler$module$14.elem$1 === null)) {
    return this.GenPickler$14$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$30$(GenPickler$module$14)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$30$(GenPickler$module$14.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$14__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(GenUnpickler$module$14) {
  if ((GenUnpickler$module$14.elem$1 === null)) {
    return this.GenUnpickler$14$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$30$(GenUnpickler$module$14)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$30$(GenUnpickler$module$14.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$15__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$31$ = (function(GenPickler$module$15) {
  if ((GenPickler$module$15.elem$1 === null)) {
    return this.GenPickler$15$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$31$(GenPickler$module$15)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$31$(GenPickler$module$15.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$15__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(GenUnpickler$module$15) {
  if ((GenUnpickler$module$15.elem$1 === null)) {
    return this.GenUnpickler$15$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$31$(GenUnpickler$module$15)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$31$(GenUnpickler$module$15.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenPickler$16__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$32$ = (function(GenPickler$module$16) {
  if ((GenPickler$module$16.elem$1 === null)) {
    return this.GenPickler$16$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$32$(GenPickler$module$16)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$32$(GenPickler$module$16.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.GenUnpickler$16__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(GenUnpickler$module$16) {
  if ((GenUnpickler$module$16.elem$1 === null)) {
    return this.GenUnpickler$16$lzycompute__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$32$(GenUnpickler$module$16)
  } else {
    return ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$32$(GenUnpickler$module$16.elem$1)
  }
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lmodels_RegisterPicklers = this;
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__O__Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName__V(ScalaJS.m.sci_Nil(), new ScalaJS.c.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName().init___T("scala.collection.immutable.Nil$"));
  var jsx$4 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$3 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.sci_$colon$colon.getClassOf());
  var GenPickler$module = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$2 = this.GenPickler$1__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$17$(GenPickler$module);
  var GenUnpickler$module = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$1 = this.GenUnpickler$1__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$17$(GenUnpickler$module);
  jsx$4.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$3, jsx$2, jsx$1);
  var jsx$8 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$7 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_User.getClassOf());
  var GenPickler$module$2 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$6 = this.GenPickler$2__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$18$(GenPickler$module$2);
  var GenUnpickler$module$2 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$5 = this.GenUnpickler$2__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$18$(GenUnpickler$module$2);
  jsx$8.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$7, jsx$6, jsx$5);
  var jsx$12 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$11 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_Room.getClassOf());
  var GenPickler$module$3 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$10 = this.GenPickler$3__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$19$(GenPickler$module$3);
  var GenUnpickler$module$3 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$9 = this.GenUnpickler$3__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$19$(GenUnpickler$module$3);
  jsx$12.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$11, jsx$10, jsx$9);
  var jsx$16 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$15 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_Message.getClassOf());
  var GenPickler$module$4 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$14 = this.GenPickler$4__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$20$(GenPickler$module$4);
  var GenUnpickler$module$4 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$13 = this.GenUnpickler$4__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$20$(GenUnpickler$module$4);
  jsx$16.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$15, jsx$14, jsx$13);
  var jsx$20 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$19 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_Connect.getClassOf());
  var GenPickler$module$5 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$18 = this.GenPickler$5__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$21$(GenPickler$module$5);
  var GenUnpickler$module$5 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$17 = this.GenUnpickler$5__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$21$(GenUnpickler$module$5);
  jsx$20.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$19, jsx$18, jsx$17);
  var jsx$24 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$23 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_Join.getClassOf());
  var GenPickler$module$6 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$22 = this.GenPickler$6__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$22$(GenPickler$module$6);
  var GenUnpickler$module$6 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$21 = this.GenUnpickler$6__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$22$(GenUnpickler$module$6);
  jsx$24.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$23, jsx$22, jsx$21);
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__O__Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName__V(ScalaJS.m.Lmodels_Leave(), new ScalaJS.c.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName().init___T("models.Leave$"));
  var jsx$28 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$27 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_SendMessage.getClassOf());
  var GenPickler$module$7 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$26 = this.GenPickler$7__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$23$(GenPickler$module$7);
  var GenUnpickler$module$7 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$25 = this.GenUnpickler$7__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$23$(GenUnpickler$module$7);
  jsx$28.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$27, jsx$26, jsx$25);
  var jsx$32 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$31 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_RequestPrivateChat.getClassOf());
  var GenPickler$module$8 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$30 = this.GenPickler$8__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$24$(GenPickler$module$8);
  var GenUnpickler$module$8 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$29 = this.GenUnpickler$8__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$24$(GenUnpickler$module$8);
  jsx$32.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$31, jsx$30, jsx$29);
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__O__Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName__V(ScalaJS.m.Lmodels_AcceptPrivateChat(), new ScalaJS.c.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName().init___T("models.AcceptPrivateChat$"));
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__O__Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName__V(ScalaJS.m.Lmodels_RejectPrivateChat(), new ScalaJS.c.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName().init___T("models.RejectPrivateChat$"));
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__O__Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName__V(ScalaJS.m.Lmodels_UserDoesNotExist(), new ScalaJS.c.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName().init___T("models.UserDoesNotExist$"));
  var jsx$36 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$35 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_RoomListChanged.getClassOf());
  var GenPickler$module$9 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$34 = this.GenPickler$9__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$25$(GenPickler$module$9);
  var GenUnpickler$module$9 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$33 = this.GenUnpickler$9__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$25$(GenUnpickler$module$9);
  jsx$36.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$35, jsx$34, jsx$33);
  var jsx$40 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$39 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_JoinedRoom.getClassOf());
  var GenPickler$module$10 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$38 = this.GenPickler$10__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$26$(GenPickler$module$10);
  var GenUnpickler$module$10 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$37 = this.GenUnpickler$10__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$26$(GenUnpickler$module$10);
  jsx$40.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$39, jsx$38, jsx$37);
  var jsx$44 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$43 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_UserJoined.getClassOf());
  var GenPickler$module$11 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$42 = this.GenPickler$11__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$27$(GenPickler$module$11);
  var GenUnpickler$module$11 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$41 = this.GenUnpickler$11__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$27$(GenUnpickler$module$11);
  jsx$44.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$43, jsx$42, jsx$41);
  var jsx$48 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$47 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_UserLeft.getClassOf());
  var GenPickler$module$12 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$46 = this.GenPickler$12__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$28$(GenPickler$module$12);
  var GenUnpickler$module$12 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$45 = this.GenUnpickler$12__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$28$(GenUnpickler$module$12);
  jsx$48.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$47, jsx$46, jsx$45);
  var jsx$52 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$51 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_ReceiveMessage.getClassOf());
  var GenPickler$module$13 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$50 = this.GenPickler$13__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$29$(GenPickler$module$13);
  var GenUnpickler$module$13 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$49 = this.GenUnpickler$13__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$29$(GenUnpickler$module$13);
  jsx$52.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$51, jsx$50, jsx$49);
  var jsx$56 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$55 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lorg_scalax_semweb_rdf_IRI.getClassOf());
  var GenPickler$module$14 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$54 = this.GenPickler$14__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$30$(GenPickler$module$14);
  var GenUnpickler$module$14 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$53 = this.GenUnpickler$14__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$30$(GenUnpickler$module$14);
  jsx$56.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$55, jsx$54, jsx$53);
  var jsx$60 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$59 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_MenuItem.getClassOf());
  var GenPickler$module$15 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$58 = this.GenPickler$15__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$31$(GenPickler$module$15);
  var GenUnpickler$module$15 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$57 = this.GenUnpickler$15__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$31$(GenUnpickler$module$15);
  jsx$60.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$59, jsx$58, jsx$57);
  var jsx$64 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry();
  var jsx$63 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.Lmodels_Menu.getClassOf());
  var GenPickler$module$16 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$62 = this.GenPickler$16__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenPickler$32$(GenPickler$module$16);
  var GenUnpickler$module$16 = new ScalaJS.c.sr_VolatileObjectRef().init___O(null);
  var jsx$61 = this.GenUnpickler$16__p1__sr_VolatileObjectRef__Lmodels_RegisterPicklers$GenUnpickler$32$(GenUnpickler$module$16);
  jsx$64.register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(jsx$63, jsx$62, jsx$61);
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.sci_$colon$colon.getClassOf()), ScalaJS.m.Lmodels_RegisterPicklers$StrConsPickler(), ScalaJS.m.Lmodels_RegisterPicklers$StrConsUnpickler());
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.sci_$colon$colon.getClassOf()), ScalaJS.m.Lmodels_RegisterPicklers$IriItemPickler(), ScalaJS.m.Lmodels_RegisterPicklers$IriItemUnpickler());
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.sci_$colon$colon.getClassOf()), ScalaJS.m.Lmodels_RegisterPicklers$MenuItemPickler(), ScalaJS.m.Lmodels_RegisterPicklers$MenuItemUnpickler());
  ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().register__s_reflect_ClassTag__Lorg_scalajs_spickling_Pickler__Lorg_scalajs_spickling_Unpickler__V(ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.d.sci_$colon$colon.getClassOf()), ScalaJS.m.Lmodels_RegisterPicklers$MenuConsPickler(), ScalaJS.m.Lmodels_RegisterPicklers$MenuConsUnpickler());
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$: 0
}, false, "models.RegisterPicklers$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$;
ScalaJS.n.Lmodels_RegisterPicklers = undefined;
ScalaJS.m.Lmodels_RegisterPicklers = (function() {
  if ((!ScalaJS.n.Lmodels_RegisterPicklers)) {
    ScalaJS.n.Lmodels_RegisterPicklers = new ScalaJS.c.Lmodels_RegisterPicklers$().init___()
  };
  return ScalaJS.n.Lmodels_RegisterPicklers
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$17$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$17$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$17$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$17$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$17$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$17$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$17$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$17$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$17$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$17$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$17$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$17$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$17$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$17$: 0
}, false, "models.RegisterPicklers$GenPickler$17$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$17$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$17$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$17$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$18$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$18$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$18$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$18$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$18$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$18$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$18$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$18$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$18$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$18$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$18$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$18$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$18$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$18$: 0
}, false, "models.RegisterPicklers$GenPickler$18$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$18$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$18$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$18$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$19$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$19$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$19$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$19$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$19$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$19$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$19$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$19$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$19$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$19$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$19$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$19$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$19$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$19$: 0
}, false, "models.RegisterPicklers$GenPickler$19$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$19$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$19$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$19$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$20$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$20$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$20$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$20$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$20$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$20$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$20$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$20$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$20$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$20$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$20$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$20$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$20$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$20$: 0
}, false, "models.RegisterPicklers$GenPickler$20$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$20$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$20$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$20$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$21$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$21$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$21$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$21$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$21$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$21$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$21$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$21$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$21$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$21$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$21$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$21$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$21$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$21$: 0
}, false, "models.RegisterPicklers$GenPickler$21$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$21$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$21$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$21$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$22$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$22$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$22$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$22$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$22$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$22$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$22$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$22$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$22$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$22$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$22$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$22$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$22$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$22$: 0
}, false, "models.RegisterPicklers$GenPickler$22$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$22$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$22$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$22$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$23$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$23$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$23$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$23$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$23$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$23$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$23$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$23$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$23$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$23$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$23$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$23$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$23$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$23$: 0
}, false, "models.RegisterPicklers$GenPickler$23$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$23$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$23$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$23$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$24$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$24$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$24$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$24$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$24$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$24$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$24$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$24$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$24$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$24$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$24$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$24$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$24$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$24$: 0
}, false, "models.RegisterPicklers$GenPickler$24$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$24$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$24$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$24$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$25$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$25$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$25$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$25$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$25$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$25$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$25$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$25$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$25$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$25$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$25$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$25$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$25$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$25$: 0
}, false, "models.RegisterPicklers$GenPickler$25$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$25$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$25$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$25$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$26$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$26$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$26$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$26$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$26$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$26$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$26$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$26$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$26$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$26$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$26$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$26$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$26$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$26$: 0
}, false, "models.RegisterPicklers$GenPickler$26$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$26$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$26$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$26$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$27$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$27$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$27$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$27$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$27$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$27$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$27$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$27$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$27$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$27$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$27$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$27$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$27$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$27$: 0
}, false, "models.RegisterPicklers$GenPickler$27$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$27$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$27$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$27$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$28$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$28$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$28$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$28$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$28$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$28$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$28$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$28$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$28$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$28$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$28$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$28$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$28$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$28$: 0
}, false, "models.RegisterPicklers$GenPickler$28$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$28$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$28$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$28$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$29$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$29$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$29$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$29$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$29$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$29$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$29$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$29$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$29$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$29$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$29$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$29$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$29$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$29$: 0
}, false, "models.RegisterPicklers$GenPickler$29$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$29$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$29$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$29$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$30$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$30$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$30$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$30$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$30$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$30$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$30$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$30$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$30$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$30$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$30$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$30$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$30$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$30$: 0
}, false, "models.RegisterPicklers$GenPickler$30$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$30$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$30$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$30$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$31$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$31$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$31$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$31$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$31$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$31$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$31$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$31$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$31$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$31$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$31$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$31$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$31$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$31$: 0
}, false, "models.RegisterPicklers$GenPickler$31$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$31$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$31$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$31$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$32$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenPickler$32$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$32$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenPickler$32$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenPickler$32$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenPickler$32$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenPickler$32$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$32$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenPickler$32$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenPickler$32$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenPickler$32$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenPickler$32$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$32$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenPickler$32$: 0
}, false, "models.RegisterPicklers$GenPickler$32$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenPickler$32$: 1,
  Lorg_scalajs_spickling_Pickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenPickler$32$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenPickler$32$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$17$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$17$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$17$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$17$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$17$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$17$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$17$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$17$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$17$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$17$: 0
}, false, "models.RegisterPicklers$GenUnpickler$17$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$17$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$17$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$17$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$18$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$18$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$18$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$18$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$18$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$18$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$18$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$18$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$18$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$18$: 0
}, false, "models.RegisterPicklers$GenUnpickler$18$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$18$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$18$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$18$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$19$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$19$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$19$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$19$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$19$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$19$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$19$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$19$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$19$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$19$: 0
}, false, "models.RegisterPicklers$GenUnpickler$19$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$19$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$19$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$19$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$20$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$20$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$20$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$20$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$20$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$20$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$20$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$20$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$20$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$20$: 0
}, false, "models.RegisterPicklers$GenUnpickler$20$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$20$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$20$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$20$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$21$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$21$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$21$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$21$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$21$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$21$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$21$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$21$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$21$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$21$: 0
}, false, "models.RegisterPicklers$GenUnpickler$21$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$21$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$21$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$21$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$22$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$22$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$22$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$22$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$22$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$22$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$22$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$22$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$22$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$22$: 0
}, false, "models.RegisterPicklers$GenUnpickler$22$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$22$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$22$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$22$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$23$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$23$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$23$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$23$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$23$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$23$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$23$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$23$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$23$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$23$: 0
}, false, "models.RegisterPicklers$GenUnpickler$23$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$23$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$23$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$23$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$24$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$24$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$24$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$24$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$24$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$24$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$24$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$24$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$24$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$24$: 0
}, false, "models.RegisterPicklers$GenUnpickler$24$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$24$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$24$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$24$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$25$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$25$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$25$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$25$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$25$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$25$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$25$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$25$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$25$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$25$: 0
}, false, "models.RegisterPicklers$GenUnpickler$25$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$25$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$25$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$25$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$26$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$26$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$26$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$26$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$26$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$26$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$26$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$26$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$26$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$26$: 0
}, false, "models.RegisterPicklers$GenUnpickler$26$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$26$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$26$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$26$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$27$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$27$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$27$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$27$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$27$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$27$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$27$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$27$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$27$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$27$: 0
}, false, "models.RegisterPicklers$GenUnpickler$27$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$27$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$27$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$27$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$28$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$28$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$28$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$28$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$28$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$28$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$28$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$28$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$28$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$28$: 0
}, false, "models.RegisterPicklers$GenUnpickler$28$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$28$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$28$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$28$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$29$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$29$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$29$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$29$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$29$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$29$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$29$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$29$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$29$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$29$: 0
}, false, "models.RegisterPicklers$GenUnpickler$29$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$29$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$29$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$29$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$30$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$30$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$30$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$30$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$30$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$30$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$30$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$30$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$30$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$30$: 0
}, false, "models.RegisterPicklers$GenUnpickler$30$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$30$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$30$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$30$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$31$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$31$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$31$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$31$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$31$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$31$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$31$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$31$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$31$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$31$: 0
}, false, "models.RegisterPicklers$GenUnpickler$31$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$31$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$31$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$31$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$.prototype.constructor = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$;
/** @constructor */
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RegisterPicklers$GenUnpickler$32$.prototype = ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$.prototype;
/*<skip>*/;
ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RegisterPicklers$GenUnpickler$32$)))
});
ScalaJS.as.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RegisterPicklers$GenUnpickler$32$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RegisterPicklers$GenUnpickler$32$")
  }
});
ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RegisterPicklers$GenUnpickler$32$)))
});
ScalaJS.asArrayOf.Lmodels_RegisterPicklers$GenUnpickler$32$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RegisterPicklers$GenUnpickler$32$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RegisterPicklers$GenUnpickler$32$;", depth)
  }
});
ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$32$ = new ScalaJS.ClassTypeData({
  Lmodels_RegisterPicklers$GenUnpickler$32$: 0
}, false, "models.RegisterPicklers$GenUnpickler$32$", ScalaJS.d.O, {
  Lmodels_RegisterPicklers$GenUnpickler$32$: 1,
  Lorg_scalajs_spickling_Unpickler: 1,
  O: 1
});
ScalaJS.c.Lmodels_RegisterPicklers$GenUnpickler$32$.prototype.$classData = ScalaJS.d.Lmodels_RegisterPicklers$GenUnpickler$32$;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_RejectPrivateChat$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.constructor = ScalaJS.c.Lmodels_RejectPrivateChat$;
/** @constructor */
ScalaJS.h.Lmodels_RejectPrivateChat$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_RejectPrivateChat$.prototype = ScalaJS.c.Lmodels_RejectPrivateChat$.prototype;
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.productPrefix__T = (function() {
  return "RejectPrivateChat"
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.productArity__I = (function() {
  return 0
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1))
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.hashCode__I = (function() {
  return -1201603012
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.toString__T = (function() {
  return "RejectPrivateChat"
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lmodels_RejectPrivateChat = this;
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_RejectPrivateChat$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RejectPrivateChat$)))
});
ScalaJS.as.Lmodels_RejectPrivateChat$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_RejectPrivateChat$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RejectPrivateChat$")
  }
});
ScalaJS.isArrayOf.Lmodels_RejectPrivateChat$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RejectPrivateChat$)))
});
ScalaJS.asArrayOf.Lmodels_RejectPrivateChat$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RejectPrivateChat$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RejectPrivateChat$;", depth)
  }
});
ScalaJS.d.Lmodels_RejectPrivateChat$ = new ScalaJS.ClassTypeData({
  Lmodels_RejectPrivateChat$: 0
}, false, "models.RejectPrivateChat$", ScalaJS.d.O, {
  Lmodels_RejectPrivateChat$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.Lmodels_RejectPrivateChat$.prototype.$classData = ScalaJS.d.Lmodels_RejectPrivateChat$;
ScalaJS.n.Lmodels_RejectPrivateChat = undefined;
ScalaJS.m.Lmodels_RejectPrivateChat = (function() {
  if ((!ScalaJS.n.Lmodels_RejectPrivateChat)) {
    ScalaJS.n.Lmodels_RejectPrivateChat = new ScalaJS.c.Lmodels_RejectPrivateChat$().init___()
  };
  return ScalaJS.n.Lmodels_RejectPrivateChat
});
/*<skip>*/;
ScalaJS.is.Lmodels_RequestPrivateChat = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RequestPrivateChat)))
});
ScalaJS.as.Lmodels_RequestPrivateChat = (function(obj) {
  if ((ScalaJS.is.Lmodels_RequestPrivateChat(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RequestPrivateChat")
  }
});
ScalaJS.isArrayOf.Lmodels_RequestPrivateChat = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RequestPrivateChat)))
});
ScalaJS.asArrayOf.Lmodels_RequestPrivateChat = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RequestPrivateChat(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RequestPrivateChat;", depth)
  }
});
ScalaJS.d.Lmodels_RequestPrivateChat = new ScalaJS.ClassTypeData({
  Lmodels_RequestPrivateChat: 0
}, false, "models.RequestPrivateChat", ScalaJS.d.O, {
  Lmodels_RequestPrivateChat: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_Room = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_Room)))
});
ScalaJS.as.Lmodels_Room = (function(obj) {
  if ((ScalaJS.is.Lmodels_Room(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.Room")
  }
});
ScalaJS.isArrayOf.Lmodels_Room = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_Room)))
});
ScalaJS.asArrayOf.Lmodels_Room = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_Room(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.Room;", depth)
  }
});
ScalaJS.d.Lmodels_Room = new ScalaJS.ClassTypeData({
  Lmodels_Room: 0
}, false, "models.Room", ScalaJS.d.O, {
  Lmodels_Room: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_RoomListChanged = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_RoomListChanged)))
});
ScalaJS.as.Lmodels_RoomListChanged = (function(obj) {
  if ((ScalaJS.is.Lmodels_RoomListChanged(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.RoomListChanged")
  }
});
ScalaJS.isArrayOf.Lmodels_RoomListChanged = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_RoomListChanged)))
});
ScalaJS.asArrayOf.Lmodels_RoomListChanged = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_RoomListChanged(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.RoomListChanged;", depth)
  }
});
ScalaJS.d.Lmodels_RoomListChanged = new ScalaJS.ClassTypeData({
  Lmodels_RoomListChanged: 0
}, false, "models.RoomListChanged", ScalaJS.d.O, {
  Lmodels_RoomListChanged: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_SendMessage = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_SendMessage)))
});
ScalaJS.as.Lmodels_SendMessage = (function(obj) {
  if ((ScalaJS.is.Lmodels_SendMessage(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.SendMessage")
  }
});
ScalaJS.isArrayOf.Lmodels_SendMessage = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_SendMessage)))
});
ScalaJS.asArrayOf.Lmodels_SendMessage = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_SendMessage(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.SendMessage;", depth)
  }
});
ScalaJS.d.Lmodels_SendMessage = new ScalaJS.ClassTypeData({
  Lmodels_SendMessage: 0
}, false, "models.SendMessage", ScalaJS.d.O, {
  Lmodels_SendMessage: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_User = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_User)))
});
ScalaJS.as.Lmodels_User = (function(obj) {
  if ((ScalaJS.is.Lmodels_User(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.User")
  }
});
ScalaJS.isArrayOf.Lmodels_User = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_User)))
});
ScalaJS.asArrayOf.Lmodels_User = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_User(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.User;", depth)
  }
});
ScalaJS.d.Lmodels_User = new ScalaJS.ClassTypeData({
  Lmodels_User: 0
}, false, "models.User", ScalaJS.d.O, {
  Lmodels_User: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lmodels_UserDoesNotExist$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.constructor = ScalaJS.c.Lmodels_UserDoesNotExist$;
/** @constructor */
ScalaJS.h.Lmodels_UserDoesNotExist$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lmodels_UserDoesNotExist$.prototype = ScalaJS.c.Lmodels_UserDoesNotExist$.prototype;
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.productPrefix__T = (function() {
  return "UserDoesNotExist"
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.productArity__I = (function() {
  return 0
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1))
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.hashCode__I = (function() {
  return -1940929272
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.toString__T = (function() {
  return "UserDoesNotExist"
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lmodels_UserDoesNotExist = this;
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lmodels_UserDoesNotExist$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_UserDoesNotExist$)))
});
ScalaJS.as.Lmodels_UserDoesNotExist$ = (function(obj) {
  if ((ScalaJS.is.Lmodels_UserDoesNotExist$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.UserDoesNotExist$")
  }
});
ScalaJS.isArrayOf.Lmodels_UserDoesNotExist$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_UserDoesNotExist$)))
});
ScalaJS.asArrayOf.Lmodels_UserDoesNotExist$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_UserDoesNotExist$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.UserDoesNotExist$;", depth)
  }
});
ScalaJS.d.Lmodels_UserDoesNotExist$ = new ScalaJS.ClassTypeData({
  Lmodels_UserDoesNotExist$: 0
}, false, "models.UserDoesNotExist$", ScalaJS.d.O, {
  Lmodels_UserDoesNotExist$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.Lmodels_UserDoesNotExist$.prototype.$classData = ScalaJS.d.Lmodels_UserDoesNotExist$;
ScalaJS.n.Lmodels_UserDoesNotExist = undefined;
ScalaJS.m.Lmodels_UserDoesNotExist = (function() {
  if ((!ScalaJS.n.Lmodels_UserDoesNotExist)) {
    ScalaJS.n.Lmodels_UserDoesNotExist = new ScalaJS.c.Lmodels_UserDoesNotExist$().init___()
  };
  return ScalaJS.n.Lmodels_UserDoesNotExist
});
/*<skip>*/;
ScalaJS.is.Lmodels_UserJoined = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_UserJoined)))
});
ScalaJS.as.Lmodels_UserJoined = (function(obj) {
  if ((ScalaJS.is.Lmodels_UserJoined(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.UserJoined")
  }
});
ScalaJS.isArrayOf.Lmodels_UserJoined = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_UserJoined)))
});
ScalaJS.asArrayOf.Lmodels_UserJoined = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_UserJoined(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.UserJoined;", depth)
  }
});
ScalaJS.d.Lmodels_UserJoined = new ScalaJS.ClassTypeData({
  Lmodels_UserJoined: 0
}, false, "models.UserJoined", ScalaJS.d.O, {
  Lmodels_UserJoined: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lmodels_UserLeft = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lmodels_UserLeft)))
});
ScalaJS.as.Lmodels_UserLeft = (function(obj) {
  if ((ScalaJS.is.Lmodels_UserLeft(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "models.UserLeft")
  }
});
ScalaJS.isArrayOf.Lmodels_UserLeft = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lmodels_UserLeft)))
});
ScalaJS.asArrayOf.Lmodels_UserLeft = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lmodels_UserLeft(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lmodels.UserLeft;", depth)
  }
});
ScalaJS.d.Lmodels_UserLeft = new ScalaJS.ClassTypeData({
  Lmodels_UserLeft: 0
}, false, "models.UserLeft", ScalaJS.d.O, {
  Lmodels_UserLeft: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_ClassBinder = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_ClassBinder)))
});
ScalaJS.as.Lorg_denigma_binding_ClassBinder = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_ClassBinder(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.ClassBinder")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_ClassBinder = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_ClassBinder)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_ClassBinder = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_ClassBinder(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.ClassBinder;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_ClassBinder = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_ClassBinder: 0
}, true, "org.denigma.binding.ClassBinder", undefined, {
  Lorg_denigma_binding_ClassBinder: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_JustBinding = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_JustBinding;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_JustBinding = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_JustBinding.prototype = ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype;
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.makeGoToHandler__Lorg_scalajs_dom_HTMLElement__T__Z__Z__sjs_js_Function1 = (function(element, into, push, relativeURI) {
  return (function(f) {
    return (function(arg1) {
      return f.apply__O__O(arg1)
    })
  })(new ScalaJS.c.Lorg_denigma_binding_JustBinding$$anonfun$makeGoToHandler$1().init___Lorg_denigma_binding_JustBinding__Lorg_scalajs_dom_HTMLElement__T__Z(this, element, into, relativeURI))
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.processUrl__T__Z__T = (function(url, relativeURI) {
  if (ScalaJS.i.sjsr_RuntimeString$class__contains__sjsr_RuntimeString__jl_CharSequence__Z(url, "://")) {
    var st = ((ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__T__I(url, "://") + 3) | 0);
    return ScalaJS.m.Lorg_denigma_extensions_sq().withHost__T__T(ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T(url, ScalaJS.i.sjsr_RuntimeString$class__indexOf__sjsr_RuntimeString__T__I__I(url, "/", st)))
  } else {
    return ScalaJS.m.Lorg_denigma_extensions_sq().withHost__T__T(url)
  }
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.makeId__Lorg_scalajs_dom_HTMLElement__T__T = (function(el, title) {
  if ((ScalaJS.as.T(el["id"]) === null)) {
    el["id"] = ((title + "_") + ScalaJS.m.s_math_package().random__D())
  };
  return ScalaJS.as.T(el["id"])
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.bindRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F2__V = (function(key, el, rx, assign) {
  var obs$lzy = new ScalaJS.c.sr_ObjectRef().init___O(null);
  var bitmap$0 = new ScalaJS.c.sr_VolatileByteRef().init___B(0);
  var eid = this.makeId__Lorg_scalajs_dom_HTMLElement__T__T(el, key);
  var o = this.org$denigma$binding$JustBinding$$obs$1__Lrx_core_Rx__F2__T__sr_ObjectRef__sr_VolatileByteRef__Lrx_core_Obs(rx, assign, eid, obs$lzy, bitmap$0)
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.makeEventHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__F3__F1 = (function(el, par, assign) {
  return new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(el$1, par$1, assign$2) {
    return (function(ev$2) {
      var ev = ev$2;
      var x1 = par$1;
      matchEnd4: {
        if (ScalaJS.is.Lrx_core_Var(x1)) {
          var x2 = ScalaJS.as.Lrx_core_Var(x1);
          ScalaJS.asUnit(assign$2.apply__O__O__O__O(ev, x2, el$1));
          break matchEnd4
        };
        ScalaJS.g["console"]["error"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["rx is not Var"]), 1))).s__sc_Seq__T(ScalaJS.m.sci_Nil()));
        break matchEnd4
      }
    })
  })(el, par, assign))
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.obs$lzycompute$1__p1__Lrx_core_Rx__F2__T__sr_ObjectRef__sr_VolatileByteRef__Lrx_core_Obs = (function(rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1) {
  if (((bitmap$0$1.elem$1 & 1) === 0)) {
    obs$lzy$1.elem$1 = ScalaJS.m.Lrx_package().Obs__Lrx_core_Obs$().apply__Lrx_core_Emitter__T__Z__F0__Lrx_core_Obs(rx$1, eid$1, false, new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1) {
      return (function() {
        var x1 = ScalaJS.g["document"]["getElementById"](eid$1);
        matchEnd5: {
          if ((null === x1)) {
            ScalaJS.g["console"]["info"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["", " was not find, killing observable..."]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [eid$1]))));
            arg$outer.org$denigma$binding$JustBinding$$obs$1__Lrx_core_Rx__F2__T__sr_ObjectRef__sr_VolatileByteRef__Lrx_core_Obs(rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1).kill__V();
            break matchEnd5
          };
          if ((x1 !== null)) {
            var x3 = x1;
            var value = rx$1.now__O();
            ScalaJS.asUnit(assign$1.apply__O__O__O(x3, value));
            break matchEnd5
          };
          throw new ScalaJS.c.s_MatchError().init___O(x1)
        }
      })
    })(this, rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1)));
    bitmap$0$1.elem$1 = (bitmap$0$1.elem$1 | 1)
  };
  return ScalaJS.as.Lrx_core_Obs(obs$lzy$1.elem$1)
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.org$denigma$binding$JustBinding$$obs$1__Lrx_core_Rx__F2__T__sr_ObjectRef__sr_VolatileByteRef__Lrx_core_Obs = (function(rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1) {
  if (((bitmap$0$1.elem$1 & 1) === 0)) {
    return this.obs$lzycompute$1__p1__Lrx_core_Rx__F2__T__sr_ObjectRef__sr_VolatileByteRef__Lrx_core_Obs(rx$1, assign$1, eid$1, obs$lzy$1, bitmap$0$1)
  } else {
    return ScalaJS.as.Lrx_core_Obs(obs$lzy$1.elem$1)
  }
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_JustBinding = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_JustBinding)))
});
ScalaJS.as.Lorg_denigma_binding_JustBinding = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_JustBinding(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.JustBinding")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_JustBinding = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_JustBinding)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_JustBinding = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_JustBinding(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.JustBinding;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_JustBinding = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_JustBinding: 0
}, false, "org.denigma.binding.JustBinding", ScalaJS.d.O, {
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_JustBinding.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_JustBinding;
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_PropertyBinder = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_PropertyBinder)))
});
ScalaJS.as.Lorg_denigma_binding_PropertyBinder = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_PropertyBinder(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.PropertyBinder")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_PropertyBinder = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_PropertyBinder)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_PropertyBinder = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_PropertyBinder(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.PropertyBinder;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_PropertyBinder = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_PropertyBinder: 0
}, true, "org.denigma.binding.PropertyBinder", undefined, {
  Lorg_denigma_binding_PropertyBinder: 1,
  O: 1
});
ScalaJS.is.Lorg_denigma_binding_VisibilityBinder = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_VisibilityBinder)))
});
ScalaJS.as.Lorg_denigma_binding_VisibilityBinder = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_VisibilityBinder(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.VisibilityBinder")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_VisibilityBinder = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_VisibilityBinder)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_VisibilityBinder = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_VisibilityBinder(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.VisibilityBinder;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_VisibilityBinder = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_VisibilityBinder: 0
}, true, "org.denigma.binding.VisibilityBinder", undefined, {
  Lorg_denigma_binding_VisibilityBinder: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_ArticleView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.ArticleView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.ArticleView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_ArticleView$$anon$1: 0
}, false, "org.denigma.binding.frontend.ArticleView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_ArticleView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("lastEdited"), t.lastEdited__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("published"), t.published__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("text"), t.text__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("title"), t.title__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("authors"), t.authors__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_ArticleView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.ArticleView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.ArticleView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_ArticleView$$anon$2: 0
}, false, "org.denigma.binding.frontend.ArticleView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_ArticleView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_ArticleView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.ArticleView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.ArticleView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_ArticleView$$anon$3: 0
}, false, "org.denigma.binding.frontend.ArticleView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_ArticleView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_ArticleView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_ArticleView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.ArticleView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_ArticleView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.ArticleView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_ArticleView$$anon$4: 0
}, false, "org.denigma.binding.frontend.ArticleView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_ArticleView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$(t))
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.FrontEnd$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.FrontEnd$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_FrontEnd$$anon$1: 0
}, false, "org.denigma.binding.frontend.FrontEnd$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_FrontEnd$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$(t))
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.FrontEnd$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.FrontEnd$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_FrontEnd$$anon$2: 0
}, false, "org.denigma.binding.frontend.FrontEnd$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_FrontEnd$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$(t))
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.FrontEnd$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.FrontEnd$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_FrontEnd$$anon$3: 0
}, false, "org.denigma.binding.frontend.FrontEnd$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_FrontEnd$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_FrontEnd$__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$(t))
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.FrontEnd$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_FrontEnd$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.FrontEnd$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_FrontEnd$$anon$4: 0
}, false, "org.denigma.binding.frontend.FrontEnd$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_FrontEnd$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_MenuView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_MenuView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView$$anon$1: 0
}, false, "org.denigma.binding.frontend.MenuView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_MenuView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_MenuView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_MenuView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView$$anon$2: 0
}, false, "org.denigma.binding.frontend.MenuView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_MenuView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_MenuView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_MenuView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView$$anon$3: 0
}, false, "org.denigma.binding.frontend.MenuView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_MenuView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_MenuView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_MenuView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_MenuView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_MenuView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView$$anon$4: 0
}, false, "org.denigma.binding.frontend.MenuView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_MenuView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype.asListRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("items"), t.items__Lrx_core_Rx())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype.asListRxMap__O__sci_Map = (function(t) {
  return this.asListRxMap__Lorg_denigma_binding_frontend_MenuView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_MenuView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype.init___Lorg_denigma_binding_frontend_MenuView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$5)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView$$anon$5(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView$$anon$5")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView$$anon$5)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$5 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView$$anon$5(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView$$anon$5;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$5 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView$$anon$5: 0
}, false, "org.denigma.binding.frontend.MenuView$$anon$5", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_MenuView$$anon$5: 1,
  Lorg_denigma_binding_macroses_ListRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView$$anon$5;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_SidebarView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.SidebarView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.SidebarView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_SidebarView$$anon$1: 0
}, false, "org.denigma.binding.frontend.SidebarView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_SidebarView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("logo"), t.logo__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_SidebarView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.SidebarView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.SidebarView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_SidebarView$$anon$2: 0
}, false, "org.denigma.binding.frontend.SidebarView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_SidebarView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_SidebarView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.SidebarView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.SidebarView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_SidebarView$$anon$3: 0
}, false, "org.denigma.binding.frontend.SidebarView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_SidebarView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_SidebarView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_SidebarView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.SidebarView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_SidebarView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.SidebarView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_SidebarView$$anon$4: 0
}, false, "org.denigma.binding.frontend.SidebarView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_SidebarView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype.init___Lorg_denigma_binding_frontend_slides_BindSlide = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.BindSlide$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.BindSlide$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1: 0
}, false, "org.denigma.binding.frontend.slides.BindSlide$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("scala_code"), t.scala$undcode__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("html_code"), t.html$undcode__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype.init___Lorg_denigma_binding_frontend_slides_BindSlide = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.BindSlide$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.BindSlide$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2: 0
}, false, "org.denigma.binding.frontend.slides.BindSlide$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype.init___Lorg_denigma_binding_frontend_slides_BindSlide = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.BindSlide$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.BindSlide$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3: 0
}, false, "org.denigma.binding.frontend.slides.BindSlide$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_slides_BindSlide__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype.init___Lorg_denigma_binding_frontend_slides_BindSlide = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.BindSlide$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.BindSlide$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4: 0
}, false, "org.denigma.binding.frontend.slides.BindSlide$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_slides_SlideView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.SlideView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.SlideView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$1: 0
}, false, "org.denigma.binding.frontend.slides.SlideView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_slides_SlideView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.SlideView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.SlideView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$2: 0
}, false, "org.denigma.binding.frontend.slides.SlideView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_slides_SlideView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.SlideView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.SlideView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$3: 0
}, false, "org.denigma.binding.frontend.slides.SlideView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_slides_SlideView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_slides_SlideView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.SlideView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.SlideView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$4: 0
}, false, "org.denigma.binding.frontend.slides.SlideView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_slides_SlideView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype.asListRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("items"), t.items__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype.asListRxMap__O__sci_Map = (function(t) {
  return this.asListRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_tests_LongListView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$1: 0
}, false, "org.denigma.binding.frontend.tests.LongListView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$1: 1,
  Lorg_denigma_binding_macroses_ListRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype.asTagRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_tests_LongListView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$2: 0
}, false, "org.denigma.binding.frontend.tests.LongListView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$2: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype.asStringRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_tests_LongListView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$3: 0
}, false, "org.denigma.binding.frontend.tests.LongListView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$3: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_tests_LongListView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$4: 0
}, false, "org.denigma.binding.frontend.tests.LongListView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$4: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_tests_LongListView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype.init___Lorg_denigma_binding_frontend_tests_LongListView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView$$anon$5")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView$$anon$5;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$5: 0
}, false, "org.denigma.binding.frontend.tests.LongListView$$anon$5", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_LongListView$$anon$5: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype.asTagRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("counting"), t.counting__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype.init___Lorg_denigma_binding_frontend_tests_RandomView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.RandomView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.RandomView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$1: 0
}, false, "org.denigma.binding.frontend.tests.RandomView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype.asStringRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("bar"), t.bar__Lrx_core_Var()), ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("foo"), t.foo__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype.init___Lorg_denigma_binding_frontend_tests_RandomView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.RandomView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.RandomView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$2: 0
}, false, "org.denigma.binding.frontend.tests.RandomView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype.init___Lorg_denigma_binding_frontend_tests_RandomView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.RandomView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.RandomView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$3: 0
}, false, "org.denigma.binding.frontend.tests.RandomView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_binding_frontend_tests_RandomView__sci_Map(ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView(t))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype.init___Lorg_denigma_binding_frontend_tests_RandomView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.RandomView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.RandomView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$4: 0
}, false, "org.denigma.binding.frontend.tests.RandomView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_binding_frontend_tests_RandomView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4;
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_macroses_BooleanRxMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_macroses_BooleanRxMap)))
});
ScalaJS.as.Lorg_denigma_binding_macroses_BooleanRxMap = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_macroses_BooleanRxMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.macroses.BooleanRxMap")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_BooleanRxMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_macroses_BooleanRxMap)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_macroses_BooleanRxMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_BooleanRxMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.macroses.BooleanRxMap;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_macroses_BooleanRxMap = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_macroses_BooleanRxMap: 0
}, true, "org.denigma.binding.macroses.BooleanRxMap", undefined, {
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.is.Lorg_denigma_binding_macroses_ListRxMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_macroses_ListRxMap)))
});
ScalaJS.as.Lorg_denigma_binding_macroses_ListRxMap = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_macroses_ListRxMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.macroses.ListRxMap")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_ListRxMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_macroses_ListRxMap)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_macroses_ListRxMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_ListRxMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.macroses.ListRxMap;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_macroses_ListRxMap = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_macroses_ListRxMap: 0
}, true, "org.denigma.binding.macroses.ListRxMap", undefined, {
  Lorg_denigma_binding_macroses_ListRxMap: 1,
  O: 1
});
ScalaJS.is.Lorg_denigma_binding_macroses_MouseEventMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_macroses_MouseEventMap)))
});
ScalaJS.as.Lorg_denigma_binding_macroses_MouseEventMap = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_macroses_MouseEventMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.macroses.MouseEventMap")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_MouseEventMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_macroses_MouseEventMap)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_macroses_MouseEventMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_MouseEventMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.macroses.MouseEventMap;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_macroses_MouseEventMap = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_macroses_MouseEventMap: 0
}, true, "org.denigma.binding.macroses.MouseEventMap", undefined, {
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.is.Lorg_denigma_binding_macroses_StringRxMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_macroses_StringRxMap)))
});
ScalaJS.as.Lorg_denigma_binding_macroses_StringRxMap = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_macroses_StringRxMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.macroses.StringRxMap")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_StringRxMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_macroses_StringRxMap)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_macroses_StringRxMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_StringRxMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.macroses.StringRxMap;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_macroses_StringRxMap = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_macroses_StringRxMap: 0
}, true, "org.denigma.binding.macroses.StringRxMap", undefined, {
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.is.Lorg_denigma_binding_macroses_TagRxMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_macroses_TagRxMap)))
});
ScalaJS.as.Lorg_denigma_binding_macroses_TagRxMap = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_macroses_TagRxMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.macroses.TagRxMap")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_TagRxMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_macroses_TagRxMap)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_macroses_TagRxMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_macroses_TagRxMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.macroses.TagRxMap;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_macroses_TagRxMap = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_macroses_TagRxMap: 0
}, true, "org.denigma.binding.macroses.TagRxMap", undefined, {
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function() {
  ScalaJS.c.O.call(this);
  this.obj$1 = null;
  this.$$outer$f = null
});
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype = ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype;
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.isNullOrUndef__Z = (function() {
  return (((this.obj$1 === null) || (this.obj$1 === undefined)) || (this.obj$1 === ""))
});
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.dyn__sjs_js_Dynamic = (function() {
  return this.obj$1
});
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.$$bslash__T__s_Option = (function(key) {
  var x1 = this.dyn__sjs_js_Dynamic()[key];
  if ((null === x1)) {
    return ScalaJS.m.s_None()
  };
  return new ScalaJS.c.s_Some().init___O(x1)
});
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.init___Lorg_denigma_extensions_AnyJsExtensions__sjs_js_Any = (function($$outer, obj) {
  this.obj$1 = obj;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_AnyJsExtensions$AnyJs)))
});
ScalaJS.as.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_AnyJsExtensions$AnyJs(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.AnyJsExtensions$AnyJs")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_AnyJsExtensions$AnyJs)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_AnyJsExtensions$AnyJs(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.AnyJsExtensions$AnyJs;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_AnyJsExtensions$AnyJs = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_AnyJsExtensions$AnyJs: 0
}, false, "org.denigma.extensions.AnyJsExtensions$AnyJs", ScalaJS.d.O, {
  Lorg_denigma_extensions_AnyJsExtensions$AnyJs: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_AnyJsExtensions$AnyJs.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_AnyJsExtensions$AnyJs;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function() {
  ScalaJS.c.O.call(this);
  this.tuple$1 = null;
  this.$$outer$f = null
});
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype = ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype;
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype.toAtt__Lorg_scalajs_dom_Attr = (function() {
  var at = ScalaJS.g["document"]["createAttribute"](ScalaJS.as.T(this.tuple$1.$$und1__O()));
  at["value"] = ScalaJS.as.T(this.tuple$1.$$und2__O());
  return at
});
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype.init___Lorg_denigma_extensions_AttributesOps__T2 = (function($$outer, tuple) {
  this.tuple$1 = tuple;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_AttributesOps$AttrFactory)))
});
ScalaJS.as.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_AttributesOps$AttrFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.AttributesOps$AttrFactory")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_AttributesOps$AttrFactory)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_AttributesOps$AttrFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_AttributesOps$AttrFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.AttributesOps$AttrFactory;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_AttributesOps$AttrFactory = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_AttributesOps$AttrFactory: 0
}, false, "org.denigma.extensions.AttributesOps$AttrFactory", ScalaJS.d.O, {
  Lorg_denigma_extensions_AttributesOps$AttrFactory: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_AttributesOps$AttrFactory.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_AttributesOps$AttrFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt = (function() {
  ScalaJS.c.O.call(this);
  this.source$1 = null;
  this.$$outer$f = null
});
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_CommonOps$MapOpt = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_CommonOps$MapOpt.prototype = ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype;
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype.getOrError__T__s_Option = (function(key) {
  var g = this.source$1.get__O__s_Option(key);
  if (g.isEmpty__Z()) {
    ScalaJS.g["console"]["error"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["failed to find item with key ", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [key]))))
  };
  return g
});
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype.init___Lorg_denigma_extensions_CommonOps__sci_Map = (function($$outer, source) {
  this.source$1 = source;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_CommonOps$MapOpt = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_CommonOps$MapOpt)))
});
ScalaJS.as.Lorg_denigma_extensions_CommonOps$MapOpt = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_CommonOps$MapOpt(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.CommonOps$MapOpt")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_CommonOps$MapOpt = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_CommonOps$MapOpt)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_CommonOps$MapOpt = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_CommonOps$MapOpt(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.CommonOps$MapOpt;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_CommonOps$MapOpt = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_CommonOps$MapOpt: 0
}, false, "org.denigma.extensions.CommonOps$MapOpt", ScalaJS.d.O, {
  Lorg_denigma_extensions_CommonOps$MapOpt: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_CommonOps$MapOpt.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_CommonOps$MapOpt;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx = (function() {
  ScalaJS.c.O.call(this);
  this.source$1 = null;
  this.$$outer$f = null
});
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_RxOps$AnyRx = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_RxOps$AnyRx.prototype = ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype;
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype.zip__F2__Lrx_core_Rx = (function(combiner) {
  return new ScalaJS.c.Lrx_ops_Zipper().init___Lrx_core_Rx__F2(this.source$1, new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function(combiner$1) {
    return (function(x$2, y$2) {
      var x = ScalaJS.as.s_util_Try(x$2);
      var y = ScalaJS.as.s_util_Try(y$2);
      var x1 = new ScalaJS.c.T2().init___O__O(x, y);
      if ((x1 !== null)) {
        var p2 = ScalaJS.as.s_util_Try(x1.$$und1__O());
        var p3 = ScalaJS.as.s_util_Try(x1.$$und2__O());
        if (ScalaJS.is.s_util_Success(p2)) {
          var x4 = ScalaJS.as.s_util_Success(p2);
          var a = x4.value__O();
          if (ScalaJS.is.s_util_Success(p3)) {
            var x5 = ScalaJS.as.s_util_Success(p3);
            var b = x5.value__O();
            return new ScalaJS.c.s_util_Success().init___O(combiner$1.apply__O__O__O(a, b))
          }
        }
      };
      if ((x1 !== null)) {
        var p6 = ScalaJS.as.s_util_Try(x1.$$und1__O());
        var p7 = ScalaJS.as.s_util_Try(x1.$$und2__O());
        if (ScalaJS.is.s_util_Failure(p6)) {
          var x8 = ScalaJS.as.s_util_Failure(p6);
          var a$2 = x8.exception__jl_Throwable();
          if (ScalaJS.is.s_util_Success(p7)) {
            return new ScalaJS.c.s_util_Failure().init___jl_Throwable(a$2)
          }
        }
      };
      if ((x1 !== null)) {
        var p10 = ScalaJS.as.s_util_Try(x1.$$und1__O());
        var p11 = ScalaJS.as.s_util_Try(x1.$$und2__O());
        if (ScalaJS.is.s_util_Success(p10)) {
          if (ScalaJS.is.s_util_Failure(p11)) {
            var x14 = ScalaJS.as.s_util_Failure(p11);
            var b$2 = x14.exception__jl_Throwable();
            return new ScalaJS.c.s_util_Failure().init___jl_Throwable(b$2)
          }
        }
      };
      if ((x1 !== null)) {
        var p15 = ScalaJS.as.s_util_Try(x1.$$und1__O());
        var p16 = ScalaJS.as.s_util_Try(x1.$$und2__O());
        if (ScalaJS.is.s_util_Failure(p15)) {
          if (ScalaJS.is.s_util_Failure(p16)) {
            var x19 = ScalaJS.as.s_util_Failure(p16);
            var b$3 = x19.exception__jl_Throwable();
            return new ScalaJS.c.s_util_Failure().init___jl_Throwable(b$3)
          }
        }
      };
      throw new ScalaJS.c.s_MatchError().init___O(x1)
    })
  })(combiner)))
});
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype.zip__Lrx_core_Rx = (function() {
  return this.zip__F2__Lrx_core_Rx(new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(a$2, b$2) {
      var a = ScalaJS.as.O(a$2);
      var b = ScalaJS.as.O(b$2);
      return new ScalaJS.c.T2().init___O__O(a, b)
    })
  })()))
});
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype.init___Lorg_denigma_extensions_RxOps__Lrx_core_Rx = (function($$outer, source) {
  this.source$1 = source;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_RxOps$AnyRx = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_RxOps$AnyRx)))
});
ScalaJS.as.Lorg_denigma_extensions_RxOps$AnyRx = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_RxOps$AnyRx(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.RxOps$AnyRx")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_RxOps$AnyRx = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_RxOps$AnyRx)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_RxOps$AnyRx = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_RxOps$AnyRx(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.RxOps$AnyRx;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_RxOps$AnyRx = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_RxOps$AnyRx: 0
}, false, "org.denigma.extensions.RxOps$AnyRx", ScalaJS.d.O, {
  Lorg_denigma_extensions_RxOps$AnyRx: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_RxOps$AnyRx.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_RxOps$AnyRx;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_package$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_package$;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_package$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_package$.prototype = ScalaJS.c.Lorg_denigma_extensions_package$.prototype;
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.MapOpt__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt = (function(source) {
  return ScalaJS.i.Lorg_denigma_extensions_CommonOps$class__MapOpt__Lorg_denigma_extensions_CommonOps__sci_Map__Lorg_denigma_extensions_CommonOps$MapOpt(this, source)
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.AnyRx__Lrx_core_Rx__Lorg_denigma_extensions_RxOps$AnyRx = (function(source) {
  return ScalaJS.i.Lorg_denigma_extensions_RxOps$class__AnyRx__Lorg_denigma_extensions_RxOps__Lrx_core_Rx__Lorg_denigma_extensions_RxOps$AnyRx(this, source)
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs = (function(obj) {
  return ScalaJS.i.Lorg_denigma_extensions_AnyJsExtensions$class__AnyJs__Lorg_denigma_extensions_AnyJsExtensions__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(this, obj)
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.AttrFactory__T2__Lorg_denigma_extensions_AttributesOps$AttrFactory = (function(tuple) {
  return ScalaJS.i.Lorg_denigma_extensions_AttributesOps$class__AttrFactory__Lorg_denigma_extensions_AttributesOps__T2__Lorg_denigma_extensions_AttributesOps$AttrFactory(this, tuple)
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lorg_denigma_extensions_package = this;
  ScalaJS.i.Lorg_denigma_extensions_AttributesOps$class__$init$__Lorg_denigma_extensions_AttributesOps__V(this);
  ScalaJS.i.Lorg_denigma_extensions_AnyJsExtensions$class__$init$__Lorg_denigma_extensions_AnyJsExtensions__V(this);
  ScalaJS.i.Lorg_denigma_extensions_RxOps$class__$init$__Lorg_denigma_extensions_RxOps__V(this);
  ScalaJS.i.Lorg_denigma_extensions_CommonOps$class__$init$__Lorg_denigma_extensions_CommonOps__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_package$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_package$)))
});
ScalaJS.as.Lorg_denigma_extensions_package$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_package$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.package$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_package$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_package$)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_package$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_package$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.package$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_package$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_package$: 0
}, false, "org.denigma.extensions.package$", ScalaJS.d.O, {
  Lorg_denigma_extensions_package$: 1,
  Lorg_denigma_extensions_CommonOps: 1,
  Lorg_denigma_extensions_RxOps: 1,
  Lorg_denigma_extensions_AnyJsExtensions: 1,
  Lorg_denigma_extensions_AttributesOps: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_package$.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_package$;
ScalaJS.n.Lorg_denigma_extensions_package = undefined;
ScalaJS.m.Lorg_denigma_extensions_package = (function() {
  if ((!ScalaJS.n.Lorg_denigma_extensions_package)) {
    ScalaJS.n.Lorg_denigma_extensions_package = new ScalaJS.c.Lorg_denigma_extensions_package$().init___()
  };
  return ScalaJS.n.Lorg_denigma_extensions_package
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_extensions_sq$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.constructor = ScalaJS.c.Lorg_denigma_extensions_sq$;
/** @constructor */
ScalaJS.h.Lorg_denigma_extensions_sq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_extensions_sq$.prototype = ScalaJS.c.Lorg_denigma_extensions_sq$.prototype;
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.byId__T__s_Option = (function(id) {
  var x1 = ScalaJS.g["document"]["getElementById"](id);
  if ((null === x1)) {
    return ScalaJS.m.s_None()
  };
  return new ScalaJS.c.s_Some().init___O(x1)
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.get__T__I__sc_Seq__Z__s_concurrent_Future = (function(url, timeout, headers, withCredentials) {
  return this.pickleRequest__s_concurrent_Future__s_concurrent_Future(ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().apply__T__T__T__I__sc_Seq__Z__s_concurrent_Future("GET", url, "", timeout, headers, withCredentials))
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.get$default$2__I = (function() {
  return 0
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.get$default$3__sc_Seq = (function() {
  var x$3 = new ScalaJS.c.T2().init___O__O("Content-Type", "application/json;charset=UTF-8");
  return ScalaJS.m.sci_Nil().$$colon$colon__O__sci_List(x$3)
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.get$default$4__Z = (function() {
  return false
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.withHost__T__T = (function(str) {
  var jsx$2 = ("http://" + ScalaJS.as.T(ScalaJS.g["location"]["host"]));
  if ((ScalaJS.i.sjsr_RuntimeString$class__startsWith__sjsr_RuntimeString__T__Z(str, "/") || ScalaJS.i.sjsr_RuntimeString$class__startsWith__sjsr_RuntimeString__T__Z(str, "#"))) {
    var jsx$1 = str
  } else {
    var jsx$1 = ("/" + str)
  };
  return (jsx$2 + jsx$1)
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.pickleRequest__s_concurrent_Future__s_concurrent_Future = (function(req) {
  return req.map__F1__s_concurrent_ExecutionContext__s_concurrent_Future(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x0$1$2) {
      var x0$1 = x0$1$2;
      var x1 = x0$1;
      var v = ScalaJS.g["JSON"]["parse"](ScalaJS.as.T(x1["responseText"]));
      var x$4 = v;
      var x$5 = ScalaJS.m.Lorg_scalajs_spickling_jsany_package().reader__Lorg_scalajs_spickling_jsany_JSPReader$();
      var x$6 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().unpickle$default$3__O__Lorg_scalajs_spickling_PicklerRegistry(x$4);
      var x1$2 = ScalaJS.m.Lorg_scalajs_spickling_PicklerRegistry().unpickle__O__Lorg_scalajs_spickling_PReader__Lorg_scalajs_spickling_PicklerRegistry__O(x$4, x$5, x$6);
      if (ScalaJS.is.O(x1$2)) {
        var x2 = x1$2;
        return x2
      };
      var ex = new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["unpickling problem with ", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [v])));
      ScalaJS.g["console"]["error"](ex);
      throw ScalaJS.unwrapJavaScriptException(new ScalaJS.c.jl_Exception().init___T(ex))
    })
  })()), ScalaJS.m.sjs_concurrent_JSExecutionContext$Implicits().queue__s_concurrent_ExecutionContext())
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_extensions_sq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_extensions_sq$)))
});
ScalaJS.as.Lorg_denigma_extensions_sq$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_extensions_sq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.extensions.sq$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_extensions_sq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_extensions_sq$)))
});
ScalaJS.asArrayOf.Lorg_denigma_extensions_sq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_extensions_sq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.extensions.sq$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_extensions_sq$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_extensions_sq$: 0
}, false, "org.denigma.extensions.sq$", ScalaJS.d.O, {
  Lorg_denigma_extensions_sq$: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_extensions_sq$.prototype.$classData = ScalaJS.d.Lorg_denigma_extensions_sq$;
ScalaJS.n.Lorg_denigma_extensions_sq = undefined;
ScalaJS.m.Lorg_denigma_extensions_sq = (function() {
  if ((!ScalaJS.n.Lorg_denigma_extensions_sq)) {
    ScalaJS.n.Lorg_denigma_extensions_sq = new ScalaJS.c.Lorg_denigma_extensions_sq$().init___()
  };
  return ScalaJS.n.Lorg_denigma_extensions_sq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_BindingView$.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$.prototype.apply__T__Lorg_scalajs_dom_HTMLElement__Lorg_denigma_views_BindingView$JustView = (function(name, elem) {
  return new ScalaJS.c.Lorg_denigma_views_BindingView$JustView().init___T__Lorg_scalajs_dom_HTMLElement(name, elem)
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$: 0
}, false, "org.denigma.views.BindingView$", ScalaJS.d.O, {
  Lorg_denigma_views_BindingView$: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$;
ScalaJS.n.Lorg_denigma_views_BindingView = undefined;
ScalaJS.m.Lorg_denigma_views_BindingView = (function() {
  if ((!ScalaJS.n.Lorg_denigma_views_BindingView)) {
    ScalaJS.n.Lorg_denigma_views_BindingView = new ScalaJS.c.Lorg_denigma_views_BindingView$().init___()
  };
  return ScalaJS.n.Lorg_denigma_views_BindingView
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype.asTagRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map(ScalaJS.as.Lorg_denigma_views_BindingView$JustView(t))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype.init___Lorg_denigma_views_BindingView$JustView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$JustView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$JustView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$JustView$$anon$1: 0
}, false, "org.denigma.views.BindingView$JustView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_views_BindingView$JustView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype.asStringRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map(ScalaJS.as.Lorg_denigma_views_BindingView$JustView(t))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype.init___Lorg_denigma_views_BindingView$JustView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$JustView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$JustView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$JustView$$anon$2: 0
}, false, "org.denigma.views.BindingView$JustView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_views_BindingView$JustView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_views_BindingView$JustView__sci_Map(ScalaJS.as.Lorg_denigma_views_BindingView$JustView(t))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype.init___Lorg_denigma_views_BindingView$JustView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$JustView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$JustView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$JustView$$anon$3: 0
}, false, "org.denigma.views.BindingView$JustView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_views_BindingView$JustView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_views_BindingView$JustView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_views_BindingView$JustView__sci_Map(ScalaJS.as.Lorg_denigma_views_BindingView$JustView(t))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype.init___Lorg_denigma_views_BindingView$JustView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$JustView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$JustView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$JustView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$JustView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$JustView$$anon$4: 0
}, false, "org.denigma.views.BindingView$JustView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_views_BindingView$JustView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$JustView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype.asTagRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map(ScalaJS.as.Lorg_denigma_views_CodeMirrorView(t))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype.init___Lorg_denigma_views_CodeMirrorView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.CodeMirrorView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.CodeMirrorView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_CodeMirrorView$$anon$1: 0
}, false, "org.denigma.views.CodeMirrorView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_views_CodeMirrorView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype.asStringRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("code"), t.code__Lrx_core_Var())]), 1))))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map(ScalaJS.as.Lorg_denigma_views_CodeMirrorView(t))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype.init___Lorg_denigma_views_CodeMirrorView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.CodeMirrorView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.CodeMirrorView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_CodeMirrorView$$anon$2: 0
}, false, "org.denigma.views.CodeMirrorView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_views_CodeMirrorView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_views_CodeMirrorView__sci_Map(ScalaJS.as.Lorg_denigma_views_CodeMirrorView(t))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype.init___Lorg_denigma_views_CodeMirrorView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.CodeMirrorView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.CodeMirrorView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_CodeMirrorView$$anon$3: 0
}, false, "org.denigma.views.CodeMirrorView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_views_CodeMirrorView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_views_CodeMirrorView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_views_CodeMirrorView__sci_Map(ScalaJS.as.Lorg_denigma_views_CodeMirrorView(t))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype.init___Lorg_denigma_views_CodeMirrorView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_CodeMirrorView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.CodeMirrorView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_CodeMirrorView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.CodeMirrorView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_CodeMirrorView$$anon$4: 0
}, false, "org.denigma.views.CodeMirrorView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_views_CodeMirrorView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_views_CodeMirrorView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_ListView$.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$.prototype = ScalaJS.c.Lorg_denigma_views_ListView$.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$.prototype.apply__Lorg_scalajs_dom_HTMLElement__sci_Map__Lorg_denigma_views_MapView = (function(el, props) {
  return new ScalaJS.c.Lorg_denigma_views_ListView$JustMapView().init___Lorg_scalajs_dom_HTMLElement__sci_Map(el, props)
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$)))
});
ScalaJS.as.Lorg_denigma_views_ListView$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$: 0
}, false, "org.denigma.views.ListView$", ScalaJS.d.O, {
  Lorg_denigma_views_ListView$: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$;
ScalaJS.n.Lorg_denigma_views_ListView = undefined;
ScalaJS.m.Lorg_denigma_views_ListView = (function() {
  if ((!ScalaJS.n.Lorg_denigma_views_ListView)) {
    ScalaJS.n.Lorg_denigma_views_ListView = new ScalaJS.c.Lorg_denigma_views_ListView$().init___()
  };
  return ScalaJS.n.Lorg_denigma_views_ListView
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype.asTagRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype.asTagRxMap__O__sci_Map = (function(t) {
  return this.asTagRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map(ScalaJS.as.Lorg_denigma_views_ListView$JustMapView(t))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype.init___Lorg_denigma_views_ListView$JustMapView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$1)))
});
ScalaJS.as.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$JustMapView$$anon$1")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$1)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$JustMapView$$anon$1;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$1 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$JustMapView$$anon$1: 0
}, false, "org.denigma.views.ListView$JustMapView$$anon$1", ScalaJS.d.O, {
  Lorg_denigma_views_ListView$JustMapView$$anon$1: 1,
  Lorg_denigma_binding_macroses_TagRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype.asStringRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype.asStringRxMap__O__sci_Map = (function(t) {
  return this.asStringRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map(ScalaJS.as.Lorg_denigma_views_ListView$JustMapView(t))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype.init___Lorg_denigma_views_ListView$JustMapView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$2)))
});
ScalaJS.as.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$JustMapView$$anon$2")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$2)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$JustMapView$$anon$2;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$2 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$JustMapView$$anon$2: 0
}, false, "org.denigma.views.ListView$JustMapView$$anon$2", ScalaJS.d.O, {
  Lorg_denigma_views_ListView$JustMapView$$anon$2: 1,
  Lorg_denigma_binding_macroses_StringRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype.asBooleanRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype.asBooleanRxMap__O__sci_Map = (function(t) {
  return this.asBooleanRxMap__Lorg_denigma_views_ListView$JustMapView__sci_Map(ScalaJS.as.Lorg_denigma_views_ListView$JustMapView(t))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype.init___Lorg_denigma_views_ListView$JustMapView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$3)))
});
ScalaJS.as.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$JustMapView$$anon$3")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$3)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$JustMapView$$anon$3;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$3 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$JustMapView$$anon$3: 0
}, false, "org.denigma.views.ListView$JustMapView$$anon$3", ScalaJS.d.O, {
  Lorg_denigma_views_ListView$JustMapView$$anon$3: 1,
  Lorg_denigma_binding_macroses_BooleanRxMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype.asMouseEventMap__Lorg_denigma_views_ListView$JustMapView__sci_Map = (function(t) {
  return ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype.asMouseEventMap__O__sci_Map = (function(t) {
  return this.asMouseEventMap__Lorg_denigma_views_ListView$JustMapView__sci_Map(ScalaJS.as.Lorg_denigma_views_ListView$JustMapView(t))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype.init___Lorg_denigma_views_ListView$JustMapView = (function($$outer) {
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$4)))
});
ScalaJS.as.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$JustMapView$$anon$4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$JustMapView$$anon$4")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$JustMapView$$anon$4)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView$$anon$4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$JustMapView$$anon$4;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$4 = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$JustMapView$$anon$4: 0
}, false, "org.denigma.views.ListView$JustMapView$$anon$4", ScalaJS.d.O, {
  Lorg_denigma_views_ListView$JustMapView$$anon$4: 1,
  Lorg_denigma_binding_macroses_MouseEventMap: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$JustMapView$$anon$4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_package$ = (function() {
  ScalaJS.c.O.call(this);
  this.factories$1 = null
});
ScalaJS.c.Lorg_denigma_views_package$.prototype = new ScalaJS.h.O();
ScalaJS.c.Lorg_denigma_views_package$.prototype.constructor = ScalaJS.c.Lorg_denigma_views_package$;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_package$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_package$.prototype = ScalaJS.c.Lorg_denigma_views_package$.prototype;
ScalaJS.c.Lorg_denigma_views_package$.prototype.factories__sci_Map = (function() {
  return this.factories$1
});
ScalaJS.c.Lorg_denigma_views_package$.prototype.factories$und$eq__sci_Map__V = (function(x$1) {
  this.factories$1 = x$1
});
ScalaJS.c.Lorg_denigma_views_package$.prototype.register__T__F2__Lorg_denigma_views_package$ = (function(name, factory) {
  this.factories$und$eq__sci_Map__V(this.factories__sci_Map().$$plus__T2__sci_Map(ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O(name), factory)));
  return this
});
ScalaJS.c.Lorg_denigma_views_package$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.Lorg_denigma_views_package = this;
  this.factories$1 = ScalaJS.m.sci_Map().empty__sci_Map();
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_package$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_package$)))
});
ScalaJS.as.Lorg_denigma_views_package$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_package$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.package$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_package$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_package$)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_package$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_package$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.package$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_package$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_package$: 0
}, false, "org.denigma.views.package$", ScalaJS.d.O, {
  Lorg_denigma_views_package$: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_package$.prototype.$classData = ScalaJS.d.Lorg_denigma_views_package$;
ScalaJS.n.Lorg_denigma_views_package = undefined;
ScalaJS.m.Lorg_denigma_views_package = (function() {
  if ((!ScalaJS.n.Lorg_denigma_views_package)) {
    ScalaJS.n.Lorg_denigma_views_package = new ScalaJS.c.Lorg_denigma_views_package$().init___()
  };
  return ScalaJS.n.Lorg_denigma_views_package
});
/*<skip>*/;
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_dom_extensions_Ajax$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_dom_extensions_package$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_spickling_Pickler = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_spickling_PicklerRegistry$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_spickling_PicklerRegistry$SingletonFullName = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_spickling_Unpickler = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalajs_spickling_jsany_package$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_scalax_semweb_rdf_IRI = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Emitter = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Incrementing = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Incrementing$SpinState = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Node = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Obs$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Propagator$Immediate$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Reactor = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Rx = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_SpinSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Spinlock = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_core_Var$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_ops_Wrapper = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_package$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lscalatags_all$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lscalatags_package$ = function() {};
ScalaJS.is.T = (function(obj) {
  return (typeof(obj) === "string")
});
ScalaJS.as.T = (function(obj) {
  if ((ScalaJS.is.T(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.String")
  }
});
ScalaJS.isArrayOf.T = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.T)))
});
ScalaJS.asArrayOf.T = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.T(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.String;", depth)
  }
});
ScalaJS.d.T = new ScalaJS.ClassTypeData({
  T: 0
}, false, "java.lang.String", ScalaJS.d.O, {
  T: 1,
  Ljava_io_Serializable: 1,
  jl_CharSequence: 1,
  jl_Comparable: 1,
  O: 1
}, ScalaJS.is.T);
/** @constructor */
ScalaJS.c.T2 = (function() {
  ScalaJS.c.O.call(this);
  this.$$und1$f = null;
  this.$$und2$f = null
});
ScalaJS.c.T2.prototype = new ScalaJS.h.O();
ScalaJS.c.T2.prototype.constructor = ScalaJS.c.T2;
/** @constructor */
ScalaJS.h.T2 = (function() {
  /*<skip>*/
});
ScalaJS.h.T2.prototype = ScalaJS.c.T2.prototype;
ScalaJS.c.T2.prototype.productArity__I = (function() {
  return ScalaJS.i.s_Product2$class__productArity__s_Product2__I(this)
});
ScalaJS.c.T2.prototype.productElement__I__O = (function(n) {
  return ScalaJS.i.s_Product2$class__productElement__s_Product2__I__O(this, n)
});
ScalaJS.c.T2.prototype.$$und1__O = (function() {
  return this.$$und1$f
});
ScalaJS.c.T2.prototype.$$und2__O = (function() {
  return this.$$und2$f
});
ScalaJS.c.T2.prototype.toString__T = (function() {
  return (((("(" + this.$$und1__O()) + ",") + this.$$und2__O()) + ")")
});
ScalaJS.c.T2.prototype.productPrefix__T = (function() {
  return "Tuple2"
});
ScalaJS.c.T2.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.T2.prototype.canEqual__O__Z = (function(x$1) {
  return ScalaJS.is.T2(x$1)
});
ScalaJS.c.T2.prototype.hashCode__I = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undhashCode__s_Product__I(this)
});
ScalaJS.c.T2.prototype.equals__O__Z = (function(x$1) {
  if ((this === x$1)) {
    return true
  } else {
    var x1 = x$1;
    matchEnd4: {
      if (ScalaJS.is.T2(x1)) {
        var jsx$1 = true;
        break matchEnd4
      };
      var jsx$1 = false;
      break matchEnd4
    };
    if (jsx$1) {
      var Tuple2$1 = ScalaJS.as.T2(x$1);
      return ((ScalaJS.anyEqEq(this.$$und1__O(), Tuple2$1.$$und1__O()) && ScalaJS.anyEqEq(this.$$und2__O(), Tuple2$1.$$und2__O())) && Tuple2$1.canEqual__O__Z(this))
    } else {
      return false
    }
  }
});
ScalaJS.c.T2.prototype.$$und2$mcZ$sp__Z = (function() {
  return ScalaJS.uZ(this.$$und2__O())
});
ScalaJS.c.T2.prototype.init___O__O = (function(_1, _2) {
  this.$$und1$f = _1;
  this.$$und2$f = _2;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  ScalaJS.i.s_Product2$class__$init$__s_Product2__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.T2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.T2)))
});
ScalaJS.as.T2 = (function(obj) {
  if ((ScalaJS.is.T2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Tuple2")
  }
});
ScalaJS.isArrayOf.T2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.T2)))
});
ScalaJS.asArrayOf.T2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.T2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Tuple2;", depth)
  }
});
ScalaJS.d.T2 = new ScalaJS.ClassTypeData({
  T2: 0
}, false, "scala.Tuple2", ScalaJS.d.O, {
  T2: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product2: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.T2.prototype.$classData = ScalaJS.d.T2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.T5 = (function() {
  ScalaJS.c.O.call(this);
  this.$$und1$1 = null;
  this.$$und2$1 = null;
  this.$$und3$1 = null;
  this.$$und4$1 = null;
  this.$$und5$1 = null
});
ScalaJS.c.T5.prototype = new ScalaJS.h.O();
ScalaJS.c.T5.prototype.constructor = ScalaJS.c.T5;
/** @constructor */
ScalaJS.h.T5 = (function() {
  /*<skip>*/
});
ScalaJS.h.T5.prototype = ScalaJS.c.T5.prototype;
ScalaJS.c.T5.prototype.productArity__I = (function() {
  return ScalaJS.i.s_Product5$class__productArity__s_Product5__I(this)
});
ScalaJS.c.T5.prototype.productElement__I__O = (function(n) {
  return ScalaJS.i.s_Product5$class__productElement__s_Product5__I__O(this, n)
});
ScalaJS.c.T5.prototype.$$und1__O = (function() {
  return this.$$und1$1
});
ScalaJS.c.T5.prototype.$$und2__O = (function() {
  return this.$$und2$1
});
ScalaJS.c.T5.prototype.$$und3__O = (function() {
  return this.$$und3$1
});
ScalaJS.c.T5.prototype.$$und4__O = (function() {
  return this.$$und4$1
});
ScalaJS.c.T5.prototype.$$und5__O = (function() {
  return this.$$und5$1
});
ScalaJS.c.T5.prototype.toString__T = (function() {
  return (((((((((("(" + this.$$und1__O()) + ",") + this.$$und2__O()) + ",") + this.$$und3__O()) + ",") + this.$$und4__O()) + ",") + this.$$und5__O()) + ")")
});
ScalaJS.c.T5.prototype.productPrefix__T = (function() {
  return "Tuple5"
});
ScalaJS.c.T5.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.T5.prototype.canEqual__O__Z = (function(x$1) {
  return ScalaJS.is.T5(x$1)
});
ScalaJS.c.T5.prototype.hashCode__I = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undhashCode__s_Product__I(this)
});
ScalaJS.c.T5.prototype.equals__O__Z = (function(x$1) {
  if ((this === x$1)) {
    return true
  } else {
    var x1 = x$1;
    matchEnd4: {
      if (ScalaJS.is.T5(x1)) {
        var jsx$1 = true;
        break matchEnd4
      };
      var jsx$1 = false;
      break matchEnd4
    };
    if (jsx$1) {
      var Tuple5$1 = ScalaJS.as.T5(x$1);
      return (((((ScalaJS.anyEqEq(this.$$und1__O(), Tuple5$1.$$und1__O()) && ScalaJS.anyEqEq(this.$$und2__O(), Tuple5$1.$$und2__O())) && ScalaJS.anyEqEq(this.$$und3__O(), Tuple5$1.$$und3__O())) && ScalaJS.anyEqEq(this.$$und4__O(), Tuple5$1.$$und4__O())) && ScalaJS.anyEqEq(this.$$und5__O(), Tuple5$1.$$und5__O())) && Tuple5$1.canEqual__O__Z(this))
    } else {
      return false
    }
  }
});
ScalaJS.c.T5.prototype.init___O__O__O__O__O = (function(_1, _2, _3, _4, _5) {
  this.$$und1$1 = _1;
  this.$$und2$1 = _2;
  this.$$und3$1 = _3;
  this.$$und4$1 = _4;
  this.$$und5$1 = _5;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  ScalaJS.i.s_Product5$class__$init$__s_Product5__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.T5 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.T5)))
});
ScalaJS.as.T5 = (function(obj) {
  if ((ScalaJS.is.T5(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Tuple5")
  }
});
ScalaJS.isArrayOf.T5 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.T5)))
});
ScalaJS.asArrayOf.T5 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.T5(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Tuple5;", depth)
  }
});
ScalaJS.d.T5 = new ScalaJS.ClassTypeData({
  T5: 0
}, false, "scala.Tuple5", ScalaJS.d.O, {
  T5: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product5: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.T5.prototype.$classData = ScalaJS.d.T5;
/*<skip>*/;
ScalaJS.is.jl_Appendable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Appendable)))
});
ScalaJS.as.jl_Appendable = (function(obj) {
  if ((ScalaJS.is.jl_Appendable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Appendable")
  }
});
ScalaJS.isArrayOf.jl_Appendable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Appendable)))
});
ScalaJS.asArrayOf.jl_Appendable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Appendable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Appendable;", depth)
  }
});
ScalaJS.d.jl_Appendable = new ScalaJS.ClassTypeData({
  jl_Appendable: 0
}, true, "java.lang.Appendable", undefined, {
  jl_Appendable: 1,
  O: 1
});
ScalaJS.isArrayOf.jl_Boolean = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Boolean)))
});
ScalaJS.asArrayOf.jl_Boolean = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Boolean(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Boolean;", depth)
  }
});
ScalaJS.d.jl_Boolean = new ScalaJS.ClassTypeData({
  jl_Boolean: 0
}, false, "java.lang.Boolean", undefined, {
  jl_Boolean: 1,
  jl_Comparable: 1,
  O: 1
}, (function(x) {
  return (typeof(x) === "boolean")
}));
/** @constructor */
ScalaJS.c.jl_Boolean$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.TRUE$1 = null;
  this.FALSE$1 = null
});
ScalaJS.c.jl_Boolean$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Boolean$.prototype.constructor = ScalaJS.c.jl_Boolean$;
/** @constructor */
ScalaJS.h.jl_Boolean$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Boolean$.prototype = ScalaJS.c.jl_Boolean$.prototype;
ScalaJS.c.jl_Boolean$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Boolean$.prototype.TRUE__jl_Boolean = (function() {
  return this.TRUE$1
});
ScalaJS.c.jl_Boolean$.prototype.FALSE__jl_Boolean = (function() {
  return this.FALSE$1
});
ScalaJS.c.jl_Boolean$.prototype.valueOf__Z__jl_Boolean = (function(booleanValue) {
  if (booleanValue) {
    return this.TRUE__jl_Boolean()
  } else {
    return this.FALSE__jl_Boolean()
  }
});
ScalaJS.c.jl_Boolean$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Boolean = this;
  this.TYPE$1 = ScalaJS.d.Z.getClassOf();
  this.TRUE$1 = true;
  this.FALSE$1 = false;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Boolean$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Boolean$)))
});
ScalaJS.as.jl_Boolean$ = (function(obj) {
  if ((ScalaJS.is.jl_Boolean$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Boolean$")
  }
});
ScalaJS.isArrayOf.jl_Boolean$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Boolean$)))
});
ScalaJS.asArrayOf.jl_Boolean$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Boolean$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Boolean$;", depth)
  }
});
ScalaJS.d.jl_Boolean$ = new ScalaJS.ClassTypeData({
  jl_Boolean$: 0
}, false, "java.lang.Boolean$", ScalaJS.d.O, {
  jl_Boolean$: 1,
  O: 1
});
ScalaJS.c.jl_Boolean$.prototype.$classData = ScalaJS.d.jl_Boolean$;
ScalaJS.n.jl_Boolean = undefined;
ScalaJS.m.jl_Boolean = (function() {
  if ((!ScalaJS.n.jl_Boolean)) {
    ScalaJS.n.jl_Boolean = new ScalaJS.c.jl_Boolean$().init___()
  };
  return ScalaJS.n.jl_Boolean
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Byte$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.MIN$undVALUE$1 = 0;
  this.MAX$undVALUE$1 = 0;
  this.SIZE$1 = 0
});
ScalaJS.c.jl_Byte$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Byte$.prototype.constructor = ScalaJS.c.jl_Byte$;
/** @constructor */
ScalaJS.h.jl_Byte$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Byte$.prototype = ScalaJS.c.jl_Byte$.prototype;
ScalaJS.c.jl_Byte$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Byte$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Byte = this;
  this.TYPE$1 = ScalaJS.d.B.getClassOf();
  this.MIN$undVALUE$1 = -128;
  this.MAX$undVALUE$1 = 127;
  this.SIZE$1 = 8;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Byte$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Byte$)))
});
ScalaJS.as.jl_Byte$ = (function(obj) {
  if ((ScalaJS.is.jl_Byte$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Byte$")
  }
});
ScalaJS.isArrayOf.jl_Byte$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Byte$)))
});
ScalaJS.asArrayOf.jl_Byte$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Byte$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Byte$;", depth)
  }
});
ScalaJS.d.jl_Byte$ = new ScalaJS.ClassTypeData({
  jl_Byte$: 0
}, false, "java.lang.Byte$", ScalaJS.d.O, {
  jl_Byte$: 1,
  O: 1
});
ScalaJS.c.jl_Byte$.prototype.$classData = ScalaJS.d.jl_Byte$;
ScalaJS.n.jl_Byte = undefined;
ScalaJS.m.jl_Byte = (function() {
  if ((!ScalaJS.n.jl_Byte)) {
    ScalaJS.n.jl_Byte = new ScalaJS.c.jl_Byte$().init___()
  };
  return ScalaJS.n.jl_Byte
});
/*<skip>*/;
ScalaJS.is.jl_CharSequence = (function(obj) {
  return (!(!(((obj && obj.$classData) && obj.$classData.ancestors.jl_CharSequence) || (typeof(obj) === "string"))))
});
ScalaJS.as.jl_CharSequence = (function(obj) {
  if ((ScalaJS.is.jl_CharSequence(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.CharSequence")
  }
});
ScalaJS.isArrayOf.jl_CharSequence = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_CharSequence)))
});
ScalaJS.asArrayOf.jl_CharSequence = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_CharSequence(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.CharSequence;", depth)
  }
});
ScalaJS.d.jl_CharSequence = new ScalaJS.ClassTypeData({
  jl_CharSequence: 0
}, true, "java.lang.CharSequence", undefined, {
  jl_CharSequence: 1,
  O: 1
}, ScalaJS.is.jl_CharSequence);
/** @constructor */
ScalaJS.c.jl_Character = (function() {
  ScalaJS.c.O.call(this);
  this.value$1 = 0
});
ScalaJS.c.jl_Character.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Character.prototype.constructor = ScalaJS.c.jl_Character;
/** @constructor */
ScalaJS.h.jl_Character = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Character.prototype = ScalaJS.c.jl_Character.prototype;
ScalaJS.c.jl_Character.prototype.value__p1__C = (function() {
  return this.value$1
});
ScalaJS.c.jl_Character.prototype.charValue__C = (function() {
  return this.value__p1__C()
});
ScalaJS.c.jl_Character.prototype.equals__O__Z = (function(that) {
  return (ScalaJS.is.jl_Character(that) && (this.value__p1__C() === ScalaJS.as.jl_Character(that).charValue__C()))
});
ScalaJS.c.jl_Character.prototype.toString__T = (function() {
  return ScalaJS.as.T(ScalaJS.applyMethodWithVarargs(ScalaJS.g["String"], "fromCharCode", ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [this.value__p1__C()])))))
});
ScalaJS.c.jl_Character.prototype.hashCode__I = (function() {
  return this.value__p1__C()
});
ScalaJS.c.jl_Character.prototype.init___C = (function(value) {
  this.value$1 = value;
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Character = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Character)))
});
ScalaJS.as.jl_Character = (function(obj) {
  if ((ScalaJS.is.jl_Character(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Character")
  }
});
ScalaJS.isArrayOf.jl_Character = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Character)))
});
ScalaJS.asArrayOf.jl_Character = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Character(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Character;", depth)
  }
});
ScalaJS.d.jl_Character = new ScalaJS.ClassTypeData({
  jl_Character: 0
}, false, "java.lang.Character", ScalaJS.d.O, {
  jl_Character: 1,
  jl_Comparable: 1,
  O: 1
});
ScalaJS.c.jl_Character.prototype.$classData = ScalaJS.d.jl_Character;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Character$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.MIN$undVALUE$1 = 0;
  this.MAX$undVALUE$1 = 0;
  this.LOWERCASE$undLETTER$1 = 0;
  this.UPPERCASE$undLETTER$1 = 0;
  this.OTHER$undLETTER$1 = 0;
  this.TITLECASE$undLETTER$1 = 0;
  this.LETTER$undNUMBER$1 = 0;
  this.COMBINING$undSPACING$undMARK$1 = 0;
  this.ENCLOSING$undMARK$1 = 0;
  this.NON$undSPACING$undMARK$1 = 0;
  this.MODIFIER$undLETTER$1 = 0;
  this.DECIMAL$undDIGIT$undNUMBER$1 = 0;
  this.SURROGATE$1 = 0;
  this.MIN$undRADIX$1 = 0;
  this.MAX$undRADIX$1 = 0;
  this.MIN$undHIGH$undSURROGATE$1 = 0;
  this.MAX$undHIGH$undSURROGATE$1 = 0;
  this.MIN$undLOW$undSURROGATE$1 = 0;
  this.MAX$undLOW$undSURROGATE$1 = 0;
  this.MIN$undSURROGATE$1 = 0;
  this.MAX$undSURROGATE$1 = 0
});
ScalaJS.c.jl_Character$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Character$.prototype.constructor = ScalaJS.c.jl_Character$;
/** @constructor */
ScalaJS.h.jl_Character$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Character$.prototype = ScalaJS.c.jl_Character$.prototype;
ScalaJS.c.jl_Character$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Character$.prototype.MIN$undRADIX__I = (function() {
  return this.MIN$undRADIX$1
});
ScalaJS.c.jl_Character$.prototype.MAX$undRADIX__I = (function() {
  return this.MAX$undRADIX$1
});
ScalaJS.c.jl_Character$.prototype.MIN$undHIGH$undSURROGATE__C = (function() {
  return this.MIN$undHIGH$undSURROGATE$1
});
ScalaJS.c.jl_Character$.prototype.MAX$undHIGH$undSURROGATE__C = (function() {
  return this.MAX$undHIGH$undSURROGATE$1
});
ScalaJS.c.jl_Character$.prototype.MIN$undLOW$undSURROGATE__C = (function() {
  return this.MIN$undLOW$undSURROGATE$1
});
ScalaJS.c.jl_Character$.prototype.MAX$undLOW$undSURROGATE__C = (function() {
  return this.MAX$undLOW$undSURROGATE$1
});
ScalaJS.c.jl_Character$.prototype.digit__C__I__I = (function(c, radix) {
  if (((radix > this.MAX$undRADIX__I()) || (radix < this.MIN$undRADIX__I()))) {
    return -1
  } else {
    if ((((c >= 48) && (c <= 57)) && (((c - 48) | 0) < radix))) {
      return ((c - 48) | 0)
    } else {
      if ((((c >= 65) && (c <= 90)) && (((c - 65) | 0) < ((radix - 10) | 0)))) {
        return ((((c - 65) | 0) + 10) | 0)
      } else {
        if ((((c >= 97) && (c <= 122)) && (((c - 97) | 0) < ((radix - 10) | 0)))) {
          return ((((c - 97) | 0) + 10) | 0)
        } else {
          if ((((c >= 65313) && (c <= 65338)) && (((c - 65313) | 0) < ((radix - 10) | 0)))) {
            return ((((c - 65313) | 0) + 10) | 0)
          } else {
            if ((((c >= 65345) && (c <= 65370)) && (((c - 65345) | 0) < ((radix - 10) | 0)))) {
              return ((((c - 65313) | 0) + 10) | 0)
            } else {
              return -1
            }
          }
        }
      }
    }
  }
});
ScalaJS.c.jl_Character$.prototype.isHighSurrogate__C__Z = (function(c) {
  return ((c >= this.MIN$undHIGH$undSURROGATE__C()) && (c <= this.MAX$undHIGH$undSURROGATE__C()))
});
ScalaJS.c.jl_Character$.prototype.isLowSurrogate__C__Z = (function(c) {
  return ((c >= this.MIN$undLOW$undSURROGATE__C()) && (c <= this.MAX$undLOW$undSURROGATE__C()))
});
ScalaJS.c.jl_Character$.prototype.isUpperCase__C__Z = (function(c) {
  return (this.toUpperCase__C__C(c) === c)
});
ScalaJS.c.jl_Character$.prototype.toUpperCase__C__C = (function(c) {
  return ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(ScalaJS.i.sjsr_RuntimeString$class__toUpperCase__sjsr_RuntimeString__T(ScalaJS.objectToString(ScalaJS.bC(c)))), 0)
});
ScalaJS.c.jl_Character$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Character = this;
  this.TYPE$1 = ScalaJS.d.C.getClassOf();
  this.MIN$undVALUE$1 = 0;
  this.MAX$undVALUE$1 = 255;
  this.LOWERCASE$undLETTER$1 = 0;
  this.UPPERCASE$undLETTER$1 = 0;
  this.OTHER$undLETTER$1 = 0;
  this.TITLECASE$undLETTER$1 = 0;
  this.LETTER$undNUMBER$1 = 0;
  this.COMBINING$undSPACING$undMARK$1 = 0;
  this.ENCLOSING$undMARK$1 = 0;
  this.NON$undSPACING$undMARK$1 = 0;
  this.MODIFIER$undLETTER$1 = 0;
  this.DECIMAL$undDIGIT$undNUMBER$1 = 0;
  this.SURROGATE$1 = 0;
  this.MIN$undRADIX$1 = 2;
  this.MAX$undRADIX$1 = 36;
  this.MIN$undHIGH$undSURROGATE$1 = 55296;
  this.MAX$undHIGH$undSURROGATE$1 = 56319;
  this.MIN$undLOW$undSURROGATE$1 = 56320;
  this.MAX$undLOW$undSURROGATE$1 = 57343;
  this.MIN$undSURROGATE$1 = this.MIN$undHIGH$undSURROGATE__C();
  this.MAX$undSURROGATE$1 = this.MAX$undLOW$undSURROGATE__C();
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Character$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Character$)))
});
ScalaJS.as.jl_Character$ = (function(obj) {
  if ((ScalaJS.is.jl_Character$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Character$")
  }
});
ScalaJS.isArrayOf.jl_Character$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Character$)))
});
ScalaJS.asArrayOf.jl_Character$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Character$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Character$;", depth)
  }
});
ScalaJS.d.jl_Character$ = new ScalaJS.ClassTypeData({
  jl_Character$: 0
}, false, "java.lang.Character$", ScalaJS.d.O, {
  jl_Character$: 1,
  O: 1
});
ScalaJS.c.jl_Character$.prototype.$classData = ScalaJS.d.jl_Character$;
ScalaJS.n.jl_Character = undefined;
ScalaJS.m.jl_Character = (function() {
  if ((!ScalaJS.n.jl_Character)) {
    ScalaJS.n.jl_Character = new ScalaJS.c.jl_Character$().init___()
  };
  return ScalaJS.n.jl_Character
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Class = (function() {
  ScalaJS.c.O.call(this);
  this.data$1 = null
});
ScalaJS.c.jl_Class.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Class.prototype.constructor = ScalaJS.c.jl_Class;
/** @constructor */
ScalaJS.h.jl_Class = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Class.prototype = ScalaJS.c.jl_Class.prototype;
ScalaJS.c.jl_Class.prototype.toString__T = (function() {
  if (this.isInterface__Z()) {
    var jsx$1 = "interface "
  } else {
    if (this.isPrimitive__Z()) {
      var jsx$1 = ""
    } else {
      var jsx$1 = "class "
    }
  };
  return (("" + jsx$1) + this.getName__T())
});
ScalaJS.c.jl_Class.prototype.isInstance__O__Z = (function(obj) {
  return ScalaJS.uZ(this.data$1["isInstance"](obj))
});
ScalaJS.c.jl_Class.prototype.isAssignableFrom__jl_Class__Z = (function(that) {
  if ((this.isPrimitive__Z() || that.isPrimitive__Z())) {
    return (this === that)
  } else {
    return this.isInstance__O__Z(that.getFakeInstance__p1__O())
  }
});
ScalaJS.c.jl_Class.prototype.getFakeInstance__p1__O = (function() {
  return ScalaJS.as.O(this.data$1["getFakeInstance"]())
});
ScalaJS.c.jl_Class.prototype.isInterface__Z = (function() {
  return ScalaJS.uZ(this.data$1["isInterface"])
});
ScalaJS.c.jl_Class.prototype.isArray__Z = (function() {
  return ScalaJS.uZ(this.data$1["isArrayClass"])
});
ScalaJS.c.jl_Class.prototype.isPrimitive__Z = (function() {
  return ScalaJS.uZ(this.data$1["isPrimitive"])
});
ScalaJS.c.jl_Class.prototype.getName__T = (function() {
  return ScalaJS.as.T(this.data$1["name"])
});
ScalaJS.c.jl_Class.prototype.getComponentType__jl_Class = (function() {
  return ScalaJS.as.jl_Class(this.data$1["getComponentType"]())
});
ScalaJS.c.jl_Class.prototype.newArrayOfThisClass__sjs_js_Array__O = (function(dimensions) {
  return ScalaJS.as.O(this.data$1["newArrayOfThisClass"](dimensions))
});
ScalaJS.c.jl_Class.prototype.init___jl_ScalaJSClassData = (function(data) {
  this.data$1 = data;
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Class = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Class)))
});
ScalaJS.as.jl_Class = (function(obj) {
  if ((ScalaJS.is.jl_Class(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Class")
  }
});
ScalaJS.isArrayOf.jl_Class = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Class)))
});
ScalaJS.asArrayOf.jl_Class = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Class(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Class;", depth)
  }
});
ScalaJS.d.jl_Class = new ScalaJS.ClassTypeData({
  jl_Class: 0
}, false, "java.lang.Class", ScalaJS.d.O, {
  jl_Class: 1,
  O: 1
});
ScalaJS.c.jl_Class.prototype.$classData = ScalaJS.d.jl_Class;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Double$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.POSITIVE$undINFINITY$1 = 0.0;
  this.NEGATIVE$undINFINITY$1 = 0.0;
  this.NaN$1 = 0.0;
  this.MAX$undVALUE$1 = 0.0;
  this.MIN$undNORMAL$1 = 0.0;
  this.MIN$undVALUE$1 = 0.0;
  this.MAX$undEXPONENT$1 = 0;
  this.MIN$undEXPONENT$1 = 0;
  this.SIZE$1 = 0
});
ScalaJS.c.jl_Double$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Double$.prototype.constructor = ScalaJS.c.jl_Double$;
/** @constructor */
ScalaJS.h.jl_Double$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Double$.prototype = ScalaJS.c.jl_Double$.prototype;
ScalaJS.c.jl_Double$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Double$.prototype.isNaN__D__Z = (function(v) {
  return ScalaJS.uZ(ScalaJS.g["isNaN"](v))
});
ScalaJS.c.jl_Double$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Double = this;
  this.TYPE$1 = ScalaJS.d.D.getClassOf();
  this.POSITIVE$undINFINITY$1 = ScalaJS.uD(ScalaJS.g["Number"]["POSITIVE_INFINITY"]);
  this.NEGATIVE$undINFINITY$1 = ScalaJS.uD(ScalaJS.g["Number"]["NEGATIVE_INFINITY"]);
  this.NaN$1 = ScalaJS.uD(ScalaJS.g["Number"]["NaN"]);
  this.MAX$undVALUE$1 = ScalaJS.uD(ScalaJS.g["Number"]["MAX_VALUE"]);
  this.MIN$undNORMAL$1 = 0.0;
  this.MIN$undVALUE$1 = ScalaJS.uD(ScalaJS.g["Number"]["MIN_VALUE"]);
  this.MAX$undEXPONENT$1 = 1023;
  this.MIN$undEXPONENT$1 = -1022;
  this.SIZE$1 = 64;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Double$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Double$)))
});
ScalaJS.as.jl_Double$ = (function(obj) {
  if ((ScalaJS.is.jl_Double$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Double$")
  }
});
ScalaJS.isArrayOf.jl_Double$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Double$)))
});
ScalaJS.asArrayOf.jl_Double$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Double$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Double$;", depth)
  }
});
ScalaJS.d.jl_Double$ = new ScalaJS.ClassTypeData({
  jl_Double$: 0
}, false, "java.lang.Double$", ScalaJS.d.O, {
  jl_Double$: 1,
  O: 1
});
ScalaJS.c.jl_Double$.prototype.$classData = ScalaJS.d.jl_Double$;
ScalaJS.n.jl_Double = undefined;
ScalaJS.m.jl_Double = (function() {
  if ((!ScalaJS.n.jl_Double)) {
    ScalaJS.n.jl_Double = new ScalaJS.c.jl_Double$().init___()
  };
  return ScalaJS.n.jl_Double
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Float$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.POSITIVE$undINFINITY$1 = 0.0;
  this.NEGATIVE$undINFINITY$1 = 0.0;
  this.NaN$1 = 0.0;
  this.MAX$undVALUE$1 = 0.0;
  this.MIN$undNORMAL$1 = 0.0;
  this.MIN$undVALUE$1 = 0.0;
  this.MAX$undEXPONENT$1 = 0;
  this.MIN$undEXPONENT$1 = 0;
  this.SIZE$1 = 0;
  this.floatStrPat$1 = null
});
ScalaJS.c.jl_Float$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Float$.prototype.constructor = ScalaJS.c.jl_Float$;
/** @constructor */
ScalaJS.h.jl_Float$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Float$.prototype = ScalaJS.c.jl_Float$.prototype;
ScalaJS.c.jl_Float$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Float$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Float = this;
  this.TYPE$1 = ScalaJS.d.F.getClassOf();
  this.POSITIVE$undINFINITY$1 = ScalaJS.uD(ScalaJS.g["Number"]["POSITIVE_INFINITY"]);
  this.NEGATIVE$undINFINITY$1 = ScalaJS.uD(ScalaJS.g["Number"]["NEGATIVE_INFINITY"]);
  this.NaN$1 = ScalaJS.uD(ScalaJS.g["Number"]["NaN"]);
  this.MAX$undVALUE$1 = ScalaJS.uD(ScalaJS.g["Number"]["MAX_VALUE"]);
  this.MIN$undNORMAL$1 = 0.0;
  this.MIN$undVALUE$1 = ScalaJS.uD(ScalaJS.g["Number"]["MIN_VALUE"]);
  this.MAX$undEXPONENT$1 = 127;
  this.MIN$undEXPONENT$1 = -126;
  this.SIZE$1 = 32;
  this.floatStrPat$1 = new ScalaJS.g["RegExp"]("^[\\x00-\\x20]*[+-]?(NaN|Infinity|(\\d+\\.?\\d*|\\.\\d+)([eE][+-]?\\d+)?)[fFdD]?[\\x00-\\x20]*$");
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Float$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Float$)))
});
ScalaJS.as.jl_Float$ = (function(obj) {
  if ((ScalaJS.is.jl_Float$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Float$")
  }
});
ScalaJS.isArrayOf.jl_Float$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Float$)))
});
ScalaJS.asArrayOf.jl_Float$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Float$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Float$;", depth)
  }
});
ScalaJS.d.jl_Float$ = new ScalaJS.ClassTypeData({
  jl_Float$: 0
}, false, "java.lang.Float$", ScalaJS.d.O, {
  jl_Float$: 1,
  O: 1
});
ScalaJS.c.jl_Float$.prototype.$classData = ScalaJS.d.jl_Float$;
ScalaJS.n.jl_Float = undefined;
ScalaJS.m.jl_Float = (function() {
  if ((!ScalaJS.n.jl_Float)) {
    ScalaJS.n.jl_Float = new ScalaJS.c.jl_Float$().init___()
  };
  return ScalaJS.n.jl_Float
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Integer$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.MIN$undVALUE$1 = 0;
  this.MAX$undVALUE$1 = 0;
  this.SIZE$1 = 0
});
ScalaJS.c.jl_Integer$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Integer$.prototype.constructor = ScalaJS.c.jl_Integer$;
/** @constructor */
ScalaJS.h.jl_Integer$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Integer$.prototype = ScalaJS.c.jl_Integer$.prototype;
ScalaJS.c.jl_Integer$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Integer$.prototype.MIN$undVALUE__I = (function() {
  return this.MIN$undVALUE$1
});
ScalaJS.c.jl_Integer$.prototype.MAX$undVALUE__I = (function() {
  return this.MAX$undVALUE$1
});
ScalaJS.c.jl_Integer$.prototype.parseInt__T__I = (function(s) {
  return this.parseInt__T__I__I(s, 10)
});
ScalaJS.c.jl_Integer$.prototype.parseInt__T__I__I = (function(s, radix) {
  if (((((s === null) || (new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T(s)).size__I() === 0)) || (radix < ScalaJS.m.jl_Character().MIN$undRADIX__I())) || (radix > ScalaJS.m.jl_Character().MAX$undRADIX__I()))) {
    this.fail$1__p1__T__sr_Nothing$(s)
  } else {
    if (((ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(s), 0) === 45) || (ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(s), 0) === 43))) {
      var i = 1
    } else {
      var i = 0
    };
    if ((new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T(s)).size__I() <= i)) {
      this.fail$1__p1__T__sr_Nothing$(s)
    } else {
      while ((i < new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T(s)).size__I())) {
        if ((ScalaJS.m.jl_Character().digit__C__I__I(ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(s), i), radix) < 0)) {
          this.fail$1__p1__T__sr_Nothing$(s)
        };
        i = ((i + 1) | 0)
      };
      var res = ScalaJS.uD(ScalaJS.g["parseInt"](s, radix));
      if (((ScalaJS.uZ(ScalaJS.g["isNaN"](res)) || (res > this.MAX$undVALUE__I())) || (res < this.MIN$undVALUE__I()))) {
        this.fail$1__p1__T__sr_Nothing$(s)
      } else {
        return (res | 0)
      }
    }
  }
});
ScalaJS.c.jl_Integer$.prototype.bitCount__I__I = (function(i) {
  var t1 = ((i - ((i >> 1) & 1431655765)) | 0);
  var t2 = (((t1 & 858993459) + ((t1 >> 2) & 858993459)) | 0);
  return (ScalaJS.imul((((t2 + (t2 >> 4)) | 0) & 252645135), 16843009) >> 24)
});
ScalaJS.c.jl_Integer$.prototype.reverseBytes__I__I = (function(i) {
  var byte3 = ((i >>> 24) | 0);
  var byte2 = (((i >>> 8) | 0) & 65280);
  var byte1 = ((i << 8) & 16711680);
  var byte0 = (i << 24);
  return (((byte0 | byte1) | byte2) | byte3)
});
ScalaJS.c.jl_Integer$.prototype.rotateLeft__I__I__I = (function(i, distance) {
  return ((i << distance) | ((i >>> ((32 - distance) | 0)) | 0))
});
ScalaJS.c.jl_Integer$.prototype.numberOfLeadingZeros__I__I = (function(i) {
  var x = i;
  x = (x | ((x >>> 1) | 0));
  x = (x | ((x >>> 2) | 0));
  x = (x | ((x >>> 4) | 0));
  x = (x | ((x >>> 8) | 0));
  x = (x | ((x >>> 16) | 0));
  return ((32 - this.bitCount__I__I(x)) | 0)
});
ScalaJS.c.jl_Integer$.prototype.numberOfTrailingZeros__I__I = (function(i) {
  return this.bitCount__I__I((((i & (-i)) - 1) | 0))
});
ScalaJS.c.jl_Integer$.prototype.toHexString__I__T = (function(i) {
  return this.toStringBase__p1__I__I__T(i, 16)
});
ScalaJS.c.jl_Integer$.prototype.toOctalString__I__T = (function(i) {
  return this.toStringBase__p1__I__I__T(i, 8)
});
ScalaJS.c.jl_Integer$.prototype.toStringBase__p1__I__I__T = (function(i, base) {
  return ScalaJS.as.T((i >>> 0)["toString"](base))
});
ScalaJS.c.jl_Integer$.prototype.fail$1__p1__T__sr_Nothing$ = (function(s$1) {
  throw new ScalaJS.c.jl_NumberFormatException().init___T(new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["For input string: \"", "\""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [s$1]))))
});
ScalaJS.c.jl_Integer$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Integer = this;
  this.TYPE$1 = ScalaJS.d.I.getClassOf();
  this.MIN$undVALUE$1 = -2147483648;
  this.MAX$undVALUE$1 = 2147483647;
  this.SIZE$1 = 32;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Integer$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Integer$)))
});
ScalaJS.as.jl_Integer$ = (function(obj) {
  if ((ScalaJS.is.jl_Integer$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Integer$")
  }
});
ScalaJS.isArrayOf.jl_Integer$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Integer$)))
});
ScalaJS.asArrayOf.jl_Integer$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Integer$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Integer$;", depth)
  }
});
ScalaJS.d.jl_Integer$ = new ScalaJS.ClassTypeData({
  jl_Integer$: 0
}, false, "java.lang.Integer$", ScalaJS.d.O, {
  jl_Integer$: 1,
  O: 1
});
ScalaJS.c.jl_Integer$.prototype.$classData = ScalaJS.d.jl_Integer$;
ScalaJS.n.jl_Integer = undefined;
ScalaJS.m.jl_Integer = (function() {
  if ((!ScalaJS.n.jl_Integer)) {
    ScalaJS.n.jl_Integer = new ScalaJS.c.jl_Integer$().init___()
  };
  return ScalaJS.n.jl_Integer
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Long$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.MIN$undVALUE$1 = ScalaJS.m.sjsr_RuntimeLong().zero__sjsr_RuntimeLong();
  this.MAX$undVALUE$1 = ScalaJS.m.sjsr_RuntimeLong().zero__sjsr_RuntimeLong();
  this.SIZE$1 = 0
});
ScalaJS.c.jl_Long$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Long$.prototype.constructor = ScalaJS.c.jl_Long$;
/** @constructor */
ScalaJS.h.jl_Long$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Long$.prototype = ScalaJS.c.jl_Long$.prototype;
ScalaJS.c.jl_Long$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Long$.prototype.valueOf__J__jl_Long = (function(longValue) {
  return longValue
});
ScalaJS.c.jl_Long$.prototype.toHexString__J__T = (function(l) {
  return this.dropLZ__p1__T__T(l.toHexString__T())
});
ScalaJS.c.jl_Long$.prototype.toOctalString__J__T = (function(l) {
  return this.dropLZ__p1__T__T(l.toOctalString__T())
});
ScalaJS.c.jl_Long$.prototype.dropLZ__p1__T__T = (function(s) {
  var i = 0;
  while (((i < ((ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(s) - 1) | 0)) && (ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(s, i) === 48))) {
    i = ((i + 1) | 0)
  };
  return ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__T(s, i)
});
ScalaJS.c.jl_Long$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Long = this;
  this.TYPE$1 = ScalaJS.d.J.getClassOf();
  this.MIN$undVALUE$1 = ScalaJS.m.sjsr_RuntimeLong().apply__I__I__I__sjsr_RuntimeLong(0, 0, 524288);
  this.MAX$undVALUE$1 = ScalaJS.m.sjsr_RuntimeLong().apply__I__I__I__sjsr_RuntimeLong(4194303, 4194303, 524287);
  this.SIZE$1 = 64;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Long$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Long$)))
});
ScalaJS.as.jl_Long$ = (function(obj) {
  if ((ScalaJS.is.jl_Long$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Long$")
  }
});
ScalaJS.isArrayOf.jl_Long$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Long$)))
});
ScalaJS.asArrayOf.jl_Long$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Long$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Long$;", depth)
  }
});
ScalaJS.d.jl_Long$ = new ScalaJS.ClassTypeData({
  jl_Long$: 0
}, false, "java.lang.Long$", ScalaJS.d.O, {
  jl_Long$: 1,
  O: 1
});
ScalaJS.c.jl_Long$.prototype.$classData = ScalaJS.d.jl_Long$;
ScalaJS.n.jl_Long = undefined;
ScalaJS.m.jl_Long = (function() {
  if ((!ScalaJS.n.jl_Long)) {
    ScalaJS.n.jl_Long = new ScalaJS.c.jl_Long$().init___()
  };
  return ScalaJS.n.jl_Long
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Math$ = (function() {
  ScalaJS.c.O.call(this);
  this.E$1 = 0.0;
  this.PI$1 = 0.0
});
ScalaJS.c.jl_Math$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Math$.prototype.constructor = ScalaJS.c.jl_Math$;
/** @constructor */
ScalaJS.h.jl_Math$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Math$.prototype = ScalaJS.c.jl_Math$.prototype;
ScalaJS.c.jl_Math$.prototype.max__I__I__I = (function(a, b) {
  return ScalaJS.uI(ScalaJS.applyMethodWithVarargs(ScalaJS.g["Math"], "max", [a]["concat"](ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [b]))))))
});
ScalaJS.c.jl_Math$.prototype.min__I__I__I = (function(a, b) {
  return ScalaJS.uI(ScalaJS.applyMethodWithVarargs(ScalaJS.g["Math"], "min", [a]["concat"](ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [b]))))))
});
ScalaJS.c.jl_Math$.prototype.random__D = (function() {
  return ScalaJS.uD(ScalaJS.g["Math"]["random"]())
});
ScalaJS.c.jl_Math$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Math = this;
  this.E$1 = ScalaJS.uD(ScalaJS.g["Math"]["E"]);
  this.PI$1 = ScalaJS.uD(ScalaJS.g["Math"]["PI"]);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Math$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Math$)))
});
ScalaJS.as.jl_Math$ = (function(obj) {
  if ((ScalaJS.is.jl_Math$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Math$")
  }
});
ScalaJS.isArrayOf.jl_Math$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Math$)))
});
ScalaJS.asArrayOf.jl_Math$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Math$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Math$;", depth)
  }
});
ScalaJS.d.jl_Math$ = new ScalaJS.ClassTypeData({
  jl_Math$: 0
}, false, "java.lang.Math$", ScalaJS.d.O, {
  jl_Math$: 1,
  O: 1
});
ScalaJS.c.jl_Math$.prototype.$classData = ScalaJS.d.jl_Math$;
ScalaJS.n.jl_Math = undefined;
ScalaJS.m.jl_Math = (function() {
  if ((!ScalaJS.n.jl_Math)) {
    ScalaJS.n.jl_Math = new ScalaJS.c.jl_Math$().init___()
  };
  return ScalaJS.n.jl_Math
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Number = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.jl_Number.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Number.prototype.constructor = ScalaJS.c.jl_Number;
/** @constructor */
ScalaJS.h.jl_Number = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Number.prototype = ScalaJS.c.jl_Number.prototype;
/*<skip>*/;
ScalaJS.is.jl_Number = (function(obj) {
  return (!(!(((obj && obj.$classData) && obj.$classData.ancestors.jl_Number) || (typeof(obj) === "number"))))
});
ScalaJS.as.jl_Number = (function(obj) {
  if ((ScalaJS.is.jl_Number(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Number")
  }
});
ScalaJS.isArrayOf.jl_Number = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Number)))
});
ScalaJS.asArrayOf.jl_Number = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Number(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Number;", depth)
  }
});
ScalaJS.d.jl_Number = new ScalaJS.ClassTypeData({
  jl_Number: 0
}, false, "java.lang.Number", ScalaJS.d.O, {
  jl_Number: 1,
  O: 1
}, ScalaJS.is.jl_Number);
ScalaJS.c.jl_Number.prototype.$classData = ScalaJS.d.jl_Number;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Short$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null;
  this.MIN$undVALUE$1 = 0;
  this.MAX$undVALUE$1 = 0;
  this.SIZE$1 = 0
});
ScalaJS.c.jl_Short$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Short$.prototype.constructor = ScalaJS.c.jl_Short$;
/** @constructor */
ScalaJS.h.jl_Short$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Short$.prototype = ScalaJS.c.jl_Short$.prototype;
ScalaJS.c.jl_Short$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Short$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Short = this;
  this.TYPE$1 = ScalaJS.d.S.getClassOf();
  this.MIN$undVALUE$1 = -32768;
  this.MAX$undVALUE$1 = 32767;
  this.SIZE$1 = 16;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Short$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Short$)))
});
ScalaJS.as.jl_Short$ = (function(obj) {
  if ((ScalaJS.is.jl_Short$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Short$")
  }
});
ScalaJS.isArrayOf.jl_Short$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Short$)))
});
ScalaJS.asArrayOf.jl_Short$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Short$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Short$;", depth)
  }
});
ScalaJS.d.jl_Short$ = new ScalaJS.ClassTypeData({
  jl_Short$: 0
}, false, "java.lang.Short$", ScalaJS.d.O, {
  jl_Short$: 1,
  O: 1
});
ScalaJS.c.jl_Short$.prototype.$classData = ScalaJS.d.jl_Short$;
ScalaJS.n.jl_Short = undefined;
ScalaJS.m.jl_Short = (function() {
  if ((!ScalaJS.n.jl_Short)) {
    ScalaJS.n.jl_Short = new ScalaJS.c.jl_Short$().init___()
  };
  return ScalaJS.n.jl_Short
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_StringBuilder = (function() {
  ScalaJS.c.O.call(this);
  this.content$1 = null
});
ScalaJS.c.jl_StringBuilder.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_StringBuilder.prototype.constructor = ScalaJS.c.jl_StringBuilder;
/** @constructor */
ScalaJS.h.jl_StringBuilder = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_StringBuilder.prototype = ScalaJS.c.jl_StringBuilder.prototype;
ScalaJS.c.jl_StringBuilder.prototype.content__p1__T = (function() {
  return this.content$1
});
ScalaJS.c.jl_StringBuilder.prototype.content$und$eq__p1__T__V = (function(x$1) {
  this.content$1 = x$1
});
ScalaJS.c.jl_StringBuilder.prototype.append__T__jl_StringBuilder = (function(s) {
  var jsx$3 = this.content__p1__T();
  if ((s === null)) {
    var jsx$2 = "null"
  } else {
    var jsx$2 = s
  };
  var jsx$1 = (("" + jsx$3) + jsx$2);
  this.content$und$eq__p1__T__V(jsx$1);
  return this
});
ScalaJS.c.jl_StringBuilder.prototype.append__C__jl_StringBuilder = (function(c) {
  return this.append__T__jl_StringBuilder(ScalaJS.objectToString(ScalaJS.bC(c)))
});
ScalaJS.c.jl_StringBuilder.prototype.append__O__jl_StringBuilder = (function(obj) {
  if ((obj === null)) {
    return this.append__T__jl_StringBuilder(null)
  } else {
    return this.append__T__jl_StringBuilder(ScalaJS.objectToString(obj))
  }
});
ScalaJS.c.jl_StringBuilder.prototype.append__jl_CharSequence__jl_StringBuilder = (function(csq) {
  return this.append__O__jl_StringBuilder(csq)
});
ScalaJS.c.jl_StringBuilder.prototype.append__jl_CharSequence__I__I__jl_StringBuilder = (function(csq, start, end) {
  if ((csq === null)) {
    return this.append__jl_CharSequence__I__I__jl_StringBuilder("null", start, end)
  } else {
    return this.append__T__jl_StringBuilder(ScalaJS.objectToString(ScalaJS.charSequenceSubSequence(csq, start, end)))
  }
});
ScalaJS.c.jl_StringBuilder.prototype.toString__T = (function() {
  return this.content__p1__T()
});
ScalaJS.c.jl_StringBuilder.prototype.length__I = (function() {
  return ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(this.content__p1__T())
});
ScalaJS.c.jl_StringBuilder.prototype.charAt__I__C = (function(index) {
  return ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(this.content__p1__T(), index)
});
ScalaJS.c.jl_StringBuilder.prototype.subSequence__I__I__jl_CharSequence = (function(start, end) {
  return this.substring__I__I__T(start, end)
});
ScalaJS.c.jl_StringBuilder.prototype.substring__I__I__T = (function(start, end) {
  return ScalaJS.i.sjsr_RuntimeString$class__substring__sjsr_RuntimeString__I__I__T(this.content__p1__T(), start, end)
});
ScalaJS.c.jl_StringBuilder.prototype.reverse__jl_StringBuilder = (function() {
  var original = this.content__p1__T();
  var result = "";
  var i = 0;
  while ((i < ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(original))) {
    var c = ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(original, i);
    if ((ScalaJS.m.jl_Character().isHighSurrogate__C__Z(c) && (((i + 1) | 0) < ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(original)))) {
      var c2 = ScalaJS.i.sjsr_RuntimeString$class__charAt__sjsr_RuntimeString__I__C(original, ((i + 1) | 0));
      if (ScalaJS.m.jl_Character().isLowSurrogate__C__Z(c2)) {
        result = ((("" + ScalaJS.objectToString(ScalaJS.bC(c))) + ScalaJS.objectToString(ScalaJS.bC(c2))) + result);
        i = ((i + 2) | 0)
      } else {
        result = (("" + ScalaJS.objectToString(ScalaJS.bC(c))) + result);
        i = ((i + 1) | 0)
      }
    } else {
      result = (("" + ScalaJS.objectToString(ScalaJS.bC(c))) + result);
      i = ((i + 1) | 0)
    }
  };
  this.content$und$eq__p1__T__V(result);
  return this
});
ScalaJS.c.jl_StringBuilder.prototype.append__jl_CharSequence__jl_Appendable = (function(csq) {
  return this.append__jl_CharSequence__jl_StringBuilder(csq)
});
ScalaJS.c.jl_StringBuilder.prototype.append__C__jl_Appendable = (function(c) {
  return this.append__C__jl_StringBuilder(c)
});
ScalaJS.c.jl_StringBuilder.prototype.init___T = (function(content) {
  this.content$1 = content;
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
ScalaJS.c.jl_StringBuilder.prototype.init___ = (function() {
  ScalaJS.c.jl_StringBuilder.prototype.init___T.call(this, "");
  return this
});
ScalaJS.c.jl_StringBuilder.prototype.init___I = (function(initialCapacity) {
  ScalaJS.c.jl_StringBuilder.prototype.init___T.call(this, "");
  return this
});
ScalaJS.c.jl_StringBuilder.prototype.init___jl_CharSequence = (function(csq) {
  ScalaJS.c.jl_StringBuilder.prototype.init___T.call(this, ScalaJS.objectToString(csq));
  return this
});
/*<skip>*/;
ScalaJS.is.jl_StringBuilder = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_StringBuilder)))
});
ScalaJS.as.jl_StringBuilder = (function(obj) {
  if ((ScalaJS.is.jl_StringBuilder(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.StringBuilder")
  }
});
ScalaJS.isArrayOf.jl_StringBuilder = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_StringBuilder)))
});
ScalaJS.asArrayOf.jl_StringBuilder = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_StringBuilder(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.StringBuilder;", depth)
  }
});
ScalaJS.d.jl_StringBuilder = new ScalaJS.ClassTypeData({
  jl_StringBuilder: 0
}, false, "java.lang.StringBuilder", ScalaJS.d.O, {
  jl_StringBuilder: 1,
  Ljava_io_Serializable: 1,
  jl_Appendable: 1,
  jl_CharSequence: 1,
  O: 1
});
ScalaJS.c.jl_StringBuilder.prototype.$classData = ScalaJS.d.jl_StringBuilder;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_System$ = (function() {
  ScalaJS.c.O.call(this);
  this.out$1 = null;
  this.err$1 = null;
  this.in$1 = null;
  this.getHighPrecisionTime$1 = null
});
ScalaJS.c.jl_System$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_System$.prototype.constructor = ScalaJS.c.jl_System$;
/** @constructor */
ScalaJS.h.jl_System$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_System$.prototype = ScalaJS.c.jl_System$.prototype;
ScalaJS.c.jl_System$.prototype.out__Ljava_io_PrintStream = (function() {
  return this.out$1
});
ScalaJS.c.jl_System$.prototype.err__Ljava_io_PrintStream = (function() {
  return this.err$1
});
ScalaJS.c.jl_System$.prototype.identityHashCode__O__I = (function(x) {
  return 42
});
ScalaJS.c.jl_System$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_System = this;
  this.out$1 = ScalaJS.m.jl_StandardOutPrintStream();
  this.err$1 = ScalaJS.m.jl_StandardErrPrintStream();
  this.in$1 = null;
  if ((!ScalaJS.uZ((!ScalaJS.g["performance"])))) {
    if ((!ScalaJS.uZ((!ScalaJS.g["performance"]["now"])))) {
      var jsx$1 = (function() {
        return (function() {
          return ScalaJS.uD(ScalaJS.g["performance"]["now"]())
        })
      })()
    } else {
      if ((!ScalaJS.uZ((!ScalaJS.g["performance"]["webkitNow"])))) {
        var jsx$1 = (function() {
          return (function() {
            return ScalaJS.uD(ScalaJS.g["performance"]["webkitNow"]())
          })
        })()
      } else {
        var jsx$1 = (function() {
          return (function() {
            return ScalaJS.uD(new ScalaJS.g["Date"]()["getTime"]())
          })
        })()
      }
    }
  } else {
    var jsx$1 = (function() {
      return (function() {
        return ScalaJS.uD(new ScalaJS.g["Date"]()["getTime"]())
      })
    })()
  };
  this.getHighPrecisionTime$1 = jsx$1;
  return this
});
/*<skip>*/;
ScalaJS.is.jl_System$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_System$)))
});
ScalaJS.as.jl_System$ = (function(obj) {
  if ((ScalaJS.is.jl_System$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.System$")
  }
});
ScalaJS.isArrayOf.jl_System$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_System$)))
});
ScalaJS.asArrayOf.jl_System$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_System$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.System$;", depth)
  }
});
ScalaJS.d.jl_System$ = new ScalaJS.ClassTypeData({
  jl_System$: 0
}, false, "java.lang.System$", ScalaJS.d.O, {
  jl_System$: 1,
  O: 1
});
ScalaJS.c.jl_System$.prototype.$classData = ScalaJS.d.jl_System$;
ScalaJS.n.jl_System = undefined;
ScalaJS.m.jl_System = (function() {
  if ((!ScalaJS.n.jl_System)) {
    ScalaJS.n.jl_System = new ScalaJS.c.jl_System$().init___()
  };
  return ScalaJS.n.jl_System
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_ThreadLocal = (function() {
  ScalaJS.c.O.call(this);
  this.hasValue$1 = false;
  this.i$1 = null;
  this.v$1 = null;
  this.m$1 = null
});
ScalaJS.c.jl_ThreadLocal.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_ThreadLocal.prototype.constructor = ScalaJS.c.jl_ThreadLocal;
/** @constructor */
ScalaJS.h.jl_ThreadLocal = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_ThreadLocal.prototype = ScalaJS.c.jl_ThreadLocal.prototype;
ScalaJS.c.jl_ThreadLocal.prototype.hasValue__p1__Z = (function() {
  return this.hasValue$1
});
ScalaJS.c.jl_ThreadLocal.prototype.hasValue$und$eq__p1__Z__V = (function(x$1) {
  this.hasValue$1 = x$1
});
ScalaJS.c.jl_ThreadLocal.prototype.v__p1__O = (function() {
  return this.v$1
});
ScalaJS.c.jl_ThreadLocal.prototype.v$und$eq__p1__O__V = (function(x$1) {
  this.v$1 = x$1
});
ScalaJS.c.jl_ThreadLocal.prototype.get__O = (function() {
  if ((!this.hasValue__p1__Z())) {
    this.set__O__V(this.initialValue__O())
  };
  return this.v__p1__O()
});
ScalaJS.c.jl_ThreadLocal.prototype.set__O__V = (function(o) {
  this.v$und$eq__p1__O__V(o);
  this.hasValue$und$eq__p1__Z__V(true)
});
ScalaJS.c.jl_ThreadLocal.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  this.hasValue$1 = false;
  this.m$1 = new ScalaJS.c.jl_ThreadLocal$ThreadLocalMap().init___();
  return this
});
/*<skip>*/;
ScalaJS.is.jl_ThreadLocal = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_ThreadLocal)))
});
ScalaJS.as.jl_ThreadLocal = (function(obj) {
  if ((ScalaJS.is.jl_ThreadLocal(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.ThreadLocal")
  }
});
ScalaJS.isArrayOf.jl_ThreadLocal = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_ThreadLocal)))
});
ScalaJS.asArrayOf.jl_ThreadLocal = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_ThreadLocal(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.ThreadLocal;", depth)
  }
});
ScalaJS.d.jl_ThreadLocal = new ScalaJS.ClassTypeData({
  jl_ThreadLocal: 0
}, false, "java.lang.ThreadLocal", ScalaJS.d.O, {
  jl_ThreadLocal: 1,
  O: 1
});
ScalaJS.c.jl_ThreadLocal.prototype.$classData = ScalaJS.d.jl_ThreadLocal;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_ThreadLocal$ThreadLocalMap = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.jl_ThreadLocal$ThreadLocalMap.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_ThreadLocal$ThreadLocalMap.prototype.constructor = ScalaJS.c.jl_ThreadLocal$ThreadLocalMap;
/** @constructor */
ScalaJS.h.jl_ThreadLocal$ThreadLocalMap = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_ThreadLocal$ThreadLocalMap.prototype = ScalaJS.c.jl_ThreadLocal$ThreadLocalMap.prototype;
/*<skip>*/;
ScalaJS.is.jl_ThreadLocal$ThreadLocalMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_ThreadLocal$ThreadLocalMap)))
});
ScalaJS.as.jl_ThreadLocal$ThreadLocalMap = (function(obj) {
  if ((ScalaJS.is.jl_ThreadLocal$ThreadLocalMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.ThreadLocal$ThreadLocalMap")
  }
});
ScalaJS.isArrayOf.jl_ThreadLocal$ThreadLocalMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_ThreadLocal$ThreadLocalMap)))
});
ScalaJS.asArrayOf.jl_ThreadLocal$ThreadLocalMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_ThreadLocal$ThreadLocalMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.ThreadLocal$ThreadLocalMap;", depth)
  }
});
ScalaJS.d.jl_ThreadLocal$ThreadLocalMap = new ScalaJS.ClassTypeData({
  jl_ThreadLocal$ThreadLocalMap: 0
}, false, "java.lang.ThreadLocal$ThreadLocalMap", ScalaJS.d.O, {
  jl_ThreadLocal$ThreadLocalMap: 1,
  O: 1
});
ScalaJS.c.jl_ThreadLocal$ThreadLocalMap.prototype.$classData = ScalaJS.d.jl_ThreadLocal$ThreadLocalMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Throwable = (function() {
  ScalaJS.c.O.call(this);
  this.s$1 = null;
  this.e$1 = null;
  this.stackTrace$1 = null
});
ScalaJS.c.jl_Throwable.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Throwable.prototype.constructor = ScalaJS.c.jl_Throwable;
/** @constructor */
ScalaJS.h.jl_Throwable = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Throwable.prototype = ScalaJS.c.jl_Throwable.prototype;
ScalaJS.c.jl_Throwable.prototype.getMessage__T = (function() {
  return this.s$1
});
ScalaJS.c.jl_Throwable.prototype.fillInStackTrace__jl_Throwable = (function() {
  ScalaJS.m.sjsr_StackTrace().captureState__jl_Throwable__V(this);
  return this
});
ScalaJS.c.jl_Throwable.prototype.toString__T = (function() {
  var className = ScalaJS.objectGetClass(this).getName__T();
  var message = this.getMessage__T();
  if ((message === null)) {
    return className
  } else {
    return ((className + ": ") + message)
  }
});
ScalaJS.c.jl_Throwable.prototype.init___T__jl_Throwable = (function(s, e) {
  this.s$1 = s;
  this.e$1 = e;
  ScalaJS.c.O.prototype.init___.call(this);
  this.fillInStackTrace__jl_Throwable();
  return this
});
ScalaJS.c.jl_Throwable.prototype.init___ = (function() {
  ScalaJS.c.jl_Throwable.prototype.init___T__jl_Throwable.call(this, null, null);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Throwable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Throwable)))
});
ScalaJS.as.jl_Throwable = (function(obj) {
  if ((ScalaJS.is.jl_Throwable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Throwable")
  }
});
ScalaJS.isArrayOf.jl_Throwable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Throwable)))
});
ScalaJS.asArrayOf.jl_Throwable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Throwable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Throwable;", depth)
  }
});
ScalaJS.d.jl_Throwable = new ScalaJS.ClassTypeData({
  jl_Throwable: 0
}, false, "java.lang.Throwable", ScalaJS.d.O, {
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_Throwable.prototype.$classData = ScalaJS.d.jl_Throwable;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_Void$ = (function() {
  ScalaJS.c.O.call(this);
  this.TYPE$1 = null
});
ScalaJS.c.jl_Void$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_Void$.prototype.constructor = ScalaJS.c.jl_Void$;
/** @constructor */
ScalaJS.h.jl_Void$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_Void$.prototype = ScalaJS.c.jl_Void$.prototype;
ScalaJS.c.jl_Void$.prototype.TYPE__jl_Class = (function() {
  return this.TYPE$1
});
ScalaJS.c.jl_Void$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.jl_Void = this;
  this.TYPE$1 = ScalaJS.d.V.getClassOf();
  return this
});
/*<skip>*/;
ScalaJS.is.jl_Void$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_Void$)))
});
ScalaJS.as.jl_Void$ = (function(obj) {
  if ((ScalaJS.is.jl_Void$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.Void$")
  }
});
ScalaJS.isArrayOf.jl_Void$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_Void$)))
});
ScalaJS.asArrayOf.jl_Void$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_Void$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.Void$;", depth)
  }
});
ScalaJS.d.jl_Void$ = new ScalaJS.ClassTypeData({
  jl_Void$: 0
}, false, "java.lang.Void$", ScalaJS.d.O, {
  jl_Void$: 1,
  O: 1
});
ScalaJS.c.jl_Void$.prototype.$classData = ScalaJS.d.jl_Void$;
ScalaJS.n.jl_Void = undefined;
ScalaJS.m.jl_Void = (function() {
  if ((!ScalaJS.n.jl_Void)) {
    ScalaJS.n.jl_Void = new ScalaJS.c.jl_Void$().init___()
  };
  return ScalaJS.n.jl_Void
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_reflect_Array$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.jl_reflect_Array$.prototype = new ScalaJS.h.O();
ScalaJS.c.jl_reflect_Array$.prototype.constructor = ScalaJS.c.jl_reflect_Array$;
/** @constructor */
ScalaJS.h.jl_reflect_Array$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_reflect_Array$.prototype = ScalaJS.c.jl_reflect_Array$.prototype;
ScalaJS.c.jl_reflect_Array$.prototype.newInstance__jl_Class__I__O = (function(componentType, length) {
  return componentType.newArrayOfThisClass__sjs_js_Array__O(ScalaJS.m.sjs_js_Any().fromTraversableOnce__sc_TraversableOnce__sjs_js_Array(ScalaJS.m.s_Predef().wrapIntArray__AI__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.I.getArrayOf(), [length]))))
});
/*<skip>*/;
ScalaJS.is.jl_reflect_Array$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_reflect_Array$)))
});
ScalaJS.as.jl_reflect_Array$ = (function(obj) {
  if ((ScalaJS.is.jl_reflect_Array$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.reflect.Array$")
  }
});
ScalaJS.isArrayOf.jl_reflect_Array$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_reflect_Array$)))
});
ScalaJS.asArrayOf.jl_reflect_Array$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_reflect_Array$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.reflect.Array$;", depth)
  }
});
ScalaJS.d.jl_reflect_Array$ = new ScalaJS.ClassTypeData({
  jl_reflect_Array$: 0
}, false, "java.lang.reflect.Array$", ScalaJS.d.O, {
  jl_reflect_Array$: 1,
  O: 1
});
ScalaJS.c.jl_reflect_Array$.prototype.$classData = ScalaJS.d.jl_reflect_Array$;
ScalaJS.n.jl_reflect_Array = undefined;
ScalaJS.m.jl_reflect_Array = (function() {
  if ((!ScalaJS.n.jl_reflect_Array)) {
    ScalaJS.n.jl_reflect_Array = new ScalaJS.c.jl_reflect_Array$().init___()
  };
  return ScalaJS.n.jl_reflect_Array
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_Arrays$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.ju_Arrays$.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_Arrays$.prototype.constructor = ScalaJS.c.ju_Arrays$;
/** @constructor */
ScalaJS.h.ju_Arrays$ = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_Arrays$.prototype = ScalaJS.c.ju_Arrays$.prototype;
ScalaJS.c.ju_Arrays$.prototype.fill__AI__I__V = (function(a, value) {
  var i = 0;
  while ((i < a.u["length"])) {
    a.u[i] = value;
    i = ((i + 1) | 0)
  }
});
/*<skip>*/;
ScalaJS.is.ju_Arrays$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_Arrays$)))
});
ScalaJS.as.ju_Arrays$ = (function(obj) {
  if ((ScalaJS.is.ju_Arrays$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.Arrays$")
  }
});
ScalaJS.isArrayOf.ju_Arrays$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_Arrays$)))
});
ScalaJS.asArrayOf.ju_Arrays$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_Arrays$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.Arrays$;", depth)
  }
});
ScalaJS.d.ju_Arrays$ = new ScalaJS.ClassTypeData({
  ju_Arrays$: 0
}, false, "java.util.Arrays$", ScalaJS.d.O, {
  ju_Arrays$: 1,
  O: 1
});
ScalaJS.c.ju_Arrays$.prototype.$classData = ScalaJS.d.ju_Arrays$;
ScalaJS.n.ju_Arrays = undefined;
ScalaJS.m.ju_Arrays = (function() {
  if ((!ScalaJS.n.ju_Arrays)) {
    ScalaJS.n.ju_Arrays = new ScalaJS.c.ju_Arrays$().init___()
  };
  return ScalaJS.n.ju_Arrays
});
/*<skip>*/;
ScalaJS.is.ju_Formattable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_Formattable)))
});
ScalaJS.as.ju_Formattable = (function(obj) {
  if ((ScalaJS.is.ju_Formattable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.Formattable")
  }
});
ScalaJS.isArrayOf.ju_Formattable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_Formattable)))
});
ScalaJS.asArrayOf.ju_Formattable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_Formattable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.Formattable;", depth)
  }
});
ScalaJS.d.ju_Formattable = new ScalaJS.ClassTypeData({
  ju_Formattable: 0
}, true, "java.util.Formattable", undefined, {
  ju_Formattable: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.ju_FormattableFlags$ = (function() {
  ScalaJS.c.O.call(this);
  this.ALTERNATE$1 = 0;
  this.LEFT$undJUSTIFY$1 = 0;
  this.UPPERCASE$1 = 0
});
ScalaJS.c.ju_FormattableFlags$.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_FormattableFlags$.prototype.constructor = ScalaJS.c.ju_FormattableFlags$;
/** @constructor */
ScalaJS.h.ju_FormattableFlags$ = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_FormattableFlags$.prototype = ScalaJS.c.ju_FormattableFlags$.prototype;
ScalaJS.c.ju_FormattableFlags$.prototype.ALTERNATE__I = (function() {
  return this.ALTERNATE$1
});
ScalaJS.c.ju_FormattableFlags$.prototype.LEFT$undJUSTIFY__I = (function() {
  return this.LEFT$undJUSTIFY$1
});
ScalaJS.c.ju_FormattableFlags$.prototype.UPPERCASE__I = (function() {
  return this.UPPERCASE$1
});
ScalaJS.c.ju_FormattableFlags$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.ju_FormattableFlags = this;
  this.ALTERNATE$1 = 4;
  this.LEFT$undJUSTIFY$1 = 1;
  this.UPPERCASE$1 = 2;
  return this
});
/*<skip>*/;
ScalaJS.is.ju_FormattableFlags$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_FormattableFlags$)))
});
ScalaJS.as.ju_FormattableFlags$ = (function(obj) {
  if ((ScalaJS.is.ju_FormattableFlags$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.FormattableFlags$")
  }
});
ScalaJS.isArrayOf.ju_FormattableFlags$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_FormattableFlags$)))
});
ScalaJS.asArrayOf.ju_FormattableFlags$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_FormattableFlags$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.FormattableFlags$;", depth)
  }
});
ScalaJS.d.ju_FormattableFlags$ = new ScalaJS.ClassTypeData({
  ju_FormattableFlags$: 0
}, false, "java.util.FormattableFlags$", ScalaJS.d.O, {
  ju_FormattableFlags$: 1,
  O: 1
});
ScalaJS.c.ju_FormattableFlags$.prototype.$classData = ScalaJS.d.ju_FormattableFlags$;
ScalaJS.n.ju_FormattableFlags = undefined;
ScalaJS.m.ju_FormattableFlags = (function() {
  if ((!ScalaJS.n.ju_FormattableFlags)) {
    ScalaJS.n.ju_FormattableFlags = new ScalaJS.c.ju_FormattableFlags$().init___()
  };
  return ScalaJS.n.ju_FormattableFlags
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_Formatter = (function() {
  ScalaJS.c.O.call(this);
  this.java$util$Formatter$$dest$1 = null;
  this.closed$1 = false;
  this.java$util$Formatter$$RegularChunk$1 = null;
  this.java$util$Formatter$$DoublePercent$1 = null;
  this.java$util$Formatter$$EOLChunk$1 = null;
  this.java$util$Formatter$$FormattedChunk$1 = null
});
ScalaJS.c.ju_Formatter.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_Formatter.prototype.constructor = ScalaJS.c.ju_Formatter;
/** @constructor */
ScalaJS.h.ju_Formatter = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_Formatter.prototype = ScalaJS.c.ju_Formatter.prototype;
ScalaJS.c.ju_Formatter.prototype.java$util$Formatter$$dest__jl_Appendable = (function() {
  return this.java$util$Formatter$$dest$1
});
ScalaJS.c.ju_Formatter.prototype.closed__Z = (function() {
  return this.closed$1
});
ScalaJS.c.ju_Formatter.prototype.closed$und$eq__Z__V = (function(x$1) {
  this.closed$1 = x$1
});
ScalaJS.c.ju_Formatter.prototype.close__V = (function() {
  if ((!this.closed__Z())) {
    var x1 = this.java$util$Formatter$$dest__jl_Appendable();
    matchEnd4: {
      if (ScalaJS.is.Ljava_io_Closeable(x1)) {
        var x2 = x1;
        ScalaJS.as.Ljava_io_Closeable(x2).close__V();
        break matchEnd4
      };
      break matchEnd4
    }
  };
  this.closed$und$eq__Z__V(true)
});
ScalaJS.c.ju_Formatter.prototype.java$util$Formatter$$RegularChunk__ju_Formatter$RegExpExtractor = (function() {
  return this.java$util$Formatter$$RegularChunk$1
});
ScalaJS.c.ju_Formatter.prototype.java$util$Formatter$$DoublePercent__ju_Formatter$RegExpExtractor = (function() {
  return this.java$util$Formatter$$DoublePercent$1
});
ScalaJS.c.ju_Formatter.prototype.java$util$Formatter$$EOLChunk__ju_Formatter$RegExpExtractor = (function() {
  return this.java$util$Formatter$$EOLChunk$1
});
ScalaJS.c.ju_Formatter.prototype.java$util$Formatter$$FormattedChunk__ju_Formatter$RegExpExtractor = (function() {
  return this.java$util$Formatter$$FormattedChunk$1
});
ScalaJS.c.ju_Formatter.prototype.format__T__AO__ju_Formatter = (function(format_in, args) {
  return ScalaJS.as.ju_Formatter(this.ifNotClosed__p1__F0__O(new ScalaJS.c.ju_Formatter$$anonfun$format$1().init___ju_Formatter__T__AO(this, format_in, args)))
});
ScalaJS.c.ju_Formatter.prototype.out__jl_Appendable = (function() {
  return ScalaJS.as.jl_Appendable(this.ifNotClosed__p1__F0__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer) {
    return (function() {
      return arg$outer.java$util$Formatter$$dest__jl_Appendable()
    })
  })(this))))
});
ScalaJS.c.ju_Formatter.prototype.toString__T = (function() {
  return ScalaJS.objectToString(this.out__jl_Appendable())
});
ScalaJS.c.ju_Formatter.prototype.ifNotClosed__p1__F0__O = (function(body) {
  if (this.closed__Z()) {
    throw new ScalaJS.c.ju_FormatterClosedException().init___()
  } else {
    return body.apply__O()
  }
});
ScalaJS.c.ju_Formatter.prototype.init___jl_Appendable = (function(dest) {
  this.java$util$Formatter$$dest$1 = dest;
  ScalaJS.c.O.prototype.init___.call(this);
  this.closed$1 = false;
  this.java$util$Formatter$$RegularChunk$1 = new ScalaJS.c.ju_Formatter$RegExpExtractor().init___ju_Formatter__sjs_js_RegExp(this, new ScalaJS.g["RegExp"]("^[^\\x25]+"));
  this.java$util$Formatter$$DoublePercent$1 = new ScalaJS.c.ju_Formatter$RegExpExtractor().init___ju_Formatter__sjs_js_RegExp(this, new ScalaJS.g["RegExp"]("^\\x25{2}"));
  this.java$util$Formatter$$EOLChunk$1 = new ScalaJS.c.ju_Formatter$RegExpExtractor().init___ju_Formatter__sjs_js_RegExp(this, new ScalaJS.g["RegExp"]("^\\x25n"));
  this.java$util$Formatter$$FormattedChunk$1 = new ScalaJS.c.ju_Formatter$RegExpExtractor().init___ju_Formatter__sjs_js_RegExp(this, new ScalaJS.g["RegExp"]("^\\x25(?:([1-9]\\d*)\\$)?([-#+ 0,\\(<]*)(\\d*)(?:\\.(\\d+))?([A-Za-z])"));
  return this
});
ScalaJS.c.ju_Formatter.prototype.init___ = (function() {
  ScalaJS.c.ju_Formatter.prototype.init___jl_Appendable.call(this, new ScalaJS.c.jl_StringBuilder().init___());
  return this
});
/*<skip>*/;
ScalaJS.is.ju_Formatter = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_Formatter)))
});
ScalaJS.as.ju_Formatter = (function(obj) {
  if ((ScalaJS.is.ju_Formatter(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.Formatter")
  }
});
ScalaJS.isArrayOf.ju_Formatter = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_Formatter)))
});
ScalaJS.asArrayOf.ju_Formatter = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_Formatter(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.Formatter;", depth)
  }
});
ScalaJS.d.ju_Formatter = new ScalaJS.ClassTypeData({
  ju_Formatter: 0
}, false, "java.util.Formatter", ScalaJS.d.O, {
  ju_Formatter: 1,
  Ljava_io_Flushable: 1,
  Ljava_io_Closeable: 1,
  O: 1
});
ScalaJS.c.ju_Formatter.prototype.$classData = ScalaJS.d.ju_Formatter;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_Formatter$RegExpExtractor = (function() {
  ScalaJS.c.O.call(this);
  this.regexp$1 = null;
  this.$$outer$f = null
});
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype.constructor = ScalaJS.c.ju_Formatter$RegExpExtractor;
/** @constructor */
ScalaJS.h.ju_Formatter$RegExpExtractor = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_Formatter$RegExpExtractor.prototype = ScalaJS.c.ju_Formatter$RegExpExtractor.prototype;
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype.regexp__sjs_js_RegExp = (function() {
  return this.regexp$1
});
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype.unapply__T__s_Option = (function(str) {
  return ScalaJS.m.s_Option().apply__O__s_Option(this.regexp__sjs_js_RegExp()["exec"](str))
});
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype.init___ju_Formatter__sjs_js_RegExp = (function($$outer, regexp) {
  this.regexp$1 = regexp;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_Formatter$RegExpExtractor = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_Formatter$RegExpExtractor)))
});
ScalaJS.as.ju_Formatter$RegExpExtractor = (function(obj) {
  if ((ScalaJS.is.ju_Formatter$RegExpExtractor(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.Formatter$RegExpExtractor")
  }
});
ScalaJS.isArrayOf.ju_Formatter$RegExpExtractor = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_Formatter$RegExpExtractor)))
});
ScalaJS.asArrayOf.ju_Formatter$RegExpExtractor = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_Formatter$RegExpExtractor(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.Formatter$RegExpExtractor;", depth)
  }
});
ScalaJS.d.ju_Formatter$RegExpExtractor = new ScalaJS.ClassTypeData({
  ju_Formatter$RegExpExtractor: 0
}, false, "java.util.Formatter$RegExpExtractor", ScalaJS.d.O, {
  ju_Formatter$RegExpExtractor: 1,
  O: 1
});
ScalaJS.c.ju_Formatter$RegExpExtractor.prototype.$classData = ScalaJS.d.ju_Formatter$RegExpExtractor;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_Random = (function() {
  ScalaJS.c.O.call(this);
  this.nextNextGaussian$1 = 0.0;
  this.haveNextNextGaussian$1 = false
});
ScalaJS.c.ju_Random.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_Random.prototype.constructor = ScalaJS.c.ju_Random;
/** @constructor */
ScalaJS.h.ju_Random = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_Random.prototype = ScalaJS.c.ju_Random.prototype;
ScalaJS.c.ju_Random.prototype.nextDouble__D = (function() {
  return ScalaJS.uD(ScalaJS.g["Math"]["random"]())
});
ScalaJS.c.ju_Random.prototype.nextInt__I__I = (function(n) {
  return (ScalaJS.uD(ScalaJS.g["Math"]["floor"]((this.nextDouble__D() * n))) | 0)
});
ScalaJS.c.ju_Random.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  this.haveNextNextGaussian$1 = false;
  return this
});
/*<skip>*/;
ScalaJS.is.ju_Random = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_Random)))
});
ScalaJS.as.ju_Random = (function(obj) {
  if ((ScalaJS.is.ju_Random(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.Random")
  }
});
ScalaJS.isArrayOf.ju_Random = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_Random)))
});
ScalaJS.asArrayOf.ju_Random = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_Random(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.Random;", depth)
  }
});
ScalaJS.d.ju_Random = new ScalaJS.ClassTypeData({
  ju_Random: 0
}, false, "java.util.Random", ScalaJS.d.O, {
  ju_Random: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_Random.prototype.$classData = ScalaJS.d.ju_Random;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_concurrent_atomic_AtomicReference = (function() {
  ScalaJS.c.O.call(this);
  this.value$1 = null
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype = new ScalaJS.h.O();
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.constructor = ScalaJS.c.ju_concurrent_atomic_AtomicReference;
/** @constructor */
ScalaJS.h.ju_concurrent_atomic_AtomicReference = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_concurrent_atomic_AtomicReference.prototype = ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype;
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.value__O = (function() {
  return this.value$1
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.value$und$eq__O__V = (function(x$1) {
  this.value$1 = x$1
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.get__O = (function() {
  return this.value__O()
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.set__O__V = (function(newValue) {
  this.value$und$eq__O__V(newValue)
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.init___O = (function(value) {
  this.value$1 = value;
  ScalaJS.c.O.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_concurrent_atomic_AtomicReference = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_concurrent_atomic_AtomicReference)))
});
ScalaJS.as.ju_concurrent_atomic_AtomicReference = (function(obj) {
  if ((ScalaJS.is.ju_concurrent_atomic_AtomicReference(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.concurrent.atomic.AtomicReference")
  }
});
ScalaJS.isArrayOf.ju_concurrent_atomic_AtomicReference = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_concurrent_atomic_AtomicReference)))
});
ScalaJS.asArrayOf.ju_concurrent_atomic_AtomicReference = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_concurrent_atomic_AtomicReference(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.concurrent.atomic.AtomicReference;", depth)
  }
});
ScalaJS.d.ju_concurrent_atomic_AtomicReference = new ScalaJS.ClassTypeData({
  ju_concurrent_atomic_AtomicReference: 0
}, false, "java.util.concurrent.atomic.AtomicReference", ScalaJS.d.O, {
  ju_concurrent_atomic_AtomicReference: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_concurrent_atomic_AtomicReference.prototype.$classData = ScalaJS.d.ju_concurrent_atomic_AtomicReference;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Console$ = (function() {
  ScalaJS.c.O.call(this);
  this.BLACK$1 = null;
  this.RED$1 = null;
  this.GREEN$1 = null;
  this.YELLOW$1 = null;
  this.BLUE$1 = null;
  this.MAGENTA$1 = null;
  this.CYAN$1 = null;
  this.WHITE$1 = null;
  this.BLACK$undB$1 = null;
  this.RED$undB$1 = null;
  this.GREEN$undB$1 = null;
  this.YELLOW$undB$1 = null;
  this.BLUE$undB$1 = null;
  this.MAGENTA$undB$1 = null;
  this.CYAN$undB$1 = null;
  this.WHITE$undB$1 = null;
  this.RESET$1 = null;
  this.BOLD$1 = null;
  this.UNDERLINED$1 = null;
  this.BLINK$1 = null;
  this.REVERSED$1 = null;
  this.INVISIBLE$1 = null;
  this.outVar$1 = null;
  this.errVar$1 = null;
  this.inVar$1 = null
});
ScalaJS.c.s_Console$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Console$.prototype.constructor = ScalaJS.c.s_Console$;
/** @constructor */
ScalaJS.h.s_Console$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Console$.prototype = ScalaJS.c.s_Console$.prototype;
ScalaJS.c.s_Console$.prototype.outVar__p1__s_util_DynamicVariable = (function() {
  return this.outVar$1
});
ScalaJS.c.s_Console$.prototype.out__Ljava_io_PrintStream = (function() {
  return ScalaJS.as.Ljava_io_PrintStream(this.outVar__p1__s_util_DynamicVariable().value__O())
});
ScalaJS.c.s_Console$.prototype.println__O__V = (function(x) {
  this.out__Ljava_io_PrintStream().println__O__V(x)
});
ScalaJS.c.s_Console$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_Console = this;
  this.outVar$1 = new ScalaJS.c.s_util_DynamicVariable().init___O(ScalaJS.m.jl_System().out__Ljava_io_PrintStream());
  this.errVar$1 = new ScalaJS.c.s_util_DynamicVariable().init___O(ScalaJS.m.jl_System().err__Ljava_io_PrintStream());
  this.inVar$1 = new ScalaJS.c.s_util_DynamicVariable().init___O(null);
  return this
});
/*<skip>*/;
ScalaJS.is.s_Console$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Console$)))
});
ScalaJS.as.s_Console$ = (function(obj) {
  if ((ScalaJS.is.s_Console$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Console$")
  }
});
ScalaJS.isArrayOf.s_Console$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Console$)))
});
ScalaJS.asArrayOf.s_Console$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Console$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Console$;", depth)
  }
});
ScalaJS.d.s_Console$ = new ScalaJS.ClassTypeData({
  s_Console$: 0
}, false, "scala.Console$", ScalaJS.d.O, {
  s_Console$: 1,
  O: 1
});
ScalaJS.c.s_Console$.prototype.$classData = ScalaJS.d.s_Console$;
ScalaJS.n.s_Console = undefined;
ScalaJS.m.s_Console = (function() {
  if ((!ScalaJS.n.s_Console)) {
    ScalaJS.n.s_Console = new ScalaJS.c.s_Console$().init___()
  };
  return ScalaJS.n.s_Console
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_FallbackArrayBuilding = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_FallbackArrayBuilding.prototype = new ScalaJS.h.O();
ScalaJS.c.s_FallbackArrayBuilding.prototype.constructor = ScalaJS.c.s_FallbackArrayBuilding;
/** @constructor */
ScalaJS.h.s_FallbackArrayBuilding = (function() {
  /*<skip>*/
});
ScalaJS.h.s_FallbackArrayBuilding.prototype = ScalaJS.c.s_FallbackArrayBuilding.prototype;
/*<skip>*/;
ScalaJS.is.s_FallbackArrayBuilding = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_FallbackArrayBuilding)))
});
ScalaJS.as.s_FallbackArrayBuilding = (function(obj) {
  if ((ScalaJS.is.s_FallbackArrayBuilding(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.FallbackArrayBuilding")
  }
});
ScalaJS.isArrayOf.s_FallbackArrayBuilding = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_FallbackArrayBuilding)))
});
ScalaJS.asArrayOf.s_FallbackArrayBuilding = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_FallbackArrayBuilding(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.FallbackArrayBuilding;", depth)
  }
});
ScalaJS.d.s_FallbackArrayBuilding = new ScalaJS.ClassTypeData({
  s_FallbackArrayBuilding: 0
}, false, "scala.FallbackArrayBuilding", ScalaJS.d.O, {
  s_FallbackArrayBuilding: 1,
  O: 1
});
ScalaJS.c.s_FallbackArrayBuilding.prototype.$classData = ScalaJS.d.s_FallbackArrayBuilding;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_LowPriorityImplicits = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_LowPriorityImplicits.prototype = new ScalaJS.h.O();
ScalaJS.c.s_LowPriorityImplicits.prototype.constructor = ScalaJS.c.s_LowPriorityImplicits;
/** @constructor */
ScalaJS.h.s_LowPriorityImplicits = (function() {
  /*<skip>*/
});
ScalaJS.h.s_LowPriorityImplicits.prototype = ScalaJS.c.s_LowPriorityImplicits.prototype;
ScalaJS.c.s_LowPriorityImplicits.prototype.intWrapper__I__I = (function(x) {
  return x
});
ScalaJS.c.s_LowPriorityImplicits.prototype.charWrapper__C__C = (function(c) {
  return c
});
ScalaJS.c.s_LowPriorityImplicits.prototype.genericWrapArray__O__scm_WrappedArray = (function(xs) {
  if ((xs === null)) {
    return null
  } else {
    return ScalaJS.m.scm_WrappedArray().make__O__scm_WrappedArray(xs)
  }
});
ScalaJS.c.s_LowPriorityImplicits.prototype.wrapRefArray__AO__scm_WrappedArray = (function(xs) {
  if ((xs === null)) {
    return null
  } else {
    if ((xs.u["length"] === 0)) {
      return ScalaJS.m.scm_WrappedArray().empty__scm_WrappedArray()
    } else {
      return new ScalaJS.c.scm_WrappedArray$ofRef().init___AO(xs)
    }
  }
});
ScalaJS.c.s_LowPriorityImplicits.prototype.wrapIntArray__AI__scm_WrappedArray = (function(xs) {
  if ((xs !== null)) {
    return new ScalaJS.c.scm_WrappedArray$ofInt().init___AI(xs)
  } else {
    return null
  }
});
ScalaJS.c.s_LowPriorityImplicits.prototype.wrapDoubleArray__AD__scm_WrappedArray = (function(xs) {
  if ((xs !== null)) {
    return new ScalaJS.c.scm_WrappedArray$ofDouble().init___AD(xs)
  } else {
    return null
  }
});
/*<skip>*/;
ScalaJS.is.s_LowPriorityImplicits = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_LowPriorityImplicits)))
});
ScalaJS.as.s_LowPriorityImplicits = (function(obj) {
  if ((ScalaJS.is.s_LowPriorityImplicits(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.LowPriorityImplicits")
  }
});
ScalaJS.isArrayOf.s_LowPriorityImplicits = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_LowPriorityImplicits)))
});
ScalaJS.asArrayOf.s_LowPriorityImplicits = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_LowPriorityImplicits(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.LowPriorityImplicits;", depth)
  }
});
ScalaJS.d.s_LowPriorityImplicits = new ScalaJS.ClassTypeData({
  s_LowPriorityImplicits: 0
}, false, "scala.LowPriorityImplicits", ScalaJS.d.O, {
  s_LowPriorityImplicits: 1,
  O: 1
});
ScalaJS.c.s_LowPriorityImplicits.prototype.$classData = ScalaJS.d.s_LowPriorityImplicits;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Option = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Option.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Option.prototype.constructor = ScalaJS.c.s_Option;
/** @constructor */
ScalaJS.h.s_Option = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Option.prototype = ScalaJS.c.s_Option.prototype;
ScalaJS.c.s_Option.prototype.isDefined__Z = (function() {
  return (!this.isEmpty__Z())
});
ScalaJS.c.s_Option.prototype.getOrElse__F0__O = (function(default$2) {
  if (this.isEmpty__Z()) {
    return default$2.apply__O()
  } else {
    return this.get__O()
  }
});
ScalaJS.c.s_Option.prototype.map__F1__s_Option = (function(f) {
  if (this.isEmpty__Z()) {
    return ScalaJS.m.s_None()
  } else {
    return new ScalaJS.c.s_Some().init___O(f.apply__O__O(this.get__O()))
  }
});
ScalaJS.c.s_Option.prototype.fold__F0__F1__O = (function(ifEmpty, f) {
  if (this.isEmpty__Z()) {
    return ifEmpty.apply__O()
  } else {
    return f.apply__O__O(this.get__O())
  }
});
ScalaJS.c.s_Option.prototype.flatMap__F1__s_Option = (function(f) {
  if (this.isEmpty__Z()) {
    return ScalaJS.m.s_None()
  } else {
    return ScalaJS.as.s_Option(f.apply__O__O(this.get__O()))
  }
});
ScalaJS.c.s_Option.prototype.foreach__F1__V = (function(f) {
  if ((!this.isEmpty__Z())) {
    f.apply__O__O(this.get__O())
  }
});
ScalaJS.c.s_Option.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_Option = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Option)))
});
ScalaJS.as.s_Option = (function(obj) {
  if ((ScalaJS.is.s_Option(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Option")
  }
});
ScalaJS.isArrayOf.s_Option = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Option)))
});
ScalaJS.asArrayOf.s_Option = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Option(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Option;", depth)
  }
});
ScalaJS.d.s_Option = new ScalaJS.ClassTypeData({
  s_Option: 0
}, false, "scala.Option", ScalaJS.d.O, {
  s_Option: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.s_Option.prototype.$classData = ScalaJS.d.s_Option;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Option$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Option$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Option$.prototype.constructor = ScalaJS.c.s_Option$;
/** @constructor */
ScalaJS.h.s_Option$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Option$.prototype = ScalaJS.c.s_Option$.prototype;
ScalaJS.c.s_Option$.prototype.apply__O__s_Option = (function(x) {
  if ((x === null)) {
    return ScalaJS.m.s_None()
  } else {
    return new ScalaJS.c.s_Some().init___O(x)
  }
});
/*<skip>*/;
ScalaJS.is.s_Option$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Option$)))
});
ScalaJS.as.s_Option$ = (function(obj) {
  if ((ScalaJS.is.s_Option$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Option$")
  }
});
ScalaJS.isArrayOf.s_Option$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Option$)))
});
ScalaJS.asArrayOf.s_Option$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Option$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Option$;", depth)
  }
});
ScalaJS.d.s_Option$ = new ScalaJS.ClassTypeData({
  s_Option$: 0
}, false, "scala.Option$", ScalaJS.d.O, {
  s_Option$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_Option$.prototype.$classData = ScalaJS.d.s_Option$;
ScalaJS.n.s_Option = undefined;
ScalaJS.m.s_Option = (function() {
  if ((!ScalaJS.n.s_Option)) {
    ScalaJS.n.s_Option = new ScalaJS.c.s_Option$().init___()
  };
  return ScalaJS.n.s_Option
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_PartialFunction$ = (function() {
  ScalaJS.c.O.call(this);
  this.scala$PartialFunction$$fallback$undpf$f = null;
  this.scala$PartialFunction$$constFalse$f = null;
  this.empty$undpf$1 = null
});
ScalaJS.c.s_PartialFunction$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_PartialFunction$.prototype.constructor = ScalaJS.c.s_PartialFunction$;
/** @constructor */
ScalaJS.h.s_PartialFunction$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_PartialFunction$.prototype = ScalaJS.c.s_PartialFunction$.prototype;
ScalaJS.c.s_PartialFunction$.prototype.scala$PartialFunction$$checkFallback__s_PartialFunction = (function() {
  return this.scala$PartialFunction$$fallback$undpf$f
});
ScalaJS.c.s_PartialFunction$.prototype.scala$PartialFunction$$fallbackOccurred__O__Z = (function(x) {
  return (this.scala$PartialFunction$$fallback$undpf$f === x)
});
ScalaJS.c.s_PartialFunction$.prototype.empty__s_PartialFunction = (function() {
  return this.empty$undpf$1
});
ScalaJS.c.s_PartialFunction$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_PartialFunction = this;
  this.scala$PartialFunction$$fallback$undpf$f = new ScalaJS.c.s_PartialFunction$$anonfun$1().init___();
  this.scala$PartialFunction$$constFalse$f = new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x$1$2) {
      var x$1 = ScalaJS.as.O(x$1$2);
      return false
    })
  })());
  this.empty$undpf$1 = new ScalaJS.c.s_PartialFunction$$anon$1().init___();
  return this
});
/*<skip>*/;
ScalaJS.is.s_PartialFunction$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_PartialFunction$)))
});
ScalaJS.as.s_PartialFunction$ = (function(obj) {
  if ((ScalaJS.is.s_PartialFunction$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.PartialFunction$")
  }
});
ScalaJS.isArrayOf.s_PartialFunction$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_PartialFunction$)))
});
ScalaJS.asArrayOf.s_PartialFunction$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_PartialFunction$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.PartialFunction$;", depth)
  }
});
ScalaJS.d.s_PartialFunction$ = new ScalaJS.ClassTypeData({
  s_PartialFunction$: 0
}, false, "scala.PartialFunction$", ScalaJS.d.O, {
  s_PartialFunction$: 1,
  O: 1
});
ScalaJS.c.s_PartialFunction$.prototype.$classData = ScalaJS.d.s_PartialFunction$;
ScalaJS.n.s_PartialFunction = undefined;
ScalaJS.m.s_PartialFunction = (function() {
  if ((!ScalaJS.n.s_PartialFunction)) {
    ScalaJS.n.s_PartialFunction = new ScalaJS.c.s_PartialFunction$().init___()
  };
  return ScalaJS.n.s_PartialFunction
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_PartialFunction$$anon$1 = (function() {
  ScalaJS.c.O.call(this);
  this.lift$1 = null
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.s_PartialFunction$$anon$1.prototype.constructor = ScalaJS.c.s_PartialFunction$$anon$1;
/** @constructor */
ScalaJS.h.s_PartialFunction$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.s_PartialFunction$$anon$1.prototype = ScalaJS.c.s_PartialFunction$$anon$1.prototype;
ScalaJS.c.s_PartialFunction$$anon$1.prototype.applyOrElse__O__F1__O = (function(x, default$2) {
  return ScalaJS.i.s_PartialFunction$class__applyOrElse__s_PartialFunction__O__F1__O(this, x, default$2)
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.apply$mcVI$sp__I__V = (function(v1) {
  ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.toString__T = (function() {
  return ScalaJS.i.s_Function1$class__toString__F1__T(this)
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.isDefinedAt__O__Z = (function(x) {
  return false
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.apply__O__sr_Nothing$ = (function(x) {
  throw new ScalaJS.c.s_MatchError().init___O(x)
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.orElse__s_PartialFunction__s_PartialFunction = (function(that) {
  return that
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.apply__O__O = (function(v1) {
  this.apply__O__sr_Nothing$(v1)
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  ScalaJS.i.s_PartialFunction$class__$init$__s_PartialFunction__V(this);
  this.lift$1 = new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x$2) {
      var x = ScalaJS.as.O(x$2);
      return ScalaJS.m.s_None()
    })
  })());
  return this
});
/*<skip>*/;
ScalaJS.is.s_PartialFunction$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_PartialFunction$$anon$1)))
});
ScalaJS.as.s_PartialFunction$$anon$1 = (function(obj) {
  if ((ScalaJS.is.s_PartialFunction$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.PartialFunction$$anon$1")
  }
});
ScalaJS.isArrayOf.s_PartialFunction$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_PartialFunction$$anon$1)))
});
ScalaJS.asArrayOf.s_PartialFunction$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_PartialFunction$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.PartialFunction$$anon$1;", depth)
  }
});
ScalaJS.d.s_PartialFunction$$anon$1 = new ScalaJS.ClassTypeData({
  s_PartialFunction$$anon$1: 0
}, false, "scala.PartialFunction$$anon$1", ScalaJS.d.O, {
  s_PartialFunction$$anon$1: 1,
  s_PartialFunction: 1,
  F1: 1,
  O: 1
});
ScalaJS.c.s_PartialFunction$$anon$1.prototype.$classData = ScalaJS.d.s_PartialFunction$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_PartialFunction$OrElse = (function() {
  ScalaJS.c.O.call(this);
  this.f1$1 = null;
  this.f2$1 = null
});
ScalaJS.c.s_PartialFunction$OrElse.prototype = new ScalaJS.h.O();
ScalaJS.c.s_PartialFunction$OrElse.prototype.constructor = ScalaJS.c.s_PartialFunction$OrElse;
/** @constructor */
ScalaJS.h.s_PartialFunction$OrElse = (function() {
  /*<skip>*/
});
ScalaJS.h.s_PartialFunction$OrElse.prototype = ScalaJS.c.s_PartialFunction$OrElse.prototype;
ScalaJS.c.s_PartialFunction$OrElse.prototype.apply$mcVI$sp__I__V = (function(v1) {
  ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.toString__T = (function() {
  return ScalaJS.i.s_Function1$class__toString__F1__T(this)
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.isDefinedAt__O__Z = (function(x) {
  return (this.f1$1.isDefinedAt__O__Z(x) || this.f2$1.isDefinedAt__O__Z(x))
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.apply__O__O = (function(x) {
  return this.f1$1.applyOrElse__O__F1__O(x, this.f2$1)
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.applyOrElse__O__F1__O = (function(x, default$2) {
  var z = this.f1$1.applyOrElse__O__F1__O(x, ScalaJS.m.s_PartialFunction().scala$PartialFunction$$checkFallback__s_PartialFunction());
  if ((!ScalaJS.m.s_PartialFunction().scala$PartialFunction$$fallbackOccurred__O__Z(z))) {
    return z
  } else {
    return this.f2$1.applyOrElse__O__F1__O(x, default$2)
  }
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.orElse__s_PartialFunction__s_PartialFunction$OrElse = (function(that) {
  return new ScalaJS.c.s_PartialFunction$OrElse().init___s_PartialFunction__s_PartialFunction(this.f1$1, this.f2$1.orElse__s_PartialFunction__s_PartialFunction(that))
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.orElse__s_PartialFunction__s_PartialFunction = (function(that) {
  return this.orElse__s_PartialFunction__s_PartialFunction$OrElse(that)
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.init___s_PartialFunction__s_PartialFunction = (function(f1, f2) {
  this.f1$1 = f1;
  this.f2$1 = f2;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  ScalaJS.i.s_PartialFunction$class__$init$__s_PartialFunction__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_PartialFunction$OrElse = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_PartialFunction$OrElse)))
});
ScalaJS.as.s_PartialFunction$OrElse = (function(obj) {
  if ((ScalaJS.is.s_PartialFunction$OrElse(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.PartialFunction$OrElse")
  }
});
ScalaJS.isArrayOf.s_PartialFunction$OrElse = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_PartialFunction$OrElse)))
});
ScalaJS.asArrayOf.s_PartialFunction$OrElse = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_PartialFunction$OrElse(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.PartialFunction$OrElse;", depth)
  }
});
ScalaJS.d.s_PartialFunction$OrElse = new ScalaJS.ClassTypeData({
  s_PartialFunction$OrElse: 0
}, false, "scala.PartialFunction$OrElse", ScalaJS.d.O, {
  s_PartialFunction$OrElse: 1,
  s_PartialFunction: 1,
  F1: 1,
  O: 1
});
ScalaJS.c.s_PartialFunction$OrElse.prototype.$classData = ScalaJS.d.s_PartialFunction$OrElse;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Predef$$anon$3 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Predef$$anon$3.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Predef$$anon$3.prototype.constructor = ScalaJS.c.s_Predef$$anon$3;
/** @constructor */
ScalaJS.h.s_Predef$$anon$3 = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Predef$$anon$3.prototype = ScalaJS.c.s_Predef$$anon$3.prototype;
ScalaJS.c.s_Predef$$anon$3.prototype.apply__T__scm_StringBuilder = (function(from) {
  return this.apply__scm_StringBuilder()
});
ScalaJS.c.s_Predef$$anon$3.prototype.apply__scm_StringBuilder = (function() {
  return ScalaJS.m.scm_StringBuilder().newBuilder__scm_StringBuilder()
});
ScalaJS.c.s_Predef$$anon$3.prototype.apply__scm_Builder = (function() {
  return this.apply__scm_StringBuilder()
});
ScalaJS.c.s_Predef$$anon$3.prototype.apply__O__scm_Builder = (function(from) {
  return this.apply__T__scm_StringBuilder(ScalaJS.as.T(from))
});
/*<skip>*/;
ScalaJS.is.s_Predef$$anon$3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Predef$$anon$3)))
});
ScalaJS.as.s_Predef$$anon$3 = (function(obj) {
  if ((ScalaJS.is.s_Predef$$anon$3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Predef$$anon$3")
  }
});
ScalaJS.isArrayOf.s_Predef$$anon$3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Predef$$anon$3)))
});
ScalaJS.asArrayOf.s_Predef$$anon$3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Predef$$anon$3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Predef$$anon$3;", depth)
  }
});
ScalaJS.d.s_Predef$$anon$3 = new ScalaJS.ClassTypeData({
  s_Predef$$anon$3: 0
}, false, "scala.Predef$$anon$3", ScalaJS.d.O, {
  s_Predef$$anon$3: 1,
  scg_CanBuildFrom: 1,
  O: 1
});
ScalaJS.c.s_Predef$$anon$3.prototype.$classData = ScalaJS.d.s_Predef$$anon$3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Predef$$eq$colon$eq = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Predef$$eq$colon$eq.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Predef$$eq$colon$eq.prototype.constructor = ScalaJS.c.s_Predef$$eq$colon$eq;
/** @constructor */
ScalaJS.h.s_Predef$$eq$colon$eq = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Predef$$eq$colon$eq.prototype = ScalaJS.c.s_Predef$$eq$colon$eq.prototype;
ScalaJS.c.s_Predef$$eq$colon$eq.prototype.apply$mcVI$sp__I__V = (function(v1) {
  ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.s_Predef$$eq$colon$eq.prototype.toString__T = (function() {
  return ScalaJS.i.s_Function1$class__toString__F1__T(this)
});
ScalaJS.c.s_Predef$$eq$colon$eq.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_Predef$$eq$colon$eq = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Predef$$eq$colon$eq)))
});
ScalaJS.as.s_Predef$$eq$colon$eq = (function(obj) {
  if ((ScalaJS.is.s_Predef$$eq$colon$eq(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Predef$$eq$colon$eq")
  }
});
ScalaJS.isArrayOf.s_Predef$$eq$colon$eq = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Predef$$eq$colon$eq)))
});
ScalaJS.asArrayOf.s_Predef$$eq$colon$eq = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Predef$$eq$colon$eq(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Predef$$eq$colon$eq;", depth)
  }
});
ScalaJS.d.s_Predef$$eq$colon$eq = new ScalaJS.ClassTypeData({
  s_Predef$$eq$colon$eq: 0
}, false, "scala.Predef$$eq$colon$eq", ScalaJS.d.O, {
  s_Predef$$eq$colon$eq: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  F1: 1,
  O: 1
});
ScalaJS.c.s_Predef$$eq$colon$eq.prototype.$classData = ScalaJS.d.s_Predef$$eq$colon$eq;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Predef$$less$colon$less = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Predef$$less$colon$less.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Predef$$less$colon$less.prototype.constructor = ScalaJS.c.s_Predef$$less$colon$less;
/** @constructor */
ScalaJS.h.s_Predef$$less$colon$less = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Predef$$less$colon$less.prototype = ScalaJS.c.s_Predef$$less$colon$less.prototype;
ScalaJS.c.s_Predef$$less$colon$less.prototype.apply$mcVI$sp__I__V = (function(v1) {
  ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.s_Predef$$less$colon$less.prototype.toString__T = (function() {
  return ScalaJS.i.s_Function1$class__toString__F1__T(this)
});
ScalaJS.c.s_Predef$$less$colon$less.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_Predef$$less$colon$less = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Predef$$less$colon$less)))
});
ScalaJS.as.s_Predef$$less$colon$less = (function(obj) {
  if ((ScalaJS.is.s_Predef$$less$colon$less(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Predef$$less$colon$less")
  }
});
ScalaJS.isArrayOf.s_Predef$$less$colon$less = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Predef$$less$colon$less)))
});
ScalaJS.asArrayOf.s_Predef$$less$colon$less = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Predef$$less$colon$less(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Predef$$less$colon$less;", depth)
  }
});
ScalaJS.d.s_Predef$$less$colon$less = new ScalaJS.ClassTypeData({
  s_Predef$$less$colon$less: 0
}, false, "scala.Predef$$less$colon$less", ScalaJS.d.O, {
  s_Predef$$less$colon$less: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  F1: 1,
  O: 1
});
ScalaJS.c.s_Predef$$less$colon$less.prototype.$classData = ScalaJS.d.s_Predef$$less$colon$less;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_Predef$ArrowAssoc$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_Predef$ArrowAssoc$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_Predef$ArrowAssoc$.prototype.constructor = ScalaJS.c.s_Predef$ArrowAssoc$;
/** @constructor */
ScalaJS.h.s_Predef$ArrowAssoc$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_Predef$ArrowAssoc$.prototype = ScalaJS.c.s_Predef$ArrowAssoc$.prototype;
ScalaJS.c.s_Predef$ArrowAssoc$.prototype.$$minus$greater$extension__O__O__T2 = (function($$this, y) {
  return new ScalaJS.c.T2().init___O__O($$this, y)
});
/*<skip>*/;
ScalaJS.is.s_Predef$ArrowAssoc$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_Predef$ArrowAssoc$)))
});
ScalaJS.as.s_Predef$ArrowAssoc$ = (function(obj) {
  if ((ScalaJS.is.s_Predef$ArrowAssoc$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.Predef$ArrowAssoc$")
  }
});
ScalaJS.isArrayOf.s_Predef$ArrowAssoc$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_Predef$ArrowAssoc$)))
});
ScalaJS.asArrayOf.s_Predef$ArrowAssoc$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_Predef$ArrowAssoc$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.Predef$ArrowAssoc$;", depth)
  }
});
ScalaJS.d.s_Predef$ArrowAssoc$ = new ScalaJS.ClassTypeData({
  s_Predef$ArrowAssoc$: 0
}, false, "scala.Predef$ArrowAssoc$", ScalaJS.d.O, {
  s_Predef$ArrowAssoc$: 1,
  O: 1
});
ScalaJS.c.s_Predef$ArrowAssoc$.prototype.$classData = ScalaJS.d.s_Predef$ArrowAssoc$;
ScalaJS.n.s_Predef$ArrowAssoc = undefined;
ScalaJS.m.s_Predef$ArrowAssoc = (function() {
  if ((!ScalaJS.n.s_Predef$ArrowAssoc)) {
    ScalaJS.n.s_Predef$ArrowAssoc = new ScalaJS.c.s_Predef$ArrowAssoc$().init___()
  };
  return ScalaJS.n.s_Predef$ArrowAssoc
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_StringContext = (function() {
  ScalaJS.c.O.call(this);
  this.parts$1 = null
});
ScalaJS.c.s_StringContext.prototype = new ScalaJS.h.O();
ScalaJS.c.s_StringContext.prototype.constructor = ScalaJS.c.s_StringContext;
/** @constructor */
ScalaJS.h.s_StringContext = (function() {
  /*<skip>*/
});
ScalaJS.h.s_StringContext.prototype = ScalaJS.c.s_StringContext.prototype;
ScalaJS.c.s_StringContext.prototype.parts__sc_Seq = (function() {
  return this.parts$1
});
ScalaJS.c.s_StringContext.prototype.checkLengths__sc_Seq__V = (function(args) {
  if ((this.parts__sc_Seq().length__I() !== ((args.length__I() + 1) | 0))) {
    throw new ScalaJS.c.jl_IllegalArgumentException().init___T("wrong number of arguments for interpolated string")
  }
});
ScalaJS.c.s_StringContext.prototype.s__sc_Seq__T = (function(args) {
  return this.standardInterpolator__F1__sc_Seq__T(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(str$2) {
      var str = ScalaJS.as.T(str$2);
      return ScalaJS.m.s_StringContext().treatEscapes__T__T(str)
    })
  })()), args)
});
ScalaJS.c.s_StringContext.prototype.standardInterpolator__F1__sc_Seq__T = (function(process, args) {
  this.checkLengths__sc_Seq__V(args);
  var pi = this.parts__sc_Seq().iterator__sc_Iterator();
  var ai = args.iterator__sc_Iterator();
  var bldr = new ScalaJS.c.jl_StringBuilder().init___T(ScalaJS.as.T(process.apply__O__O(pi.next__O())));
  while (ai.hasNext__Z()) {
    bldr.append__O__jl_StringBuilder(ai.next__O());
    bldr.append__T__jl_StringBuilder(ScalaJS.as.T(process.apply__O__O(pi.next__O())))
  };
  return bldr.toString__T()
});
ScalaJS.c.s_StringContext.prototype.productPrefix__T = (function() {
  return "StringContext"
});
ScalaJS.c.s_StringContext.prototype.productArity__I = (function() {
  return 1
});
ScalaJS.c.s_StringContext.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  switch (x1) {
    case 0:
      {
        return this.parts__sc_Seq();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1));
  }
});
ScalaJS.c.s_StringContext.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.s_StringContext.prototype.canEqual__O__Z = (function(x$1) {
  return ScalaJS.is.s_StringContext(x$1)
});
ScalaJS.c.s_StringContext.prototype.hashCode__I = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undhashCode__s_Product__I(this)
});
ScalaJS.c.s_StringContext.prototype.toString__T = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undtoString__s_Product__T(this)
});
ScalaJS.c.s_StringContext.prototype.equals__O__Z = (function(x$1) {
  if ((this === x$1)) {
    return true
  } else {
    var x1 = x$1;
    matchEnd4: {
      if (ScalaJS.is.s_StringContext(x1)) {
        var jsx$1 = true;
        break matchEnd4
      };
      var jsx$1 = false;
      break matchEnd4
    };
    if (jsx$1) {
      var StringContext$1 = ScalaJS.as.s_StringContext(x$1);
      return (ScalaJS.anyRefEqEq(this.parts__sc_Seq(), StringContext$1.parts__sc_Seq()) && StringContext$1.canEqual__O__Z(this))
    } else {
      return false
    }
  }
});
ScalaJS.c.s_StringContext.prototype.init___sc_Seq = (function(parts) {
  this.parts$1 = parts;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_StringContext = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_StringContext)))
});
ScalaJS.as.s_StringContext = (function(obj) {
  if ((ScalaJS.is.s_StringContext(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.StringContext")
  }
});
ScalaJS.isArrayOf.s_StringContext = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_StringContext)))
});
ScalaJS.asArrayOf.s_StringContext = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_StringContext(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.StringContext;", depth)
  }
});
ScalaJS.d.s_StringContext = new ScalaJS.ClassTypeData({
  s_StringContext: 0
}, false, "scala.StringContext", ScalaJS.d.O, {
  s_StringContext: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  O: 1
});
ScalaJS.c.s_StringContext.prototype.$classData = ScalaJS.d.s_StringContext;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_StringContext$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_StringContext$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_StringContext$.prototype.constructor = ScalaJS.c.s_StringContext$;
/** @constructor */
ScalaJS.h.s_StringContext$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_StringContext$.prototype = ScalaJS.c.s_StringContext$.prototype;
ScalaJS.c.s_StringContext$.prototype.treatEscapes__T__T = (function(str) {
  var bldr$lzy = new ScalaJS.c.sr_ObjectRef().init___O(null);
  var bitmap$0 = new ScalaJS.c.sr_VolatileByteRef().init___B(0);
  var len = ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(str);
  var start = new ScalaJS.c.sr_IntRef().init___I(0);
  var cur = new ScalaJS.c.sr_IntRef().init___I(0);
  var idx = new ScalaJS.c.sr_IntRef().init___I(0);
  while ((idx.elem$1 < len)) {
    cur.elem$1 = idx.elem$1;
    if ((ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1) === 92)) {
      idx.elem$1 = ((idx.elem$1 + 1) | 0);
      if ((idx.elem$1 >= len)) {
        throw new ScalaJS.c.s_StringContext$InvalidEscapeException().init___T__I(str, cur.elem$1)
      };
      if (((48 <= ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1)) && (ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1) <= 55))) {
        var leadch = ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1);
        var oct = ((leadch - 48) | 0);
        idx.elem$1 = ((idx.elem$1 + 1) | 0);
        if ((((idx.elem$1 < len) && (48 <= ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1))) && (ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1) <= 55))) {
          oct = ((((ScalaJS.imul(oct, 8) + ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1)) | 0) - 48) | 0);
          idx.elem$1 = ((idx.elem$1 + 1) | 0);
          if (((((idx.elem$1 < len) && (leadch <= 51)) && (48 <= ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1))) && (ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1) <= 55))) {
            oct = ((((ScalaJS.imul(oct, 8) + ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1)) | 0) - 48) | 0);
            idx.elem$1 = ((idx.elem$1 + 1) | 0)
          }
        };
        this.output$1__p1__C__T__sr_ObjectRef__sr_IntRef__sr_IntRef__sr_IntRef__sr_VolatileByteRef__V((oct & 65535), str, bldr$lzy, start, cur, idx, bitmap$0)
      } else {
        var ch = ScalaJS.m.sci_StringOps().apply$extension__T__I__C(ScalaJS.m.s_Predef().augmentString__T__T(str), idx.elem$1);
        idx.elem$1 = ((idx.elem$1 + 1) | 0);
        var x1 = ch;
        switch (x1) {
          case 98:
            {
              var jsx$1 = 8;
              break
            };
          case 116:
            {
              var jsx$1 = 9;
              break
            };
          case 110:
            {
              var jsx$1 = 10;
              break
            };
          case 102:
            {
              var jsx$1 = 12;
              break
            };
          case 114:
            {
              var jsx$1 = 13;
              break
            };
          case 34:
            {
              var jsx$1 = 34;
              break
            };
          case 39:
            {
              var jsx$1 = 39;
              break
            };
          case 92:
            {
              var jsx$1 = 92;
              break
            };
          default:
            throw new ScalaJS.c.s_StringContext$InvalidEscapeException().init___T__I(str, cur.elem$1);
        };
        this.output$1__p1__C__T__sr_ObjectRef__sr_IntRef__sr_IntRef__sr_IntRef__sr_VolatileByteRef__V(jsx$1, str, bldr$lzy, start, cur, idx, bitmap$0)
      }
    } else {
      idx.elem$1 = ((idx.elem$1 + 1) | 0)
    }
  };
  if ((start.elem$1 === 0)) {
    return str
  } else {
    return this.bldr$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder(bldr$lzy, bitmap$0).append__jl_CharSequence__I__I__jl_StringBuilder(str, start.elem$1, idx.elem$1).toString__T()
  }
});
ScalaJS.c.s_StringContext$.prototype.bldr$lzycompute$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder = (function(bldr$lzy$1, bitmap$0$1) {
  if (((bitmap$0$1.elem$1 & 1) === 0)) {
    bldr$lzy$1.elem$1 = new ScalaJS.c.jl_StringBuilder().init___();
    bitmap$0$1.elem$1 = (bitmap$0$1.elem$1 | 1)
  };
  return ScalaJS.as.jl_StringBuilder(bldr$lzy$1.elem$1)
});
ScalaJS.c.s_StringContext$.prototype.bldr$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder = (function(bldr$lzy$1, bitmap$0$1) {
  if (((bitmap$0$1.elem$1 & 1) === 0)) {
    return this.bldr$lzycompute$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder(bldr$lzy$1, bitmap$0$1)
  } else {
    return ScalaJS.as.jl_StringBuilder(bldr$lzy$1.elem$1)
  }
});
ScalaJS.c.s_StringContext$.prototype.output$1__p1__C__T__sr_ObjectRef__sr_IntRef__sr_IntRef__sr_IntRef__sr_VolatileByteRef__V = (function(ch, str$1, bldr$lzy$1, start$1, cur$1, idx$1, bitmap$0$1) {
  this.bldr$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder(bldr$lzy$1, bitmap$0$1).append__jl_CharSequence__I__I__jl_StringBuilder(str$1, start$1.elem$1, cur$1.elem$1);
  this.bldr$1__p1__sr_ObjectRef__sr_VolatileByteRef__jl_StringBuilder(bldr$lzy$1, bitmap$0$1).append__C__jl_StringBuilder(ch);
  start$1.elem$1 = idx$1.elem$1
});
/*<skip>*/;
ScalaJS.is.s_StringContext$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_StringContext$)))
});
ScalaJS.as.s_StringContext$ = (function(obj) {
  if ((ScalaJS.is.s_StringContext$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.StringContext$")
  }
});
ScalaJS.isArrayOf.s_StringContext$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_StringContext$)))
});
ScalaJS.asArrayOf.s_StringContext$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_StringContext$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.StringContext$;", depth)
  }
});
ScalaJS.d.s_StringContext$ = new ScalaJS.ClassTypeData({
  s_StringContext$: 0
}, false, "scala.StringContext$", ScalaJS.d.O, {
  s_StringContext$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_StringContext$.prototype.$classData = ScalaJS.d.s_StringContext$;
ScalaJS.n.s_StringContext = undefined;
ScalaJS.m.s_StringContext = (function() {
  if ((!ScalaJS.n.s_StringContext)) {
    ScalaJS.n.s_StringContext = new ScalaJS.c.s_StringContext$().init___()
  };
  return ScalaJS.n.s_StringContext
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_compat_Platform$ = (function() {
  ScalaJS.c.O.call(this);
  this.EOL$1 = null
});
ScalaJS.c.s_compat_Platform$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_compat_Platform$.prototype.constructor = ScalaJS.c.s_compat_Platform$;
/** @constructor */
ScalaJS.h.s_compat_Platform$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_compat_Platform$.prototype = ScalaJS.c.s_compat_Platform$.prototype;
ScalaJS.c.s_compat_Platform$.prototype.arraycopy__O__I__O__I__I__V = (function(src, srcPos, dest, destPos, length) {
  ScalaJS.systemArraycopy(src, srcPos, dest, destPos, length)
});
ScalaJS.c.s_compat_Platform$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_compat_Platform = this;
  this.EOL$1 = "\n";
  return this
});
/*<skip>*/;
ScalaJS.is.s_compat_Platform$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_compat_Platform$)))
});
ScalaJS.as.s_compat_Platform$ = (function(obj) {
  if ((ScalaJS.is.s_compat_Platform$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.compat.Platform$")
  }
});
ScalaJS.isArrayOf.s_compat_Platform$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_compat_Platform$)))
});
ScalaJS.asArrayOf.s_compat_Platform$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_compat_Platform$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.compat.Platform$;", depth)
  }
});
ScalaJS.d.s_compat_Platform$ = new ScalaJS.ClassTypeData({
  s_compat_Platform$: 0
}, false, "scala.compat.Platform$", ScalaJS.d.O, {
  s_compat_Platform$: 1,
  O: 1
});
ScalaJS.c.s_compat_Platform$.prototype.$classData = ScalaJS.d.s_compat_Platform$;
ScalaJS.n.s_compat_Platform = undefined;
ScalaJS.m.s_compat_Platform = (function() {
  if ((!ScalaJS.n.s_compat_Platform)) {
    ScalaJS.n.s_compat_Platform = new ScalaJS.c.s_compat_Platform$().init___()
  };
  return ScalaJS.n.s_compat_Platform
});
/*<skip>*/;
ScalaJS.is.s_concurrent_Future = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_concurrent_Future)))
});
ScalaJS.as.s_concurrent_Future = (function(obj) {
  if ((ScalaJS.is.s_concurrent_Future(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.concurrent.Future")
  }
});
ScalaJS.isArrayOf.s_concurrent_Future = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_concurrent_Future)))
});
ScalaJS.asArrayOf.s_concurrent_Future = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_concurrent_Future(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.concurrent.Future;", depth)
  }
});
ScalaJS.d.s_concurrent_Future = new ScalaJS.ClassTypeData({
  s_concurrent_Future: 0
}, true, "scala.concurrent.Future", undefined, {
  s_concurrent_Future: 1,
  s_concurrent_Awaitable: 1,
  O: 1
});
/** @constructor */
ScalaJS.c.s_math_Equiv$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_math_Equiv$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_math_Equiv$.prototype.constructor = ScalaJS.c.s_math_Equiv$;
/** @constructor */
ScalaJS.h.s_math_Equiv$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_math_Equiv$.prototype = ScalaJS.c.s_math_Equiv$.prototype;
ScalaJS.c.s_math_Equiv$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_math_Equiv = this;
  ScalaJS.i.s_math_LowPriorityEquiv$class__$init$__s_math_Equiv$__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_math_Equiv$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_math_Equiv$)))
});
ScalaJS.as.s_math_Equiv$ = (function(obj) {
  if ((ScalaJS.is.s_math_Equiv$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.math.Equiv$")
  }
});
ScalaJS.isArrayOf.s_math_Equiv$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_math_Equiv$)))
});
ScalaJS.asArrayOf.s_math_Equiv$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_math_Equiv$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.math.Equiv$;", depth)
  }
});
ScalaJS.d.s_math_Equiv$ = new ScalaJS.ClassTypeData({
  s_math_Equiv$: 0
}, false, "scala.math.Equiv$", ScalaJS.d.O, {
  s_math_Equiv$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_math_LowPriorityEquiv: 1,
  O: 1
});
ScalaJS.c.s_math_Equiv$.prototype.$classData = ScalaJS.d.s_math_Equiv$;
ScalaJS.n.s_math_Equiv = undefined;
ScalaJS.m.s_math_Equiv = (function() {
  if ((!ScalaJS.n.s_math_Equiv)) {
    ScalaJS.n.s_math_Equiv = new ScalaJS.c.s_math_Equiv$().init___()
  };
  return ScalaJS.n.s_math_Equiv
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_math_Numeric$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_math_Numeric$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_math_Numeric$.prototype.constructor = ScalaJS.c.s_math_Numeric$;
/** @constructor */
ScalaJS.h.s_math_Numeric$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_math_Numeric$.prototype = ScalaJS.c.s_math_Numeric$.prototype;
/*<skip>*/;
ScalaJS.is.s_math_Numeric$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_math_Numeric$)))
});
ScalaJS.as.s_math_Numeric$ = (function(obj) {
  if ((ScalaJS.is.s_math_Numeric$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.math.Numeric$")
  }
});
ScalaJS.isArrayOf.s_math_Numeric$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_math_Numeric$)))
});
ScalaJS.asArrayOf.s_math_Numeric$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_math_Numeric$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.math.Numeric$;", depth)
  }
});
ScalaJS.d.s_math_Numeric$ = new ScalaJS.ClassTypeData({
  s_math_Numeric$: 0
}, false, "scala.math.Numeric$", ScalaJS.d.O, {
  s_math_Numeric$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_math_Numeric$.prototype.$classData = ScalaJS.d.s_math_Numeric$;
ScalaJS.n.s_math_Numeric = undefined;
ScalaJS.m.s_math_Numeric = (function() {
  if ((!ScalaJS.n.s_math_Numeric)) {
    ScalaJS.n.s_math_Numeric = new ScalaJS.c.s_math_Numeric$().init___()
  };
  return ScalaJS.n.s_math_Numeric
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_math_Ordered$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_math_Ordered$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_math_Ordered$.prototype.constructor = ScalaJS.c.s_math_Ordered$;
/** @constructor */
ScalaJS.h.s_math_Ordered$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_math_Ordered$.prototype = ScalaJS.c.s_math_Ordered$.prototype;
/*<skip>*/;
ScalaJS.is.s_math_Ordered$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_math_Ordered$)))
});
ScalaJS.as.s_math_Ordered$ = (function(obj) {
  if ((ScalaJS.is.s_math_Ordered$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.math.Ordered$")
  }
});
ScalaJS.isArrayOf.s_math_Ordered$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_math_Ordered$)))
});
ScalaJS.asArrayOf.s_math_Ordered$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_math_Ordered$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.math.Ordered$;", depth)
  }
});
ScalaJS.d.s_math_Ordered$ = new ScalaJS.ClassTypeData({
  s_math_Ordered$: 0
}, false, "scala.math.Ordered$", ScalaJS.d.O, {
  s_math_Ordered$: 1,
  O: 1
});
ScalaJS.c.s_math_Ordered$.prototype.$classData = ScalaJS.d.s_math_Ordered$;
ScalaJS.n.s_math_Ordered = undefined;
ScalaJS.m.s_math_Ordered = (function() {
  if ((!ScalaJS.n.s_math_Ordered)) {
    ScalaJS.n.s_math_Ordered = new ScalaJS.c.s_math_Ordered$().init___()
  };
  return ScalaJS.n.s_math_Ordered
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_math_Ordering$ = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_math_Ordering$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_math_Ordering$.prototype.constructor = ScalaJS.c.s_math_Ordering$;
/** @constructor */
ScalaJS.h.s_math_Ordering$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_math_Ordering$.prototype = ScalaJS.c.s_math_Ordering$.prototype;
ScalaJS.c.s_math_Ordering$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_math_Ordering = this;
  ScalaJS.i.s_math_LowPriorityOrderingImplicits$class__$init$__s_math_LowPriorityOrderingImplicits__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_math_Ordering$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_math_Ordering$)))
});
ScalaJS.as.s_math_Ordering$ = (function(obj) {
  if ((ScalaJS.is.s_math_Ordering$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.math.Ordering$")
  }
});
ScalaJS.isArrayOf.s_math_Ordering$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_math_Ordering$)))
});
ScalaJS.asArrayOf.s_math_Ordering$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_math_Ordering$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.math.Ordering$;", depth)
  }
});
ScalaJS.d.s_math_Ordering$ = new ScalaJS.ClassTypeData({
  s_math_Ordering$: 0
}, false, "scala.math.Ordering$", ScalaJS.d.O, {
  s_math_Ordering$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_math_LowPriorityOrderingImplicits: 1,
  O: 1
});
ScalaJS.c.s_math_Ordering$.prototype.$classData = ScalaJS.d.s_math_Ordering$;
ScalaJS.n.s_math_Ordering = undefined;
ScalaJS.m.s_math_Ordering = (function() {
  if ((!ScalaJS.n.s_math_Ordering)) {
    ScalaJS.n.s_math_Ordering = new ScalaJS.c.s_math_Ordering$().init___()
  };
  return ScalaJS.n.s_math_Ordering
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_math_package$ = (function() {
  ScalaJS.c.O.call(this);
  this.E$1 = 0.0;
  this.Pi$1 = 0.0
});
ScalaJS.c.s_math_package$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_math_package$.prototype.constructor = ScalaJS.c.s_math_package$;
/** @constructor */
ScalaJS.h.s_math_package$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_math_package$.prototype = ScalaJS.c.s_math_package$.prototype;
ScalaJS.c.s_math_package$.prototype.random__D = (function() {
  return ScalaJS.m.jl_Math().random__D()
});
ScalaJS.c.s_math_package$.prototype.max__I__I__I = (function(x, y) {
  return ScalaJS.m.jl_Math().max__I__I__I(x, y)
});
ScalaJS.c.s_math_package$.prototype.min__I__I__I = (function(x, y) {
  return ScalaJS.m.jl_Math().min__I__I__I(x, y)
});
ScalaJS.c.s_math_package$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_math_package = this;
  this.E$1 = 2.718281828459045;
  this.Pi$1 = 3.141592653589793;
  return this
});
/*<skip>*/;
ScalaJS.is.s_math_package$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_math_package$)))
});
ScalaJS.as.s_math_package$ = (function(obj) {
  if ((ScalaJS.is.s_math_package$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.math.package$")
  }
});
ScalaJS.isArrayOf.s_math_package$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_math_package$)))
});
ScalaJS.asArrayOf.s_math_package$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_math_package$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.math.package$;", depth)
  }
});
ScalaJS.d.s_math_package$ = new ScalaJS.ClassTypeData({
  s_math_package$: 0
}, false, "scala.math.package$", ScalaJS.d.O, {
  s_math_package$: 1,
  O: 1
});
ScalaJS.c.s_math_package$.prototype.$classData = ScalaJS.d.s_math_package$;
ScalaJS.n.s_math_package = undefined;
ScalaJS.m.s_math_package = (function() {
  if ((!ScalaJS.n.s_math_package)) {
    ScalaJS.n.s_math_package = new ScalaJS.c.s_math_package$().init___()
  };
  return ScalaJS.n.s_math_package
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_package$ = (function() {
  ScalaJS.c.O.call(this);
  this.AnyRef$1 = null;
  this.Traversable$1 = null;
  this.Iterable$1 = null;
  this.Seq$1 = null;
  this.IndexedSeq$1 = null;
  this.Iterator$1 = null;
  this.List$1 = null;
  this.Nil$1 = null;
  this.$$colon$colon$1 = null;
  this.$$plus$colon$1 = null;
  this.$$colon$plus$1 = null;
  this.Stream$1 = null;
  this.$$hash$colon$colon$1 = null;
  this.Vector$1 = null;
  this.StringBuilder$1 = null;
  this.Range$1 = null;
  this.BigDecimal$1 = null;
  this.BigInt$1 = null;
  this.Equiv$1 = null;
  this.Numeric$1 = null;
  this.Ordered$1 = null;
  this.Ordering$1 = null;
  this.Either$1 = null;
  this.Left$1 = null;
  this.Right$1 = null;
  this.bitmap$0$1 = 0
});
ScalaJS.c.s_package$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_package$.prototype.constructor = ScalaJS.c.s_package$;
/** @constructor */
ScalaJS.h.s_package$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_package$.prototype = ScalaJS.c.s_package$.prototype;
ScalaJS.c.s_package$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_package = this;
  this.AnyRef$1 = new ScalaJS.c.s_package$$anon$1().init___();
  this.Traversable$1 = ScalaJS.m.sc_Traversable();
  this.Iterable$1 = ScalaJS.m.sc_Iterable();
  this.Seq$1 = ScalaJS.m.sc_Seq();
  this.IndexedSeq$1 = ScalaJS.m.sc_IndexedSeq();
  this.Iterator$1 = ScalaJS.m.sc_Iterator();
  this.List$1 = ScalaJS.m.sci_List();
  this.Nil$1 = ScalaJS.m.sci_Nil();
  this.$$colon$colon$1 = ScalaJS.m.sci_$colon$colon();
  this.$$plus$colon$1 = ScalaJS.m.sc_$plus$colon();
  this.$$colon$plus$1 = ScalaJS.m.sc_$colon$plus();
  this.Stream$1 = ScalaJS.m.sci_Stream();
  this.$$hash$colon$colon$1 = ScalaJS.m.sci_Stream$$hash$colon$colon();
  this.Vector$1 = ScalaJS.m.sci_Vector();
  this.StringBuilder$1 = ScalaJS.m.scm_StringBuilder();
  this.Range$1 = ScalaJS.m.sci_Range();
  this.Equiv$1 = ScalaJS.m.s_math_Equiv();
  this.Numeric$1 = ScalaJS.m.s_math_Numeric();
  this.Ordered$1 = ScalaJS.m.s_math_Ordered();
  this.Ordering$1 = ScalaJS.m.s_math_Ordering();
  this.Either$1 = ScalaJS.m.s_util_Either();
  this.Left$1 = ScalaJS.m.s_util_Left();
  this.Right$1 = ScalaJS.m.s_util_Right();
  return this
});
/*<skip>*/;
ScalaJS.is.s_package$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_package$)))
});
ScalaJS.as.s_package$ = (function(obj) {
  if ((ScalaJS.is.s_package$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.package$")
  }
});
ScalaJS.isArrayOf.s_package$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_package$)))
});
ScalaJS.asArrayOf.s_package$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_package$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.package$;", depth)
  }
});
ScalaJS.d.s_package$ = new ScalaJS.ClassTypeData({
  s_package$: 0
}, false, "scala.package$", ScalaJS.d.O, {
  s_package$: 1,
  O: 1
});
ScalaJS.c.s_package$.prototype.$classData = ScalaJS.d.s_package$;
ScalaJS.n.s_package = undefined;
ScalaJS.m.s_package = (function() {
  if ((!ScalaJS.n.s_package)) {
    ScalaJS.n.s_package = new ScalaJS.c.s_package$().init___()
  };
  return ScalaJS.n.s_package
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_package$$anon$1 = (function() {
  ScalaJS.c.O.call(this)
});
ScalaJS.c.s_package$$anon$1.prototype = new ScalaJS.h.O();
ScalaJS.c.s_package$$anon$1.prototype.constructor = ScalaJS.c.s_package$$anon$1;
/** @constructor */
ScalaJS.h.s_package$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.s_package$$anon$1.prototype = ScalaJS.c.s_package$$anon$1.prototype;
ScalaJS.c.s_package$$anon$1.prototype.toString__T = (function() {
  return "object AnyRef"
});
/*<skip>*/;
ScalaJS.is.s_package$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_package$$anon$1)))
});
ScalaJS.as.s_package$$anon$1 = (function(obj) {
  if ((ScalaJS.is.s_package$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.package$$anon$1")
  }
});
ScalaJS.isArrayOf.s_package$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_package$$anon$1)))
});
ScalaJS.asArrayOf.s_package$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_package$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.package$$anon$1;", depth)
  }
});
ScalaJS.d.s_package$$anon$1 = new ScalaJS.ClassTypeData({
  s_package$$anon$1: 0
}, false, "scala.package$$anon$1", ScalaJS.d.O, {
  s_package$$anon$1: 1,
  s_Specializable: 1,
  s_SpecializableCompanion: 1,
  O: 1
});
ScalaJS.c.s_package$$anon$1.prototype.$classData = ScalaJS.d.s_package$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_reflect_AnyValManifest = (function() {
  ScalaJS.c.O.call(this);
  this.toString$1 = null;
  this.hashCode$1 = 0
});
ScalaJS.c.s_reflect_AnyValManifest.prototype = new ScalaJS.h.O();
ScalaJS.c.s_reflect_AnyValManifest.prototype.constructor = ScalaJS.c.s_reflect_AnyValManifest;
/** @constructor */
ScalaJS.h.s_reflect_AnyValManifest = (function() {
  /*<skip>*/
});
ScalaJS.h.s_reflect_AnyValManifest.prototype = ScalaJS.c.s_reflect_AnyValManifest.prototype;
ScalaJS.c.s_reflect_AnyValManifest.prototype.toString__T = (function() {
  return this.toString$1
});
ScalaJS.c.s_reflect_AnyValManifest.prototype.equals__O__Z = (function(that) {
  return (this === that)
});
ScalaJS.c.s_reflect_AnyValManifest.prototype.hashCode__I = (function() {
  return this.hashCode$1
});
ScalaJS.c.s_reflect_AnyValManifest.prototype.init___T = (function(toString) {
  this.toString$1 = toString;
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.i.s_reflect_ClassManifestDeprecatedApis$class__$init$__s_reflect_ClassTag__V(this);
  ScalaJS.i.s_reflect_ClassTag$class__$init$__s_reflect_ClassTag__V(this);
  ScalaJS.i.s_reflect_Manifest$class__$init$__s_reflect_Manifest__V(this);
  this.hashCode$1 = ScalaJS.m.jl_System().identityHashCode__O__I(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_reflect_AnyValManifest = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_reflect_AnyValManifest)))
});
ScalaJS.as.s_reflect_AnyValManifest = (function(obj) {
  if ((ScalaJS.is.s_reflect_AnyValManifest(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.reflect.AnyValManifest")
  }
});
ScalaJS.isArrayOf.s_reflect_AnyValManifest = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_reflect_AnyValManifest)))
});
ScalaJS.asArrayOf.s_reflect_AnyValManifest = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_reflect_AnyValManifest(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.reflect.AnyValManifest;", depth)
  }
});
ScalaJS.d.s_reflect_AnyValManifest = new ScalaJS.ClassTypeData({
  s_reflect_AnyValManifest: 0
}, false, "scala.reflect.AnyValManifest", ScalaJS.d.O, {
  s_reflect_AnyValManifest: 1,
  s_reflect_Manifest: 1,
  s_reflect_ClassTag: 1,
  s_Equals: 1,
  s_reflect_ClassManifestDeprecatedApis: 1,
  s_reflect_OptManifest: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_reflect_AnyValManifest.prototype.$classData = ScalaJS.d.s_reflect_AnyValManifest;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_reflect_ClassManifestFactory$ = (function() {
  ScalaJS.c.O.call(this);
  this.Byte$1 = null;
  this.Short$1 = null;
  this.Char$1 = null;
  this.Int$1 = null;
  this.Long$1 = null;
  this.Float$1 = null;
  this.Double$1 = null;
  this.Boolean$1 = null;
  this.Unit$1 = null;
  this.Any$1 = null;
  this.Object$1 = null;
  this.AnyVal$1 = null;
  this.Nothing$1 = null;
  this.Null$1 = null
});
ScalaJS.c.s_reflect_ClassManifestFactory$.prototype = new ScalaJS.h.O();
ScalaJS.c.s_reflect_ClassManifestFactory$.prototype.constructor = ScalaJS.c.s_reflect_ClassManifestFactory$;
/** @constructor */
ScalaJS.h.s_reflect_ClassManifestFactory$ = (function() {
  /*<skip>*/
});
ScalaJS.h.s_reflect_ClassManifestFactory$.prototype = ScalaJS.c.s_reflect_ClassManifestFactory$.prototype;
ScalaJS.c.s_reflect_ClassManifestFactory$.prototype.init___ = (function() {
  ScalaJS.c.O.prototype.init___.call(this);
  ScalaJS.n.s_reflect_ClassManifestFactory = this;
  this.Byte$1 = ScalaJS.m.s_reflect_ManifestFactory().Byte__s_reflect_AnyValManifest();
  this.Short$1 = ScalaJS.m.s_reflect_ManifestFactory().Short__s_reflect_AnyValManifest();
  this.Char$1 = ScalaJS.m.s_reflect_ManifestFactory().Char__s_reflect_AnyValManifest();
  this.Int$1 = ScalaJS.m.s_reflect_ManifestFactory().Int__s_reflect_AnyValManifest();
  this.Long$1 = ScalaJS.m.s_reflect_ManifestFactory().Long__s_reflect_AnyValManifest();
  this.Float$1 = ScalaJS.m.s_reflect_ManifestFactory().Float__s_reflect_AnyValManifest();
  this.Double$1 = ScalaJS.m.s_reflect_ManifestFactory().Double__s_reflect_AnyValManifest();
  this.Boolean$1 = ScalaJS.m.s_reflect_ManifestFactory().Boolean__s_reflect_AnyValManifest();
  this.Unit$1 = ScalaJS.m.s_reflect_ManifestFactory().Unit__s_reflect_AnyValManifest();
  this.Any$1 = ScalaJS.m.s_reflect_ManifestFactory().Any__s_reflect_Manifest();
  this.Object$1 = ScalaJS.m.s_reflect_ManifestFactory().Object__s_reflect_Manifest();
  this.AnyVal$1 = ScalaJS.m.s_reflect_ManifestFactory().AnyVal__s_reflect_Manifest();
  this.Nothing$1 = ScalaJS.m.s_reflect_ManifestFactory().Nothing__s_reflect_Manifest();
  this.Null$1 = ScalaJS.m.s_reflect_ManifestFactory().Null__s_reflect_Manifest();
  return this
});
/*<skip>*/;
ScalaJS.is.s_reflect_ClassManifestFactory$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_reflect_ClassManifestFactory$)))
});
ScalaJS.as.s_reflect_ClassManifestFactory$ = (function(obj) {
  if ((ScalaJS.is.s_reflect_ClassManifestFactory$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.reflect.ClassManifestFactory$")
  }
});
ScalaJS.isArrayOf.s_reflect_ClassManifestFactory$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_reflect_ClassManifestFactory$)))
});
ScalaJS.asArrayOf.s_reflect_ClassManifestFactory$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_reflect_ClassManifestFactory$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.reflect.ClassManifestFactory$;", depth)
  }
});
ScalaJS.d.s_reflect_ClassManifestFactory$ = new ScalaJS.ClassTypeData({
  s_reflect_ClassManifestFactory$: 0
}, false, "scala.reflect.ClassManifestFactory$", ScalaJS.d.O, {
  s_reflect_ClassManifestFactory$: 1,
  O: 1
});
ScalaJS.c.s_reflect_ClassManifestFactory$.prototype.$classData = ScalaJS.d.s_reflect_ClassManifestFactory$;
ScalaJS.n.s_reflect_ClassManifestFactory = undefined;
ScalaJS.m.s_reflect_ClassManifestFactory = (function() {
  if ((!ScalaJS.n.s_reflect_ClassManifestFactory)) {
    ScalaJS.n.s_reflect_ClassManifestFactory = new ScalaJS.c.s_reflect_ClassManifestFactory$().init___()
  };
  return ScalaJS.n.s_reflect_ClassManifestFactory
});
/*<skip>*/;
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ClassTag$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ClassTag$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$ClassTypeManifest = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_NoManifest$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_package$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_DynamicVariable = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Either$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Left$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Random = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Right$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Try = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Try$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_control_Breaks = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_control_NoStackTrace$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_control_NonFatal$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_hashing_MurmurHash3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_hashing_package$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_xml_Equality$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_xml_NamespaceBinding = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_$colon$plus$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_$plus$colon$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractIterator = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractTraversable = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Iterator$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_TraversableLike$WithFilter = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenMapFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenMapFactory$MapCanBuildFrom = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenTraversableFactory$GenericCanBuildFrom = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenericCompanion = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_$colon$colon$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$Merger = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet$ListSetBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Range$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$$hash$colon$colon$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$ConsWrapper = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$cons$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StreamIterator$LazyCell = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StringLike$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StringOps = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StringOps$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_VectorBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_WrappedString$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayOps$ofRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayOps$ofRef$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_Builder$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_DefaultEntry = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_FlatHashTable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_GrowingBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashTable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_LazyBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_MapBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_SetBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_StringBuilder$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArrayBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_concurrent_JSExecutionContext$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_concurrent_JSExecutionContext$Implicits$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_concurrent_QueueExecutionContext$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_concurrent_RunNowExecutionContext$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_js_Any$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_js_UndefOr$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_js_UndefOrOps$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_RuntimeLong$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_RuntimeString$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_StackTrace$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction0 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractPartialFunction = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_BooleanRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_BoxesRunTime$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_BoxesRunTime$Codes$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_IntRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_ObjectRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_RichChar$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_RichInt$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_ScalaRunTime$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_StringAdd$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_VolatileByteRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_VolatileObjectRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Ljava_io_FilterOutputStream = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$IriItemPickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$IriItemUnpickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$MenuConsPickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$MenuConsUnpickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$MenuItemPickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$MenuItemUnpickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$StrConsPickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lmodels_RegisterPicklers$StrConsUnpickler$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ClassBinder$$anonfun$bindClass$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ClassBinder$$anonfun$classIf$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ClassBinder$$anonfun$classUnless$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_JustBinding$$anonfun$makeGoToHandler$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_PropertyBinder$$anonfun$makePropHandler$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ScalaTagsBinder$$anonfun$bindHTML$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ScalaTagsBinder$$anonfun$updateAttrByRx$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_VisibilityBinder$$anonfun$hideIf$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_VisibilityBinder$$anonfun$showIf$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$4 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$5 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$6 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$7 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$8 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anonfun$5 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView$$anonfun$bindView$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView$$anonfun$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_BindingView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_BindingView$$anonfun$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_BindingView$$anonfun$attributesToParams$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView$$anonfun$bindView$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView$$anonfun$extractTemplate$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView$$anonfun$extractTemplate$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView$$anonfun$extractTemplate$2$$anonfun$apply$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_MapView$$anonfun$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_OrganizedView$$anonfun$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lrx_ops_Zipper = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_Error = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_Exception = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_InheritableThreadLocal = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_StandardErr$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_StandardOut$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_Formatter$$anonfun$format$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_Array$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_None$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_PartialFunction$$anonfun$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_Predef$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_Predef$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_Predef$$anon$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_Some = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$10 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$11 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$12 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$13 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$14 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$6 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$7 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$8 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$9 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$PhantomManifest = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Failure = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Random$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_Success = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_control_BreakControl = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_hashing_MurmurHash3$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_xml_TopScope$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractIterable = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_IndexedSeqLike$Elements = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Iterator$$anon$10 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Iterator$$anon$11 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Iterator$$anon$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_LinearSeqLike$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_MapLike$$anon$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenSetFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenTraversableFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenTraversableFactory$ReusableCBF = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_MapFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$$anon$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$$anon$2$$anon$3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListMap$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$StreamBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$StreamCanBuildFrom = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StreamIterator = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_StringLike$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_TrieIterator = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Vector$VectorReusableCBF = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_VectorIterator = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayBuilder$ofRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_FlatHashTable$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashMap$$anon$4 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashTable$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ListBuffer$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_AnonFunction0 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_AnonFunction1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_AnonFunction2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjsr_RuntimeLong = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction0$mcV$sp = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractFunction1$mcVI$sp = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_AbstractPartialFunction$mcVL$sp = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sr_ScalaRunTime$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Ljava_io_PrintStream = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_ClassBinder$$anonfun$classPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_GeneralBinding$$anonfun$loadIntoPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_GeneralBinding$$anonfun$otherPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_PropertyBinder$$anonfun$propertyPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_VisibilityBinder$$anonfun$visibilityPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_MapView$$anonfun$itemPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_OrganizedView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_OrganizedView$$anonfun$upPartial$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_OrganizedView$$anonfun$upPartial$1$$anonfun$applyOrElse$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_AssertionError = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_RuntimeException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$4 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_reflect_ManifestFactory$$anon$5 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_util_DynamicVariable$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractSeq = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_AbstractSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Iterable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_MapLike$DefaultValuesIterable = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Traversable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_GenSeqFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_ImmutableMapFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_MutableMapFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_SetFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$HashTrieMap$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$HashTrieSet$$anon$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Iterable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Traversable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_AbstractIterable = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_FlatHashTable$$anonfun$checkConsistent$1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_Iterable$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_OrdinaryView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_ArithmeticException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_ClassCastException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_IllegalArgumentException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_IllegalStateException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_IndexOutOfBoundsException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_NullPointerException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_StandardErrPrintStream$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_StandardOutPrintStream$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_UnsupportedOperationException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_NoSuchElementException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_MatchError = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_ImmutableSetFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_MutableSetFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scg_SeqFactory = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_AbstractMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_List = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Range = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$EmptySet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$Set1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$Set2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$Set3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$Set4 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Vector = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_WrappedString = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_AbstractMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_AbstractSeq = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_AbstractSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_Map$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sjs_js_JavaScriptException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_MapView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.jl_NumberFormatException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_FormatterClosedException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_IllegalFormatException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.s_StringContext$InvalidEscapeException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_IndexedSeq$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sc_Seq$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_$colon$colon = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$EmptyHashSet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$HashSet1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$HashSetCollision1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashSet$HashTrieSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_IndexedSeq$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_List$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet$EmptyListSet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListSet$Node = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$EmptyMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$Map1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$Map2 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$Map3 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Map$Map4 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Nil$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Range$Inclusive = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Seq$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Set$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$Cons = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Stream$Empty$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_Vector$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_AbstractBuffer = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayBuffer$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashSet = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_HashSet$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_IndexedSeq$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ListBuffer$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_StringBuilder = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_FormatFlagsConversionMismatchException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_IllegalFormatFlagsException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.ju_MissingFormatArgumentException = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$EmptyHashMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$HashMap1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$HashMapCollision1 = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_HashMap$HashTrieMap = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListMap$EmptyListMap$ = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.sci_ListMap$Node = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ArrayBuffer = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_ListBuffer = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofBoolean = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofByte = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofChar = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofDouble = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofFloat = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofInt = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofLong = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofRef = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofShort = function() {};
/** @constructor (dummy parent) */
ScalaJS.h.scm_WrappedArray$ofUnit = function() {};
//# sourceMappingURL=frontend-fastopt.js.map
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  alaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.sc_AbstractSet.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractIterable.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  ScalaJS.i.sc_GenSetLike$class__$init$__sc_GenSetLike__V(this);
  ScalaJS.i.scg_GenericSetTemplate$class__$init$__scg_GenericSetTemplate__V(this);
  ScalaJS.i.sc_GenSet$class__$init$__sc_GenSet__V(this);
  ScalaJS.i.scg_Subtractable$class__$init$__scg_Subtractable__V(this);
  ScalaJS.i.sc_SetLike$class__$init$__sc_SetLike__V(this);
  ScalaJS.i.sc_Set$class__$init$__sc_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sc_AbstractSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_AbstractSet)))
});
ScalaJS.as.sc_AbstractSet = (function(obj) {
  if ((ScalaJS.is.sc_AbstractSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.AbstractSet")
  }
});
ScalaJS.isArrayOf.sc_AbstractSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_AbstractSet)))
});
ScalaJS.asArrayOf.sc_AbstractSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_AbstractSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.AbstractSet;", depth)
  }
});
ScalaJS.d.sc_AbstractSet = new ScalaJS.ClassTypeData({
  sc_AbstractSet: 0
}, false, "scala.collection.AbstractSet", ScalaJS.d.sc_AbstractIterable, {
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sc_AbstractSet.prototype.$classData = ScalaJS.d.sc_AbstractSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sc_Iterable$ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this)
});
ScalaJS.c.sc_Iterable$.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.sc_Iterable$.prototype.constructor = ScalaJS.c.sc_Iterable$;
/** @constructor */
ScalaJS.h.sc_Iterable$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sc_Iterable$.prototype = ScalaJS.c.sc_Iterable$.prototype;
ScalaJS.c.sc_Iterable$.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_Iterable().newBuilder__scm_Builder()
});
/*<skip>*/;
ScalaJS.is.sc_Iterable$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_Iterable$)))
});
ScalaJS.as.sc_Iterable$ = (function(obj) {
  if ((ScalaJS.is.sc_Iterable$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.Iterable$")
  }
});
ScalaJS.isArrayOf.sc_Iterable$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_Iterable$)))
});
ScalaJS.asArrayOf.sc_Iterable$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_Iterable$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.Iterable$;", depth)
  }
});
ScalaJS.d.sc_Iterable$ = new ScalaJS.ClassTypeData({
  sc_Iterable$: 0
}, false, "scala.collection.Iterable$", ScalaJS.d.scg_GenTraversableFactory, {
  sc_Iterable$: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sc_Iterable$.prototype.$classData = ScalaJS.d.sc_Iterable$;
ScalaJS.n.sc_Iterable = undefined;
ScalaJS.m.sc_Iterable = (function() {
  if ((!ScalaJS.n.sc_Iterable)) {
    ScalaJS.n.sc_Iterable = new ScalaJS.c.sc_Iterable$().init___()
  };
  return ScalaJS.n.sc_Iterable
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sc_MapLike$DefaultValuesIterable = (function() {
  ScalaJS.c.sc_AbstractIterable.call(this);
  this.$$outer$f = null
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype = new ScalaJS.h.sc_AbstractIterable();
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.constructor = ScalaJS.c.sc_MapLike$DefaultValuesIterable;
/** @constructor */
ScalaJS.h.sc_MapLike$DefaultValuesIterable = (function() {
  /*<skip>*/
});
ScalaJS.h.sc_MapLike$DefaultValuesIterable.prototype = ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype;
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.iterator__sc_Iterator = (function() {
  return this.scala$collection$MapLike$DefaultValuesIterable$$$outer__sc_MapLike().valuesIterator__sc_Iterator()
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.size__I = (function() {
  return this.scala$collection$MapLike$DefaultValuesIterable$$$outer__sc_MapLike().size__I()
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.foreach__F1__V = (function(f) {
  this.scala$collection$MapLike$DefaultValuesIterable$$$outer__sc_MapLike().valuesIterator__sc_Iterator().foreach__F1__V(f)
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.scala$collection$MapLike$DefaultValuesIterable$$$outer__sc_MapLike = (function() {
  return this.$$outer$f
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.init___sc_MapLike = (function($$outer) {
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.sc_AbstractIterable.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sc_MapLike$DefaultValuesIterable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_MapLike$DefaultValuesIterable)))
});
ScalaJS.as.sc_MapLike$DefaultValuesIterable = (function(obj) {
  if ((ScalaJS.is.sc_MapLike$DefaultValuesIterable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.MapLike$DefaultValuesIterable")
  }
});
ScalaJS.isArrayOf.sc_MapLike$DefaultValuesIterable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_MapLike$DefaultValuesIterable)))
});
ScalaJS.asArrayOf.sc_MapLike$DefaultValuesIterable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_MapLike$DefaultValuesIterable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.MapLike$DefaultValuesIterable;", depth)
  }
});
ScalaJS.d.sc_MapLike$DefaultValuesIterable = new ScalaJS.ClassTypeData({
  sc_MapLike$DefaultValuesIterable: 0
}, false, "scala.collection.MapLike$DefaultValuesIterable", ScalaJS.d.sc_AbstractIterable, {
  sc_MapLike$DefaultValuesIterable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sc_MapLike$DefaultValuesIterable.prototype.$classData = ScalaJS.d.sc_MapLike$DefaultValuesIterable;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sc_Traversable$ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this);
  this.breaks$3 = null
});
ScalaJS.c.sc_Traversable$.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.sc_Traversable$.prototype.constructor = ScalaJS.c.sc_Traversable$;
/** @constructor */
ScalaJS.h.sc_Traversable$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sc_Traversable$.prototype = ScalaJS.c.sc_Traversable$.prototype;
ScalaJS.c.sc_Traversable$.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_Traversable().newBuilder__scm_Builder()
});
ScalaJS.c.sc_Traversable$.prototype.init___ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.prototype.init___.call(this);
  ScalaJS.n.sc_Traversable = this;
  this.breaks$3 = new ScalaJS.c.s_util_control_Breaks().init___();
  return this
});
/*<skip>*/;
ScalaJS.is.sc_Traversable$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_Traversable$)))
});
ScalaJS.as.sc_Traversable$ = (function(obj) {
  if ((ScalaJS.is.sc_Traversable$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.Traversable$")
  }
});
ScalaJS.isArrayOf.sc_Traversable$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_Traversable$)))
});
ScalaJS.asArrayOf.sc_Traversable$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_Traversable$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.Traversable$;", depth)
  }
});
ScalaJS.d.sc_Traversable$ = new ScalaJS.ClassTypeData({
  sc_Traversable$: 0
}, false, "scala.collection.Traversable$", ScalaJS.d.scg_GenTraversableFactory, {
  sc_Traversable$: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sc_Traversable$.prototype.$classData = ScalaJS.d.sc_Traversable$;
ScalaJS.n.sc_Traversable = undefined;
ScalaJS.m.sc_Traversable = (function() {
  if ((!ScalaJS.n.sc_Traversable)) {
    ScalaJS.n.sc_Traversable = new ScalaJS.c.sc_Traversable$().init___()
  };
  return ScalaJS.n.sc_Traversable
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_GenSeqFactory = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this)
});
ScalaJS.c.scg_GenSeqFactory.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.scg_GenSeqFactory.prototype.constructor = ScalaJS.c.scg_GenSeqFactory;
/** @constructor */
ScalaJS.h.scg_GenSeqFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_GenSeqFactory.prototype = ScalaJS.c.scg_GenSeqFactory.prototype;
/*<skip>*/;
ScalaJS.is.scg_GenSeqFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_GenSeqFactory)))
});
ScalaJS.as.scg_GenSeqFactory = (function(obj) {
  if ((ScalaJS.is.scg_GenSeqFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.GenSeqFactory")
  }
});
ScalaJS.isArrayOf.scg_GenSeqFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_GenSeqFactory)))
});
ScalaJS.asArrayOf.scg_GenSeqFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_GenSeqFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.GenSeqFactory;", depth)
  }
});
ScalaJS.d.scg_GenSeqFactory = new ScalaJS.ClassTypeData({
  scg_GenSeqFactory: 0
}, false, "scala.collection.generic.GenSeqFactory", ScalaJS.d.scg_GenTraversableFactory, {
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scg_GenSeqFactory.prototype.$classData = ScalaJS.d.scg_GenSeqFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_ImmutableMapFactory = (function() {
  ScalaJS.c.scg_MapFactory.call(this)
});
ScalaJS.c.scg_ImmutableMapFactory.prototype = new ScalaJS.h.scg_MapFactory();
ScalaJS.c.scg_ImmutableMapFactory.prototype.constructor = ScalaJS.c.scg_ImmutableMapFactory;
/** @constructor */
ScalaJS.h.scg_ImmutableMapFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_ImmutableMapFactory.prototype = ScalaJS.c.scg_ImmutableMapFactory.prototype;
/*<skip>*/;
ScalaJS.is.scg_ImmutableMapFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_ImmutableMapFactory)))
});
ScalaJS.as.scg_ImmutableMapFactory = (function(obj) {
  if ((ScalaJS.is.scg_ImmutableMapFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.ImmutableMapFactory")
  }
});
ScalaJS.isArrayOf.scg_ImmutableMapFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_ImmutableMapFactory)))
});
ScalaJS.asArrayOf.scg_ImmutableMapFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_ImmutableMapFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.ImmutableMapFactory;", depth)
  }
});
ScalaJS.d.scg_ImmutableMapFactory = new ScalaJS.ClassTypeData({
  scg_ImmutableMapFactory: 0
}, false, "scala.collection.generic.ImmutableMapFactory", ScalaJS.d.scg_MapFactory, {
  scg_ImmutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.scg_ImmutableMapFactory.prototype.$classData = ScalaJS.d.scg_ImmutableMapFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_MutableMapFactory = (function() {
  ScalaJS.c.scg_MapFactory.call(this)
});
ScalaJS.c.scg_MutableMapFactory.prototype = new ScalaJS.h.scg_MapFactory();
ScalaJS.c.scg_MutableMapFactory.prototype.constructor = ScalaJS.c.scg_MutableMapFactory;
/** @constructor */
ScalaJS.h.scg_MutableMapFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_MutableMapFactory.prototype = ScalaJS.c.scg_MutableMapFactory.prototype;
ScalaJS.c.scg_MutableMapFactory.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.as.scm_Builder(this.empty__sc_Map())
});
/*<skip>*/;
ScalaJS.is.scg_MutableMapFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_MutableMapFactory)))
});
ScalaJS.as.scg_MutableMapFactory = (function(obj) {
  if ((ScalaJS.is.scg_MutableMapFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.MutableMapFactory")
  }
});
ScalaJS.isArrayOf.scg_MutableMapFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_MutableMapFactory)))
});
ScalaJS.asArrayOf.scg_MutableMapFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_MutableMapFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.MutableMapFactory;", depth)
  }
});
ScalaJS.d.scg_MutableMapFactory = new ScalaJS.ClassTypeData({
  scg_MutableMapFactory: 0
}, false, "scala.collection.generic.MutableMapFactory", ScalaJS.d.scg_MapFactory, {
  scg_MutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.scg_MutableMapFactory.prototype.$classData = ScalaJS.d.scg_MutableMapFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_SetFactory = (function() {
  ScalaJS.c.scg_GenSetFactory.call(this)
});
ScalaJS.c.scg_SetFactory.prototype = new ScalaJS.h.scg_GenSetFactory();
ScalaJS.c.scg_SetFactory.prototype.constructor = ScalaJS.c.scg_SetFactory;
/** @constructor */
ScalaJS.h.scg_SetFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_SetFactory.prototype = ScalaJS.c.scg_SetFactory.prototype;
/*<skip>*/;
ScalaJS.is.scg_SetFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_SetFactory)))
});
ScalaJS.as.scg_SetFactory = (function(obj) {
  if ((ScalaJS.is.scg_SetFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.SetFactory")
  }
});
ScalaJS.isArrayOf.scg_SetFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_SetFactory)))
});
ScalaJS.asArrayOf.scg_SetFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_SetFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.SetFactory;", depth)
  }
});
ScalaJS.d.scg_SetFactory = new ScalaJS.ClassTypeData({
  scg_SetFactory: 0
}, false, "scala.collection.generic.SetFactory", ScalaJS.d.scg_GenSetFactory, {
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scg_SetFactory.prototype.$classData = ScalaJS.d.scg_SetFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1 = (function() {
  ScalaJS.c.sci_TrieIterator.call(this)
});
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype = new ScalaJS.h.sci_TrieIterator();
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype.constructor = ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1;
/** @constructor */
ScalaJS.h.sci_HashMap$HashTrieMap$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$HashTrieMap$$anon$1.prototype = ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype;
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype.getElem__O__T2 = (function(cc) {
  return ScalaJS.as.sci_HashMap$HashMap1(cc).ensurePair__T2()
});
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype.getElem__O__O = (function(x) {
  return this.getElem__O__T2(x)
});
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype.init___sci_HashMap$HashTrieMap = (function($$outer) {
  ScalaJS.c.sci_TrieIterator.prototype.init___Asci_Iterable.call(this, ScalaJS.asArrayOf.sci_Iterable($$outer.elems__Asci_HashMap(), 1));
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap$HashTrieMap$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$HashTrieMap$$anon$1)))
});
ScalaJS.as.sci_HashMap$HashTrieMap$$anon$1 = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$HashTrieMap$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$HashTrieMap$$anon$1")
  }
});
ScalaJS.isArrayOf.sci_HashMap$HashTrieMap$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$HashTrieMap$$anon$1)))
});
ScalaJS.asArrayOf.sci_HashMap$HashTrieMap$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$HashTrieMap$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$HashTrieMap$$anon$1;", depth)
  }
});
ScalaJS.d.sci_HashMap$HashTrieMap$$anon$1 = new ScalaJS.ClassTypeData({
  sci_HashMap$HashTrieMap$$anon$1: 0
}, false, "scala.collection.immutable.HashMap$HashTrieMap$$anon$1", ScalaJS.d.sci_TrieIterator, {
  sci_HashMap$HashTrieMap$$anon$1: 1,
  sci_TrieIterator: 1,
  sc_AbstractIterator: 1,
  sc_Iterator: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1.prototype.$classData = ScalaJS.d.sci_HashMap$HashTrieMap$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1 = (function() {
  ScalaJS.c.sci_TrieIterator.call(this)
});
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype = new ScalaJS.h.sci_TrieIterator();
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype.constructor = ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1;
/** @constructor */
ScalaJS.h.sci_HashSet$HashTrieSet$$anon$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$HashTrieSet$$anon$1.prototype = ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype;
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype.getElem__O__O = (function(cc) {
  return ScalaJS.as.sci_HashSet$HashSet1(cc).key__O()
});
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype.init___sci_HashSet$HashTrieSet = (function($$outer) {
  ScalaJS.c.sci_TrieIterator.prototype.init___Asci_Iterable.call(this, ScalaJS.asArrayOf.sci_Iterable($$outer.elems__Asci_HashSet(), 1));
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashSet$HashTrieSet$$anon$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$HashTrieSet$$anon$1)))
});
ScalaJS.as.sci_HashSet$HashTrieSet$$anon$1 = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$HashTrieSet$$anon$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$HashTrieSet$$anon$1")
  }
});
ScalaJS.isArrayOf.sci_HashSet$HashTrieSet$$anon$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$HashTrieSet$$anon$1)))
});
ScalaJS.asArrayOf.sci_HashSet$HashTrieSet$$anon$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$HashTrieSet$$anon$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$HashTrieSet$$anon$1;", depth)
  }
});
ScalaJS.d.sci_HashSet$HashTrieSet$$anon$1 = new ScalaJS.ClassTypeData({
  sci_HashSet$HashTrieSet$$anon$1: 0
}, false, "scala.collection.immutable.HashSet$HashTrieSet$$anon$1", ScalaJS.d.sci_TrieIterator, {
  sci_HashSet$HashTrieSet$$anon$1: 1,
  sci_TrieIterator: 1,
  sc_AbstractIterator: 1,
  sc_Iterator: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1.prototype.$classData = ScalaJS.d.sci_HashSet$HashTrieSet$$anon$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Iterable$ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this)
});
ScalaJS.c.sci_Iterable$.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.sci_Iterable$.prototype.constructor = ScalaJS.c.sci_Iterable$;
/** @constructor */
ScalaJS.h.sci_Iterable$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Iterable$.prototype = ScalaJS.c.sci_Iterable$.prototype;
ScalaJS.c.sci_Iterable$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return this.ReusableCBF__scg_GenTraversableFactory$GenericCanBuildFrom()
});
ScalaJS.c.sci_Iterable$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ListBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.sci_Iterable$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Iterable$)))
});
ScalaJS.as.sci_Iterable$ = (function(obj) {
  if ((ScalaJS.is.sci_Iterable$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Iterable$")
  }
});
ScalaJS.isArrayOf.sci_Iterable$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Iterable$)))
});
ScalaJS.asArrayOf.sci_Iterable$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Iterable$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Iterable$;", depth)
  }
});
ScalaJS.d.sci_Iterable$ = new ScalaJS.ClassTypeData({
  sci_Iterable$: 0
}, false, "scala.collection.immutable.Iterable$", ScalaJS.d.scg_GenTraversableFactory, {
  sci_Iterable$: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Iterable$.prototype.$classData = ScalaJS.d.sci_Iterable$;
ScalaJS.n.sci_Iterable = undefined;
ScalaJS.m.sci_Iterable = (function() {
  if ((!ScalaJS.n.sci_Iterable)) {
    ScalaJS.n.sci_Iterable = new ScalaJS.c.sci_Iterable$().init___()
  };
  return ScalaJS.n.sci_Iterable
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Traversable$ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this)
});
ScalaJS.c.sci_Traversable$.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.sci_Traversable$.prototype.constructor = ScalaJS.c.sci_Traversable$;
/** @constructor */
ScalaJS.h.sci_Traversable$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Traversable$.prototype = ScalaJS.c.sci_Traversable$.prototype;
ScalaJS.c.sci_Traversable$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ListBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.sci_Traversable$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Traversable$)))
});
ScalaJS.as.sci_Traversable$ = (function(obj) {
  if ((ScalaJS.is.sci_Traversable$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Traversable$")
  }
});
ScalaJS.isArrayOf.sci_Traversable$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Traversable$)))
});
ScalaJS.asArrayOf.sci_Traversable$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Traversable$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Traversable$;", depth)
  }
});
ScalaJS.d.sci_Traversable$ = new ScalaJS.ClassTypeData({
  sci_Traversable$: 0
}, false, "scala.collection.immutable.Traversable$", ScalaJS.d.scg_GenTraversableFactory, {
  sci_Traversable$: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Traversable$.prototype.$classData = ScalaJS.d.sci_Traversable$;
ScalaJS.n.sci_Traversable = undefined;
ScalaJS.m.sci_Traversable = (function() {
  if ((!ScalaJS.n.sci_Traversable)) {
    ScalaJS.n.sci_Traversable = new ScalaJS.c.sci_Traversable$().init___()
  };
  return ScalaJS.n.sci_Traversable
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_AbstractIterable = (function() {
  ScalaJS.c.sc_AbstractIterable.call(this)
});
ScalaJS.c.scm_AbstractIterable.prototype = new ScalaJS.h.sc_AbstractIterable();
ScalaJS.c.scm_AbstractIterable.prototype.constructor = ScalaJS.c.scm_AbstractIterable;
/** @constructor */
ScalaJS.h.scm_AbstractIterable = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_AbstractIterable.prototype = ScalaJS.c.scm_AbstractIterable.prototype;
ScalaJS.c.scm_AbstractIterable.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractIterable.prototype.init___.call(this);
  ScalaJS.i.scm_Traversable$class__$init$__scm_Traversable__V(this);
  ScalaJS.i.scm_Iterable$class__$init$__scm_Iterable__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_AbstractIterable = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_AbstractIterable)))
});
ScalaJS.as.scm_AbstractIterable = (function(obj) {
  if ((ScalaJS.is.scm_AbstractIterable(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.AbstractIterable")
  }
});
ScalaJS.isArrayOf.scm_AbstractIterable = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_AbstractIterable)))
});
ScalaJS.asArrayOf.scm_AbstractIterable = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_AbstractIterable(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.AbstractIterable;", depth)
  }
});
ScalaJS.d.scm_AbstractIterable = new ScalaJS.ClassTypeData({
  scm_AbstractIterable: 0
}, false, "scala.collection.mutable.AbstractIterable", ScalaJS.d.sc_AbstractIterable, {
  scm_AbstractIterable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_AbstractIterable.prototype.$classData = ScalaJS.d.scm_AbstractIterable;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function() {
  ScalaJS.c.sr_AbstractFunction1$mcVI$sp.call(this);
  this.$$outer$3 = null
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype = new ScalaJS.h.sr_AbstractFunction1$mcVI$sp();
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.constructor = ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1;
/** @constructor */
ScalaJS.h.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype = ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype;
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.apply__I__V = (function(i) {
  this.apply$mcVI$sp__I__V(i)
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.apply$mcVI$sp__I__V = (function(i) {
  if (((this.$$outer$3.table__AO().u[i] !== null) && (!this.$$outer$3.containsEntry__O__Z(this.$$outer$3.table__AO().u[i])))) {
    ScalaJS.m.s_Predef().assert__Z__F0__V(false, new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, i$1) {
      return (function() {
        return ((((i$1 + " ") + arg$outer.scala$collection$mutable$FlatHashTable$$anonfun$$$outer__scm_FlatHashTable().table__AO().u[i$1]) + " ") + ScalaJS.m.s_Predef().refArrayOps__AO__scm_ArrayOps(arg$outer.scala$collection$mutable$FlatHashTable$$anonfun$$$outer__scm_FlatHashTable().table__AO()).mkString__T())
      })
    })(this, i)))
  }
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.scala$collection$mutable$FlatHashTable$$anonfun$$$outer__scm_FlatHashTable = (function() {
  return this.$$outer$3
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.apply__O__O = (function(v1) {
  this.apply__I__V(ScalaJS.uI(v1))
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.init___scm_FlatHashTable = (function($$outer) {
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$3 = $$outer
  };
  ScalaJS.c.sr_AbstractFunction1$mcVI$sp.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_FlatHashTable$$anonfun$checkConsistent$1)))
});
ScalaJS.as.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function(obj) {
  if ((ScalaJS.is.scm_FlatHashTable$$anonfun$checkConsistent$1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1")
  }
});
ScalaJS.isArrayOf.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_FlatHashTable$$anonfun$checkConsistent$1)))
});
ScalaJS.asArrayOf.scm_FlatHashTable$$anonfun$checkConsistent$1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_FlatHashTable$$anonfun$checkConsistent$1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1;", depth)
  }
});
ScalaJS.d.scm_FlatHashTable$$anonfun$checkConsistent$1 = new ScalaJS.ClassTypeData({
  scm_FlatHashTable$$anonfun$checkConsistent$1: 0
}, false, "scala.collection.mutable.FlatHashTable$$anonfun$checkConsistent$1", ScalaJS.d.sr_AbstractFunction1$mcVI$sp, {
  scm_FlatHashTable$$anonfun$checkConsistent$1: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sr_AbstractFunction1$mcVI$sp: 1,
  s_Function1$mcVI$sp: 1,
  sr_AbstractFunction1: 1,
  F1: 1,
  O: 1
});
ScalaJS.c.scm_FlatHashTable$$anonfun$checkConsistent$1.prototype.$classData = ScalaJS.d.scm_FlatHashTable$$anonfun$checkConsistent$1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_Iterable$ = (function() {
  ScalaJS.c.scg_GenTraversableFactory.call(this)
});
ScalaJS.c.scm_Iterable$.prototype = new ScalaJS.h.scg_GenTraversableFactory();
ScalaJS.c.scm_Iterable$.prototype.constructor = ScalaJS.c.scm_Iterable$;
/** @constructor */
ScalaJS.h.scm_Iterable$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_Iterable$.prototype = ScalaJS.c.scm_Iterable$.prototype;
ScalaJS.c.scm_Iterable$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ArrayBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.scm_Iterable$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_Iterable$)))
});
ScalaJS.as.scm_Iterable$ = (function(obj) {
  if ((ScalaJS.is.scm_Iterable$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.Iterable$")
  }
});
ScalaJS.isArrayOf.scm_Iterable$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_Iterable$)))
});
ScalaJS.asArrayOf.scm_Iterable$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_Iterable$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.Iterable$;", depth)
  }
});
ScalaJS.d.scm_Iterable$ = new ScalaJS.ClassTypeData({
  scm_Iterable$: 0
}, false, "scala.collection.mutable.Iterable$", ScalaJS.d.scg_GenTraversableFactory, {
  scm_Iterable$: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scm_Iterable$.prototype.$classData = ScalaJS.d.scm_Iterable$;
ScalaJS.n.scm_Iterable = undefined;
ScalaJS.m.scm_Iterable = (function() {
  if ((!ScalaJS.n.scm_Iterable)) {
    ScalaJS.n.scm_Iterable = new ScalaJS.c.scm_Iterable$().init___()
  };
  return ScalaJS.n.scm_Iterable
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_OrdinaryView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrganizedView.call(this)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype = new ScalaJS.h.Lorg_denigma_views_OrganizedView();
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_OrdinaryView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_OrdinaryView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_OrdinaryView.prototype = ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype;
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map = (function(t, evidence$2) {
  return ScalaJS.i.Lorg_denigma_binding_EventBinding$class__extractMouseEvens__Lorg_denigma_binding_EventBinding__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, t, evidence$2)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.bindEvents__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function(el, ats) {
  ScalaJS.i.Lorg_denigma_binding_EventBinding$class__bindEvents__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_HTMLElement__sci_Map__V(this, el, ats)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.bindClick__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Var__V = (function(el, key, ev) {
  ScalaJS.i.Lorg_denigma_binding_EventBinding$class__bindClick__Lorg_denigma_binding_EventBinding__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Var__V(this, el, key, ev)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map = (function(t, evidence$1) {
  return ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__extractTagRx__Lorg_denigma_binding_ScalaTagsBinder__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, t, evidence$1)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.bindHTML__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function(el, ats) {
  ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__bindHTML__Lorg_denigma_binding_ScalaTagsBinder__Lorg_scalajs_dom_HTMLElement__sci_Map__V(this, el, ats)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.updateAttrByRx__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__V = (function(key, el, rtag) {
  ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__updateAttrByRx__Lorg_denigma_binding_ScalaTagsBinder__T__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__V(this, key, el, rtag)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.bindAttributes__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function(el, ats) {
  this.bindHTML__Lorg_scalajs_dom_HTMLElement__sci_Map__V(el, ats);
  this.bindProperties__Lorg_scalajs_dom_HTMLElement__sci_Map__V(el, ats);
  this.bindEvents__Lorg_scalajs_dom_HTMLElement__sci_Map__V(el, ats)
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement = (function(name, elem) {
  ScalaJS.c.Lorg_denigma_views_OrganizedView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, name, elem);
  ScalaJS.i.Lorg_denigma_binding_ScalaTagsBinder$class__$init$__Lorg_denigma_binding_ScalaTagsBinder__V(this);
  ScalaJS.i.Lorg_denigma_binding_EventBinding$class__$init$__Lorg_denigma_binding_EventBinding__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_OrdinaryView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_OrdinaryView)))
});
ScalaJS.as.Lorg_denigma_views_OrdinaryView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_OrdinaryView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.OrdinaryView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_OrdinaryView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_OrdinaryView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_OrdinaryView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_OrdinaryView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.OrdinaryView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_OrdinaryView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_OrdinaryView: 0
}, false, "org.denigma.views.OrdinaryView", ScalaJS.d.Lorg_denigma_views_OrganizedView, {
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_OrdinaryView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_ArithmeticException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_ArithmeticException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_ArithmeticException.prototype.constructor = ScalaJS.c.jl_ArithmeticException;
/** @constructor */
ScalaJS.h.jl_ArithmeticException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_ArithmeticException.prototype = ScalaJS.c.jl_ArithmeticException.prototype;
/*<skip>*/;
ScalaJS.is.jl_ArithmeticException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_ArithmeticException)))
});
ScalaJS.as.jl_ArithmeticException = (function(obj) {
  if ((ScalaJS.is.jl_ArithmeticException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.ArithmeticException")
  }
});
ScalaJS.isArrayOf.jl_ArithmeticException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_ArithmeticException)))
});
ScalaJS.asArrayOf.jl_ArithmeticException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_ArithmeticException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.ArithmeticException;", depth)
  }
});
ScalaJS.d.jl_ArithmeticException = new ScalaJS.ClassTypeData({
  jl_ArithmeticException: 0
}, false, "java.lang.ArithmeticException", ScalaJS.d.jl_RuntimeException, {
  jl_ArithmeticException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_ArithmeticException.prototype.$classData = ScalaJS.d.jl_ArithmeticException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_ClassCastException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_ClassCastException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_ClassCastException.prototype.constructor = ScalaJS.c.jl_ClassCastException;
/** @constructor */
ScalaJS.h.jl_ClassCastException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_ClassCastException.prototype = ScalaJS.c.jl_ClassCastException.prototype;
/*<skip>*/;
ScalaJS.is.jl_ClassCastException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_ClassCastException)))
});
ScalaJS.as.jl_ClassCastException = (function(obj) {
  if ((ScalaJS.is.jl_ClassCastException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.ClassCastException")
  }
});
ScalaJS.isArrayOf.jl_ClassCastException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_ClassCastException)))
});
ScalaJS.asArrayOf.jl_ClassCastException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_ClassCastException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.ClassCastException;", depth)
  }
});
ScalaJS.d.jl_ClassCastException = new ScalaJS.ClassTypeData({
  jl_ClassCastException: 0
}, false, "java.lang.ClassCastException", ScalaJS.d.jl_RuntimeException, {
  jl_ClassCastException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_ClassCastException.prototype.$classData = ScalaJS.d.jl_ClassCastException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_IllegalArgumentException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_IllegalArgumentException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_IllegalArgumentException.prototype.constructor = ScalaJS.c.jl_IllegalArgumentException;
/** @constructor */
ScalaJS.h.jl_IllegalArgumentException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_IllegalArgumentException.prototype = ScalaJS.c.jl_IllegalArgumentException.prototype;
ScalaJS.c.jl_IllegalArgumentException.prototype.init___T = (function(s) {
  ScalaJS.c.jl_IllegalArgumentException.prototype.init___T__jl_Throwable.call(this, s, null);
  return this
});
ScalaJS.c.jl_IllegalArgumentException.prototype.init___ = (function() {
  ScalaJS.c.jl_IllegalArgumentException.prototype.init___T__jl_Throwable.call(this, null, null);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_IllegalArgumentException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_IllegalArgumentException)))
});
ScalaJS.as.jl_IllegalArgumentException = (function(obj) {
  if ((ScalaJS.is.jl_IllegalArgumentException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.IllegalArgumentException")
  }
});
ScalaJS.isArrayOf.jl_IllegalArgumentException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_IllegalArgumentException)))
});
ScalaJS.asArrayOf.jl_IllegalArgumentException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_IllegalArgumentException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.IllegalArgumentException;", depth)
  }
});
ScalaJS.d.jl_IllegalArgumentException = new ScalaJS.ClassTypeData({
  jl_IllegalArgumentException: 0
}, false, "java.lang.IllegalArgumentException", ScalaJS.d.jl_RuntimeException, {
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_IllegalArgumentException.prototype.$classData = ScalaJS.d.jl_IllegalArgumentException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_IllegalStateException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_IllegalStateException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_IllegalStateException.prototype.constructor = ScalaJS.c.jl_IllegalStateException;
/** @constructor */
ScalaJS.h.jl_IllegalStateException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_IllegalStateException.prototype = ScalaJS.c.jl_IllegalStateException.prototype;
ScalaJS.c.jl_IllegalStateException.prototype.init___ = (function() {
  ScalaJS.c.jl_IllegalStateException.prototype.init___T__jl_Throwable.call(this, null, null);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_IllegalStateException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_IllegalStateException)))
});
ScalaJS.as.jl_IllegalStateException = (function(obj) {
  if ((ScalaJS.is.jl_IllegalStateException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.IllegalStateException")
  }
});
ScalaJS.isArrayOf.jl_IllegalStateException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_IllegalStateException)))
});
ScalaJS.asArrayOf.jl_IllegalStateException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_IllegalStateException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.IllegalStateException;", depth)
  }
});
ScalaJS.d.jl_IllegalStateException = new ScalaJS.ClassTypeData({
  jl_IllegalStateException: 0
}, false, "java.lang.IllegalStateException", ScalaJS.d.jl_RuntimeException, {
  jl_IllegalStateException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_IllegalStateException.prototype.$classData = ScalaJS.d.jl_IllegalStateException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_IndexOutOfBoundsException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_IndexOutOfBoundsException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_IndexOutOfBoundsException.prototype.constructor = ScalaJS.c.jl_IndexOutOfBoundsException;
/** @constructor */
ScalaJS.h.jl_IndexOutOfBoundsException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_IndexOutOfBoundsException.prototype = ScalaJS.c.jl_IndexOutOfBoundsException.prototype;
/*<skip>*/;
ScalaJS.is.jl_IndexOutOfBoundsException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_IndexOutOfBoundsException)))
});
ScalaJS.as.jl_IndexOutOfBoundsException = (function(obj) {
  if ((ScalaJS.is.jl_IndexOutOfBoundsException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.IndexOutOfBoundsException")
  }
});
ScalaJS.isArrayOf.jl_IndexOutOfBoundsException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_IndexOutOfBoundsException)))
});
ScalaJS.asArrayOf.jl_IndexOutOfBoundsException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_IndexOutOfBoundsException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.IndexOutOfBoundsException;", depth)
  }
});
ScalaJS.d.jl_IndexOutOfBoundsException = new ScalaJS.ClassTypeData({
  jl_IndexOutOfBoundsException: 0
}, false, "java.lang.IndexOutOfBoundsException", ScalaJS.d.jl_RuntimeException, {
  jl_IndexOutOfBoundsException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_IndexOutOfBoundsException.prototype.$classData = ScalaJS.d.jl_IndexOutOfBoundsException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_NullPointerException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_NullPointerException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_NullPointerException.prototype.constructor = ScalaJS.c.jl_NullPointerException;
/** @constructor */
ScalaJS.h.jl_NullPointerException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_NullPointerException.prototype = ScalaJS.c.jl_NullPointerException.prototype;
ScalaJS.c.jl_NullPointerException.prototype.init___ = (function() {
  ScalaJS.c.jl_NullPointerException.prototype.init___T.call(this, null);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_NullPointerException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_NullPointerException)))
});
ScalaJS.as.jl_NullPointerException = (function(obj) {
  if ((ScalaJS.is.jl_NullPointerException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.NullPointerException")
  }
});
ScalaJS.isArrayOf.jl_NullPointerException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_NullPointerException)))
});
ScalaJS.asArrayOf.jl_NullPointerException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_NullPointerException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.NullPointerException;", depth)
  }
});
ScalaJS.d.jl_NullPointerException = new ScalaJS.ClassTypeData({
  jl_NullPointerException: 0
}, false, "java.lang.NullPointerException", ScalaJS.d.jl_RuntimeException, {
  jl_NullPointerException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_NullPointerException.prototype.$classData = ScalaJS.d.jl_NullPointerException;
/*<skip>*/;
ScalaJS.is.jl_StackOverflowError = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_StackOverflowError)))
});
ScalaJS.as.jl_StackOverflowError = (function(obj) {
  if ((ScalaJS.is.jl_StackOverflowError(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.StackOverflowError")
  }
});
ScalaJS.isArrayOf.jl_StackOverflowError = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_StackOverflowError)))
});
ScalaJS.asArrayOf.jl_StackOverflowError = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_StackOverflowError(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.StackOverflowError;", depth)
  }
});
ScalaJS.d.jl_StackOverflowError = new ScalaJS.ClassTypeData({
  jl_StackOverflowError: 0
}, false, "java.lang.StackOverflowError", ScalaJS.d.jl_VirtualMachineError, {
  jl_StackOverflowError: 1,
  jl_VirtualMachineError: 1,
  jl_Error: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_StandardErrPrintStream$ = (function() {
  ScalaJS.c.Ljava_io_PrintStream.call(this);
  this.java$lang$JSConsoleBasedPrintStream$$flushed$4 = false;
  this.java$lang$JSConsoleBasedPrintStream$$buffer$4 = null;
  this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4 = null;
  this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4 = null
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype = new ScalaJS.h.Ljava_io_PrintStream();
ScalaJS.c.jl_StandardErrPrintStream$.prototype.constructor = ScalaJS.c.jl_StandardErrPrintStream$;
/** @constructor */
ScalaJS.h.jl_StandardErrPrintStream$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_StandardErrPrintStream$.prototype = ScalaJS.c.jl_StandardErrPrintStream$.prototype;
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$flushed__Z = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$flushed$4
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$flushed$4 = x$1
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$buffer__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$buffer$4
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$buffer$4 = x$1
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$lineContEnd__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$lineContStart__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContEnd$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4 = x$1
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContStart$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4 = x$1
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.print__T__V = (function(s) {
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__print__jl_JSConsoleBasedPrintStream__T__V(this, s)
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.flush__V = (function() {
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__flush__jl_JSConsoleBasedPrintStream__V(this)
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.doWriteLine__T__V = (function(line) {
  if ((!ScalaJS.uZ((!ScalaJS.g["console"])))) {
    ScalaJS.g["console"]["error"](line)
  }
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.init___ = (function() {
  ScalaJS.c.Ljava_io_PrintStream.prototype.init___Ljava_io_OutputStream__Z.call(this, ScalaJS.m.jl_StandardErr(), true);
  ScalaJS.n.jl_StandardErrPrintStream = this;
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__$init$__jl_JSConsoleBasedPrintStream__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_StandardErrPrintStream$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_StandardErrPrintStream$)))
});
ScalaJS.as.jl_StandardErrPrintStream$ = (function(obj) {
  if ((ScalaJS.is.jl_StandardErrPrintStream$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.StandardErrPrintStream$")
  }
});
ScalaJS.isArrayOf.jl_StandardErrPrintStream$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_StandardErrPrintStream$)))
});
ScalaJS.asArrayOf.jl_StandardErrPrintStream$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_StandardErrPrintStream$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.StandardErrPrintStream$;", depth)
  }
});
ScalaJS.d.jl_StandardErrPrintStream$ = new ScalaJS.ClassTypeData({
  jl_StandardErrPrintStream$: 0
}, false, "java.lang.StandardErrPrintStream$", ScalaJS.d.Ljava_io_PrintStream, {
  jl_StandardErrPrintStream$: 1,
  jl_JSConsoleBasedPrintStream: 1,
  Ljava_io_PrintStream: 1,
  jl_Appendable: 1,
  Ljava_io_FilterOutputStream: 1,
  Ljava_io_OutputStream: 1,
  Ljava_io_Flushable: 1,
  Ljava_io_Closeable: 1,
  O: 1
});
ScalaJS.c.jl_StandardErrPrintStream$.prototype.$classData = ScalaJS.d.jl_StandardErrPrintStream$;
ScalaJS.n.jl_StandardErrPrintStream = undefined;
ScalaJS.m.jl_StandardErrPrintStream = (function() {
  if ((!ScalaJS.n.jl_StandardErrPrintStream)) {
    ScalaJS.n.jl_StandardErrPrintStream = new ScalaJS.c.jl_StandardErrPrintStream$().init___()
  };
  return ScalaJS.n.jl_StandardErrPrintStream
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_StandardOutPrintStream$ = (function() {
  ScalaJS.c.Ljava_io_PrintStream.call(this);
  this.java$lang$JSConsoleBasedPrintStream$$flushed$4 = false;
  this.java$lang$JSConsoleBasedPrintStream$$buffer$4 = null;
  this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4 = null;
  this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4 = null
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype = new ScalaJS.h.Ljava_io_PrintStream();
ScalaJS.c.jl_StandardOutPrintStream$.prototype.constructor = ScalaJS.c.jl_StandardOutPrintStream$;
/** @constructor */
ScalaJS.h.jl_StandardOutPrintStream$ = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_StandardOutPrintStream$.prototype = ScalaJS.c.jl_StandardOutPrintStream$.prototype;
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$flushed__Z = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$flushed$4
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$flushed$und$eq__Z__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$flushed$4 = x$1
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$buffer__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$buffer$4
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$buffer$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$buffer$4 = x$1
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$lineContEnd__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$lineContStart__T = (function() {
  return this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContEnd$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$lineContEnd$4 = x$1
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.java$lang$JSConsoleBasedPrintStream$$undsetter$und$java$lang$JSConsoleBasedPrintStream$$lineContStart$und$eq__T__V = (function(x$1) {
  this.java$lang$JSConsoleBasedPrintStream$$lineContStart$4 = x$1
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.print__T__V = (function(s) {
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__print__jl_JSConsoleBasedPrintStream__T__V(this, s)
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.flush__V = (function() {
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__flush__jl_JSConsoleBasedPrintStream__V(this)
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.doWriteLine__T__V = (function(line) {
  if ((!ScalaJS.uZ((!ScalaJS.g["console"])))) {
    ScalaJS.g["console"]["log"](line)
  }
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.init___ = (function() {
  ScalaJS.c.Ljava_io_PrintStream.prototype.init___Ljava_io_OutputStream__Z.call(this, ScalaJS.m.jl_StandardOut(), true);
  ScalaJS.n.jl_StandardOutPrintStream = this;
  ScalaJS.i.jl_JSConsoleBasedPrintStream$class__$init$__jl_JSConsoleBasedPrintStream__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_StandardOutPrintStream$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_StandardOutPrintStream$)))
});
ScalaJS.as.jl_StandardOutPrintStream$ = (function(obj) {
  if ((ScalaJS.is.jl_StandardOutPrintStream$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.StandardOutPrintStream$")
  }
});
ScalaJS.isArrayOf.jl_StandardOutPrintStream$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_StandardOutPrintStream$)))
});
ScalaJS.asArrayOf.jl_StandardOutPrintStream$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_StandardOutPrintStream$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.StandardOutPrintStream$;", depth)
  }
});
ScalaJS.d.jl_StandardOutPrintStream$ = new ScalaJS.ClassTypeData({
  jl_StandardOutPrintStream$: 0
}, false, "java.lang.StandardOutPrintStream$", ScalaJS.d.Ljava_io_PrintStream, {
  jl_StandardOutPrintStream$: 1,
  jl_JSConsoleBasedPrintStream: 1,
  Ljava_io_PrintStream: 1,
  jl_Appendable: 1,
  Ljava_io_FilterOutputStream: 1,
  Ljava_io_OutputStream: 1,
  Ljava_io_Flushable: 1,
  Ljava_io_Closeable: 1,
  O: 1
});
ScalaJS.c.jl_StandardOutPrintStream$.prototype.$classData = ScalaJS.d.jl_StandardOutPrintStream$;
ScalaJS.n.jl_StandardOutPrintStream = undefined;
ScalaJS.m.jl_StandardOutPrintStream = (function() {
  if ((!ScalaJS.n.jl_StandardOutPrintStream)) {
    ScalaJS.n.jl_StandardOutPrintStream = new ScalaJS.c.jl_StandardOutPrintStream$().init___()
  };
  return ScalaJS.n.jl_StandardOutPrintStream
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_UnsupportedOperationException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.jl_UnsupportedOperationException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.jl_UnsupportedOperationException.prototype.constructor = ScalaJS.c.jl_UnsupportedOperationException;
/** @constructor */
ScalaJS.h.jl_UnsupportedOperationException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_UnsupportedOperationException.prototype = ScalaJS.c.jl_UnsupportedOperationException.prototype;
ScalaJS.c.jl_UnsupportedOperationException.prototype.init___T = (function(s) {
  ScalaJS.c.jl_UnsupportedOperationException.prototype.init___T__jl_Throwable.call(this, s, null);
  return this
});
/*<skip>*/;
ScalaJS.is.jl_UnsupportedOperationException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_UnsupportedOperationException)))
});
ScalaJS.as.jl_UnsupportedOperationException = (function(obj) {
  if ((ScalaJS.is.jl_UnsupportedOperationException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.UnsupportedOperationException")
  }
});
ScalaJS.isArrayOf.jl_UnsupportedOperationException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_UnsupportedOperationException)))
});
ScalaJS.asArrayOf.jl_UnsupportedOperationException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_UnsupportedOperationException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.UnsupportedOperationException;", depth)
  }
});
ScalaJS.d.jl_UnsupportedOperationException = new ScalaJS.ClassTypeData({
  jl_UnsupportedOperationException: 0
}, false, "java.lang.UnsupportedOperationException", ScalaJS.d.jl_RuntimeException, {
  jl_UnsupportedOperationException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_UnsupportedOperationException.prototype.$classData = ScalaJS.d.jl_UnsupportedOperationException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_NoSuchElementException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this)
});
ScalaJS.c.ju_NoSuchElementException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.ju_NoSuchElementException.prototype.constructor = ScalaJS.c.ju_NoSuchElementException;
/** @constructor */
ScalaJS.h.ju_NoSuchElementException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_NoSuchElementException.prototype = ScalaJS.c.ju_NoSuchElementException.prototype;
ScalaJS.c.ju_NoSuchElementException.prototype.init___ = (function() {
  ScalaJS.c.ju_NoSuchElementException.prototype.init___T.call(this, null);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_NoSuchElementException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_NoSuchElementException)))
});
ScalaJS.as.ju_NoSuchElementException = (function(obj) {
  if ((ScalaJS.is.ju_NoSuchElementException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.NoSuchElementException")
  }
});
ScalaJS.isArrayOf.ju_NoSuchElementException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_NoSuchElementException)))
});
ScalaJS.asArrayOf.ju_NoSuchElementException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_NoSuchElementException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.NoSuchElementException;", depth)
  }
});
ScalaJS.d.ju_NoSuchElementException = new ScalaJS.ClassTypeData({
  ju_NoSuchElementException: 0
}, false, "java.util.NoSuchElementException", ScalaJS.d.jl_RuntimeException, {
  ju_NoSuchElementException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_NoSuchElementException.prototype.$classData = ScalaJS.d.ju_NoSuchElementException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_MatchError = (function() {
  ScalaJS.c.jl_RuntimeException.call(this);
  this.obj$4 = null;
  this.objString$4 = null;
  this.bitmap$0$4 = false
});
ScalaJS.c.s_MatchError.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.s_MatchError.prototype.constructor = ScalaJS.c.s_MatchError;
/** @constructor */
ScalaJS.h.s_MatchError = (function() {
  /*<skip>*/
});
ScalaJS.h.s_MatchError.prototype = ScalaJS.c.s_MatchError.prototype;
ScalaJS.c.s_MatchError.prototype.objString$lzycompute__p4__T = (function() {
  if ((!this.bitmap$0$4)) {
    if ((this.obj$4 === null)) {
      var jsx$1 = "null"
    } else {
      var jsx$1 = this.liftedTree1$1__p4__T()
    };
    this.objString$4 = jsx$1;
    this.bitmap$0$4 = true
  };
  return this.objString$4
});
ScalaJS.c.s_MatchError.prototype.objString__p4__T = (function() {
  if ((!this.bitmap$0$4)) {
    return this.objString$lzycompute__p4__T()
  } else {
    return this.objString$4
  }
});
ScalaJS.c.s_MatchError.prototype.getMessage__T = (function() {
  return this.objString__p4__T()
});
ScalaJS.c.s_MatchError.prototype.ofClass$1__p4__T = (function() {
  return ("of class " + ScalaJS.objectGetClass(this.obj$4).getName__T())
});
ScalaJS.c.s_MatchError.prototype.liftedTree1$1__p4__T = (function() {
  try {
    return (((ScalaJS.objectToString(this.obj$4) + " (") + this.ofClass$1__p4__T()) + ")")
  } catch (ex) {
    ex = ScalaJS.wrapJavaScriptException(ex);
    return ("an instance " + this.ofClass$1__p4__T())
  }
});
ScalaJS.c.s_MatchError.prototype.init___O = (function(obj) {
  this.obj$4 = obj;
  ScalaJS.c.jl_RuntimeException.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.s_MatchError = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_MatchError)))
});
ScalaJS.as.s_MatchError = (function(obj) {
  if ((ScalaJS.is.s_MatchError(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.MatchError")
  }
});
ScalaJS.isArrayOf.s_MatchError = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_MatchError)))
});
ScalaJS.asArrayOf.s_MatchError = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_MatchError(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.MatchError;", depth)
  }
});
ScalaJS.d.s_MatchError = new ScalaJS.ClassTypeData({
  s_MatchError: 0
}, false, "scala.MatchError", ScalaJS.d.jl_RuntimeException, {
  s_MatchError: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_MatchError.prototype.$classData = ScalaJS.d.s_MatchError;
/*<skip>*/;
ScalaJS.is.s_xml_NodeSeq = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_xml_NodeSeq)))
});
ScalaJS.as.s_xml_NodeSeq = (function(obj) {
  if ((ScalaJS.is.s_xml_NodeSeq(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.xml.NodeSeq")
  }
});
ScalaJS.isArrayOf.s_xml_NodeSeq = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_xml_NodeSeq)))
});
ScalaJS.asArrayOf.s_xml_NodeSeq = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_xml_NodeSeq(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.xml.NodeSeq;", depth)
  }
});
ScalaJS.d.s_xml_NodeSeq = new ScalaJS.ClassTypeData({
  s_xml_NodeSeq: 0
}, false, "scala.xml.NodeSeq", ScalaJS.d.sc_AbstractSeq, {
  s_xml_NodeSeq: 1,
  s_xml_Equality: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_ImmutableSetFactory = (function() {
  ScalaJS.c.scg_SetFactory.call(this)
});
ScalaJS.c.scg_ImmutableSetFactory.prototype = new ScalaJS.h.scg_SetFactory();
ScalaJS.c.scg_ImmutableSetFactory.prototype.constructor = ScalaJS.c.scg_ImmutableSetFactory;
/** @constructor */
ScalaJS.h.scg_ImmutableSetFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_ImmutableSetFactory.prototype = ScalaJS.c.scg_ImmutableSetFactory.prototype;
ScalaJS.c.scg_ImmutableSetFactory.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_SetBuilder().init___sc_Set(ScalaJS.as.sc_Set(this.empty__sc_GenTraversable()))
});
/*<skip>*/;
ScalaJS.is.scg_ImmutableSetFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_ImmutableSetFactory)))
});
ScalaJS.as.scg_ImmutableSetFactory = (function(obj) {
  if ((ScalaJS.is.scg_ImmutableSetFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.ImmutableSetFactory")
  }
});
ScalaJS.isArrayOf.scg_ImmutableSetFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_ImmutableSetFactory)))
});
ScalaJS.asArrayOf.scg_ImmutableSetFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_ImmutableSetFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.ImmutableSetFactory;", depth)
  }
});
ScalaJS.d.scg_ImmutableSetFactory = new ScalaJS.ClassTypeData({
  scg_ImmutableSetFactory: 0
}, false, "scala.collection.generic.ImmutableSetFactory", ScalaJS.d.scg_SetFactory, {
  scg_ImmutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scg_ImmutableSetFactory.prototype.$classData = ScalaJS.d.scg_ImmutableSetFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_MutableSetFactory = (function() {
  ScalaJS.c.scg_SetFactory.call(this)
});
ScalaJS.c.scg_MutableSetFactory.prototype = new ScalaJS.h.scg_SetFactory();
ScalaJS.c.scg_MutableSetFactory.prototype.constructor = ScalaJS.c.scg_MutableSetFactory;
/** @constructor */
ScalaJS.h.scg_MutableSetFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_MutableSetFactory.prototype = ScalaJS.c.scg_MutableSetFactory.prototype;
ScalaJS.c.scg_MutableSetFactory.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_GrowingBuilder().init___scg_Growable(ScalaJS.as.scg_Growable(this.empty__sc_GenTraversable()))
});
/*<skip>*/;
ScalaJS.is.scg_MutableSetFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_MutableSetFactory)))
});
ScalaJS.as.scg_MutableSetFactory = (function(obj) {
  if ((ScalaJS.is.scg_MutableSetFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.MutableSetFactory")
  }
});
ScalaJS.isArrayOf.scg_MutableSetFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_MutableSetFactory)))
});
ScalaJS.asArrayOf.scg_MutableSetFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_MutableSetFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.MutableSetFactory;", depth)
  }
});
ScalaJS.d.scg_MutableSetFactory = new ScalaJS.ClassTypeData({
  scg_MutableSetFactory: 0
}, false, "scala.collection.generic.MutableSetFactory", ScalaJS.d.scg_SetFactory, {
  scg_MutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scg_MutableSetFactory.prototype.$classData = ScalaJS.d.scg_MutableSetFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scg_SeqFactory = (function() {
  ScalaJS.c.scg_GenSeqFactory.call(this)
});
ScalaJS.c.scg_SeqFactory.prototype = new ScalaJS.h.scg_GenSeqFactory();
ScalaJS.c.scg_SeqFactory.prototype.constructor = ScalaJS.c.scg_SeqFactory;
/** @constructor */
ScalaJS.h.scg_SeqFactory = (function() {
  /*<skip>*/
});
ScalaJS.h.scg_SeqFactory.prototype = ScalaJS.c.scg_SeqFactory.prototype;
/*<skip>*/;
ScalaJS.is.scg_SeqFactory = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scg_SeqFactory)))
});
ScalaJS.as.scg_SeqFactory = (function(obj) {
  if ((ScalaJS.is.scg_SeqFactory(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.generic.SeqFactory")
  }
});
ScalaJS.isArrayOf.scg_SeqFactory = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scg_SeqFactory)))
});
ScalaJS.asArrayOf.scg_SeqFactory = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scg_SeqFactory(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.generic.SeqFactory;", depth)
  }
});
ScalaJS.d.scg_SeqFactory = new ScalaJS.ClassTypeData({
  scg_SeqFactory: 0
}, false, "scala.collection.generic.SeqFactory", ScalaJS.d.scg_GenSeqFactory, {
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scg_SeqFactory.prototype.$classData = ScalaJS.d.scg_SeqFactory;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_AbstractMap = (function() {
  ScalaJS.c.sc_AbstractMap.call(this)
});
ScalaJS.c.sci_AbstractMap.prototype = new ScalaJS.h.sc_AbstractMap();
ScalaJS.c.sci_AbstractMap.prototype.constructor = ScalaJS.c.sci_AbstractMap;
/** @constructor */
ScalaJS.h.sci_AbstractMap = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_AbstractMap.prototype = ScalaJS.c.sci_AbstractMap.prototype;
ScalaJS.c.sci_AbstractMap.prototype.empty__sci_Map = (function() {
  return ScalaJS.i.sci_Map$class__empty__sci_Map__sci_Map(this)
});
ScalaJS.c.sci_AbstractMap.prototype.toMap__s_Predef$$less$colon$less__sci_Map = (function(ev) {
  return ScalaJS.i.sci_Map$class__toMap__sci_Map__s_Predef$$less$colon$less__sci_Map(this, ev)
});
ScalaJS.c.sci_AbstractMap.prototype.seq__sci_Map = (function() {
  return ScalaJS.i.sci_Map$class__seq__sci_Map__sci_Map(this)
});
ScalaJS.c.sci_AbstractMap.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Iterable$class__companion__sci_Iterable__scg_GenericCompanion(this)
});
ScalaJS.c.sci_AbstractMap.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_AbstractMap.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_AbstractMap.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_AbstractMap.prototype.seq__sc_Map = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_AbstractMap.prototype.empty__sc_Map = (function() {
  return this.empty__sci_Map()
});
ScalaJS.c.sci_AbstractMap.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractMap.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_MapLike$class__$init$__sci_MapLike__V(this);
  ScalaJS.i.sci_Map$class__$init$__sci_Map__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_AbstractMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_AbstractMap)))
});
ScalaJS.as.sci_AbstractMap = (function(obj) {
  if ((ScalaJS.is.sci_AbstractMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.AbstractMap")
  }
});
ScalaJS.isArrayOf.sci_AbstractMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_AbstractMap)))
});
ScalaJS.asArrayOf.sci_AbstractMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_AbstractMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.AbstractMap;", depth)
  }
});
ScalaJS.d.sci_AbstractMap = new ScalaJS.ClassTypeData({
  sci_AbstractMap: 0
}, false, "scala.collection.immutable.AbstractMap", ScalaJS.d.sc_AbstractMap, {
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_AbstractMap.prototype.$classData = ScalaJS.d.sci_AbstractMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$ = (function() {
  ScalaJS.c.scg_ImmutableMapFactory.call(this);
  this.defaultMerger$4 = null
});
ScalaJS.c.sci_HashMap$.prototype = new ScalaJS.h.scg_ImmutableMapFactory();
ScalaJS.c.sci_HashMap$.prototype.constructor = ScalaJS.c.sci_HashMap$;
/** @constructor */
ScalaJS.h.sci_HashMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$.prototype = ScalaJS.c.sci_HashMap$.prototype;
ScalaJS.c.sci_HashMap$.prototype.liftMerger0__p4__F2__sci_HashMap$Merger = (function(mergef) {
  return new ScalaJS.c.sci_HashMap$$anon$2().init___F2(mergef)
});
ScalaJS.c.sci_HashMap$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return new ScalaJS.c.scg_GenMapFactory$MapCanBuildFrom().init___scg_GenMapFactory(this)
});
ScalaJS.c.sci_HashMap$.prototype.empty__sci_HashMap = (function() {
  return ScalaJS.m.sci_HashMap$EmptyHashMap()
});
ScalaJS.c.sci_HashMap$.prototype.scala$collection$immutable$HashMap$$makeHashTrieMap__I__sci_HashMap__I__sci_HashMap__I__I__sci_HashMap$HashTrieMap = (function(hash0, elem0, hash1, elem1, level, size) {
  var index0 = (((hash0 >>> level) | 0) & 31);
  var index1 = (((hash1 >>> level) | 0) & 31);
  if ((index0 !== index1)) {
    var bitmap = ((1 << index0) | (1 << index1));
    var elems = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [2]);
    if ((index0 < index1)) {
      elems.u[0] = elem0;
      elems.u[1] = elem1
    } else {
      elems.u[0] = elem1;
      elems.u[1] = elem0
    };
    return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I(bitmap, elems, size)
  } else {
    var elems$2 = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [1]);
    var bitmap$2 = (1 << index0);
    elems$2.u[0] = this.scala$collection$immutable$HashMap$$makeHashTrieMap__I__sci_HashMap__I__sci_HashMap__I__I__sci_HashMap$HashTrieMap(hash0, elem0, hash1, elem1, ((level + 5) | 0), size);
    return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I(bitmap$2, elems$2, size)
  }
});
ScalaJS.c.sci_HashMap$.prototype.empty__sc_GenMap = (function() {
  return this.empty__sci_HashMap()
});
ScalaJS.c.sci_HashMap$.prototype.init___ = (function() {
  ScalaJS.c.scg_ImmutableMapFactory.prototype.init___.call(this);
  ScalaJS.n.sci_HashMap = this;
  ScalaJS.i.scg_BitOperations$Int$class__$init$__scg_BitOperations$Int__V(this);
  this.defaultMerger$4 = this.liftMerger0__p4__F2__sci_HashMap$Merger(new ScalaJS.c.sjsr_AnonFunction2().init___sjs_js_Function2((function() {
    return (function(a$2, b$2) {
      var a = ScalaJS.as.T2(a$2);
      var b = ScalaJS.as.T2(b$2);
      return a
    })
  })()));
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$)))
});
ScalaJS.as.sci_HashMap$ = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$")
  }
});
ScalaJS.isArrayOf.sci_HashMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$)))
});
ScalaJS.asArrayOf.sci_HashMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$;", depth)
  }
});
ScalaJS.d.sci_HashMap$ = new ScalaJS.ClassTypeData({
  sci_HashMap$: 0
}, false, "scala.collection.immutable.HashMap$", ScalaJS.d.scg_ImmutableMapFactory, {
  sci_HashMap$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_BitOperations$Int: 1,
  scg_ImmutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$.prototype.$classData = ScalaJS.d.sci_HashMap$;
ScalaJS.n.sci_HashMap = undefined;
ScalaJS.m.sci_HashMap = (function() {
  if ((!ScalaJS.n.sci_HashMap)) {
    ScalaJS.n.sci_HashMap = new ScalaJS.c.sci_HashMap$().init___()
  };
  return ScalaJS.n.sci_HashMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet = (function() {
  ScalaJS.c.sc_AbstractSet.call(this)
});
ScalaJS.c.sci_HashSet.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_HashSet.prototype.constructor = ScalaJS.c.sci_HashSet;
/** @constructor */
ScalaJS.h.sci_HashSet = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet.prototype = ScalaJS.c.sci_HashSet.prototype;
ScalaJS.c.sci_HashSet.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_HashSet.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.sci_HashSet()
});
ScalaJS.c.sci_HashSet.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_HashSet.prototype.empty__sci_HashSet = (function() {
  return ScalaJS.m.sci_HashSet().empty__sci_HashSet()
});
ScalaJS.c.sci_HashSet.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().empty__sc_Iterator()
});
ScalaJS.c.sci_HashSet.prototype.foreach__F1__V = (function(f) {
  /*<skip>*/
});
ScalaJS.c.sci_HashSet.prototype.contains__O__Z = (function(e) {
  return this.get0__O__I__I__Z(e, this.computeHash__O__I(e), 0)
});
ScalaJS.c.sci_HashSet.prototype.$$plus__O__sci_HashSet = (function(e) {
  return this.updated0__O__I__I__sci_HashSet(e, this.computeHash__O__I(e), 0)
});
ScalaJS.c.sci_HashSet.prototype.$$plus__O__O__sc_Seq__sci_HashSet = (function(elem1, elem2, elems) {
  return ScalaJS.as.sci_HashSet(this.$$plus__O__sci_HashSet(elem1).$$plus__O__sci_HashSet(elem2).$$plus$plus__sc_GenTraversableOnce__sc_Set(elems))
});
ScalaJS.c.sci_HashSet.prototype.elemHashCode__O__I = (function(key) {
  return ScalaJS.m.sr_ScalaRunTime().hash__O__I(key)
});
ScalaJS.c.sci_HashSet.prototype.improve__I__I = (function(hcode) {
  var h = ((hcode + (~(hcode << 9))) | 0);
  h = (h ^ ((h >>> 14) | 0));
  h = ((h + (h << 4)) | 0);
  return (h ^ ((h >>> 10) | 0))
});
ScalaJS.c.sci_HashSet.prototype.computeHash__O__I = (function(key) {
  return this.improve__I__I(this.elemHashCode__O__I(key))
});
ScalaJS.c.sci_HashSet.prototype.get0__O__I__I__Z = (function(key, hash, level) {
  return false
});
ScalaJS.c.sci_HashSet.prototype.updated0__O__I__I__sci_HashSet = (function(key, hash, level) {
  return new ScalaJS.c.sci_HashSet$HashSet1().init___O__I(key, hash)
});
ScalaJS.c.sci_HashSet.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_HashSet.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_HashSet.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_HashSet.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_HashSet.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_HashSet.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_HashSet(elem)
});
ScalaJS.c.sci_HashSet.prototype.empty__sc_Set = (function() {
  return this.empty__sci_HashSet()
});
ScalaJS.c.sci_HashSet.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet)))
});
ScalaJS.as.sci_HashSet = (function(obj) {
  if ((ScalaJS.is.sci_HashSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet")
  }
});
ScalaJS.isArrayOf.sci_HashSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet)))
});
ScalaJS.asArrayOf.sci_HashSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet;", depth)
  }
});
ScalaJS.d.sci_HashSet = new ScalaJS.ClassTypeData({
  sci_HashSet: 0
}, false, "scala.collection.immutable.HashSet", ScalaJS.d.sc_AbstractSet, {
  sci_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashSet.prototype.$classData = ScalaJS.d.sci_HashSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_List = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this)
});
ScalaJS.c.sci_List.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.sci_List.prototype.constructor = ScalaJS.c.sci_List;
/** @constructor */
ScalaJS.h.sci_List = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_List.prototype = ScalaJS.c.sci_List.prototype;
ScalaJS.c.sci_List.prototype.scala$collection$LinearSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_List.prototype.length__I = (function() {
  return ScalaJS.i.sc_LinearSeqOptimized$class__length__sc_LinearSeqOptimized__I(this)
});
ScalaJS.c.sci_List.prototype.apply__I__O = (function(n) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__apply__sc_LinearSeqOptimized__I__O(this, n)
});
ScalaJS.c.sci_List.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__find__sc_LinearSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.sci_List.prototype.foldLeft__O__F2__O = (function(z, f) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__foldLeft__sc_LinearSeqOptimized__O__F2__O(this, z, f)
});
ScalaJS.c.sci_List.prototype.last__O = (function() {
  return ScalaJS.i.sc_LinearSeqOptimized$class__last__sc_LinearSeqOptimized__O(this)
});
ScalaJS.c.sci_List.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__sameElements__sc_LinearSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_List.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__lengthCompare__sc_LinearSeqOptimized__I__I(this, len)
});
ScalaJS.c.sci_List.prototype.isDefinedAt__I__Z = (function(x) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__isDefinedAt__sc_LinearSeqOptimized__I__Z(this, x)
});
ScalaJS.c.sci_List.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__segmentLength__sc_LinearSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.sci_List.prototype.seq__sci_LinearSeq = (function() {
  return ScalaJS.i.sci_LinearSeq$class__seq__sci_LinearSeq__sci_LinearSeq(this)
});
ScalaJS.c.sci_List.prototype.thisCollection__sc_LinearSeq = (function() {
  return ScalaJS.i.sc_LinearSeqLike$class__thisCollection__sc_LinearSeqLike__sc_LinearSeq(this)
});
ScalaJS.c.sci_List.prototype.toCollection__sc_LinearSeqLike__sc_LinearSeq = (function(repr) {
  return ScalaJS.i.sc_LinearSeqLike$class__toCollection__sc_LinearSeqLike__sc_LinearSeqLike__sc_LinearSeq(this, repr)
});
ScalaJS.c.sci_List.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_LinearSeqLike$class__hashCode__sc_LinearSeqLike__I(this)
});
ScalaJS.c.sci_List.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_LinearSeqLike$class__iterator__sc_LinearSeqLike__sc_Iterator(this)
});
ScalaJS.c.sci_List.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.sci_List()
});
ScalaJS.c.sci_List.prototype.$$colon$colon__O__sci_List = (function(x) {
  return new ScalaJS.c.sci_$colon$colon().init___O__sci_List(x, this)
});
ScalaJS.c.sci_List.prototype.toList__sci_List = (function() {
  return this
});
ScalaJS.c.sci_List.prototype.drop__I__sci_List = (function(n) {
  var these = this;
  var count = n;
  while (((!these.isEmpty__Z()) && (count > 0))) {
    these = ScalaJS.as.sci_List(these.tail__O());
    count = ((count - 1) | 0)
  };
  return these
});
ScalaJS.c.sci_List.prototype.reverse__sci_List = (function() {
  var result = ScalaJS.m.sci_Nil();
  var these = this;
  while ((!these.isEmpty__Z())) {
    var x$4 = these.head__O();
    result = result.$$colon$colon__O__sci_List(x$4);
    these = ScalaJS.as.sci_List(these.tail__O())
  };
  return result
});
ScalaJS.c.sci_List.prototype.stringPrefix__T = (function() {
  return "List"
});
ScalaJS.c.sci_List.prototype.toStream__sci_Stream = (function() {
  if (this.isEmpty__Z()) {
    return ScalaJS.m.sci_Stream$Empty()
  } else {
    return new ScalaJS.c.sci_Stream$Cons().init___O__F0(this.head__O(), new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer) {
      return (function() {
        return ScalaJS.as.sci_List(arg$outer.tail__O()).toStream__sci_Stream()
      })
    })(this)))
  }
});
ScalaJS.c.sci_List.prototype.foreach__F1__V = (function(f) {
  var these = this;
  while ((!these.isEmpty__Z())) {
    f.apply__O__O(these.head__O());
    these = ScalaJS.as.sci_List(these.tail__O())
  }
});
ScalaJS.c.sci_List.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__sc_LinearSeqLike__sc_LinearSeq(ScalaJS.as.sc_LinearSeqLike(repr))
});
ScalaJS.c.sci_List.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_LinearSeq()
});
ScalaJS.c.sci_List.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sc_LinearSeq()
});
ScalaJS.c.sci_List.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_List.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_List.prototype.seq__sc_Seq = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_List.prototype.seq__sc_LinearSeq = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_List.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.sci_List.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.sci_List.prototype.reverse__O = (function() {
  return this.reverse__sci_List()
});
ScalaJS.c.sci_List.prototype.drop__I__sc_LinearSeqOptimized = (function(n) {
  return this.drop__I__sci_List(n)
});
ScalaJS.c.sci_List.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V(this);
  ScalaJS.i.sc_LinearSeqLike$class__$init$__sc_LinearSeqLike__V(this);
  ScalaJS.i.sc_LinearSeq$class__$init$__sc_LinearSeq__V(this);
  ScalaJS.i.sci_LinearSeq$class__$init$__sci_LinearSeq__V(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  ScalaJS.i.sc_LinearSeqOptimized$class__$init$__sc_LinearSeqOptimized__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_List = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_List)))
});
ScalaJS.as.sci_List = (function(obj) {
  if ((ScalaJS.is.sci_List(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.List")
  }
});
ScalaJS.isArrayOf.sci_List = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_List)))
});
ScalaJS.asArrayOf.sci_List = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_List(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.List;", depth)
  }
});
ScalaJS.d.sci_List = new ScalaJS.ClassTypeData({
  sci_List: 0
}, false, "scala.collection.immutable.List", ScalaJS.d.sc_AbstractSeq, {
  sci_List: 1,
  sc_LinearSeqOptimized: 1,
  s_Product: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_List.prototype.$classData = ScalaJS.d.sci_List;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListMap$ = (function() {
  ScalaJS.c.scg_ImmutableMapFactory.call(this)
});
ScalaJS.c.sci_ListMap$.prototype = new ScalaJS.h.scg_ImmutableMapFactory();
ScalaJS.c.sci_ListMap$.prototype.constructor = ScalaJS.c.sci_ListMap$;
/** @constructor */
ScalaJS.h.sci_ListMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListMap$.prototype = ScalaJS.c.sci_ListMap$.prototype;
ScalaJS.c.sci_ListMap$.prototype.empty__sci_ListMap = (function() {
  return ScalaJS.m.sci_ListMap$EmptyListMap()
});
ScalaJS.c.sci_ListMap$.prototype.empty__sc_GenMap = (function() {
  return this.empty__sci_ListMap()
});
/*<skip>*/;
ScalaJS.is.sci_ListMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListMap$)))
});
ScalaJS.as.sci_ListMap$ = (function(obj) {
  if ((ScalaJS.is.sci_ListMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListMap$")
  }
});
ScalaJS.isArrayOf.sci_ListMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListMap$)))
});
ScalaJS.asArrayOf.sci_ListMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListMap$;", depth)
  }
});
ScalaJS.d.sci_ListMap$ = new ScalaJS.ClassTypeData({
  sci_ListMap$: 0
}, false, "scala.collection.immutable.ListMap$", ScalaJS.d.scg_ImmutableMapFactory, {
  sci_ListMap$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_ImmutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.sci_ListMap$.prototype.$classData = ScalaJS.d.sci_ListMap$;
ScalaJS.n.sci_ListMap = undefined;
ScalaJS.m.sci_ListMap = (function() {
  if ((!ScalaJS.n.sci_ListMap)) {
    ScalaJS.n.sci_ListMap = new ScalaJS.c.sci_ListMap$().init___()
  };
  return ScalaJS.n.sci_ListMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListSet = (function() {
  ScalaJS.c.sc_AbstractSet.call(this)
});
ScalaJS.c.sci_ListSet.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_ListSet.prototype.constructor = ScalaJS.c.sci_ListSet;
/** @constructor */
ScalaJS.h.sci_ListSet = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListSet.prototype = ScalaJS.c.sci_ListSet.prototype;
ScalaJS.c.sci_ListSet.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_ListSet.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.sci_ListSet()
});
ScalaJS.c.sci_ListSet.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_ListSet.prototype.isEmpty__Z = (function() {
  return true
});
ScalaJS.c.sci_ListSet.prototype.contains__O__Z = (function(elem) {
  return false
});
ScalaJS.c.sci_ListSet.prototype.$$plus__O__sci_ListSet = (function(elem) {
  return new ScalaJS.c.sci_ListSet$Node().init___sci_ListSet__O(this, elem)
});
ScalaJS.c.sci_ListSet.prototype.scala$collection$immutable$ListSet$$unchecked$und$plus__O__sci_ListSet = (function(e) {
  return new ScalaJS.c.sci_ListSet$Node().init___sci_ListSet__O(this, e)
});
ScalaJS.c.sci_ListSet.prototype.scala$collection$immutable$ListSet$$unchecked$undouter__sci_ListSet = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("Empty ListSet has no outer pointer")
});
ScalaJS.c.sci_ListSet.prototype.iterator__sc_Iterator = (function() {
  return new ScalaJS.c.sci_ListSet$$anon$1().init___sci_ListSet(this)
});
ScalaJS.c.sci_ListSet.prototype.head__O = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("Set has no elements")
});
ScalaJS.c.sci_ListSet.prototype.tail__sci_ListSet = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("Next of an empty set")
});
ScalaJS.c.sci_ListSet.prototype.stringPrefix__T = (function() {
  return "ListSet"
});
ScalaJS.c.sci_ListSet.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_ListSet.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_ListSet.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_ListSet.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_ListSet.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_ListSet.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_ListSet.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_ListSet(elem)
});
ScalaJS.c.sci_ListSet.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_ListSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListSet)))
});
ScalaJS.as.sci_ListSet = (function(obj) {
  if ((ScalaJS.is.sci_ListSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListSet")
  }
});
ScalaJS.isArrayOf.sci_ListSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListSet)))
});
ScalaJS.asArrayOf.sci_ListSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListSet;", depth)
  }
});
ScalaJS.d.sci_ListSet = new ScalaJS.ClassTypeData({
  sci_ListSet: 0
}, false, "scala.collection.immutable.ListSet", ScalaJS.d.sc_AbstractSet, {
  sci_ListSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListSet.prototype.$classData = ScalaJS.d.sci_ListSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$ = (function() {
  ScalaJS.c.scg_ImmutableMapFactory.call(this)
});
ScalaJS.c.sci_Map$.prototype = new ScalaJS.h.scg_ImmutableMapFactory();
ScalaJS.c.sci_Map$.prototype.constructor = ScalaJS.c.sci_Map$;
/** @constructor */
ScalaJS.h.sci_Map$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$.prototype = ScalaJS.c.sci_Map$.prototype;
ScalaJS.c.sci_Map$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return new ScalaJS.c.scg_GenMapFactory$MapCanBuildFrom().init___scg_GenMapFactory(this)
});
ScalaJS.c.sci_Map$.prototype.empty__sci_Map = (function() {
  return ScalaJS.m.sci_Map$EmptyMap()
});
ScalaJS.c.sci_Map$.prototype.empty__sc_GenMap = (function() {
  return this.empty__sci_Map()
});
/*<skip>*/;
ScalaJS.is.sci_Map$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$)))
});
ScalaJS.as.sci_Map$ = (function(obj) {
  if ((ScalaJS.is.sci_Map$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$")
  }
});
ScalaJS.isArrayOf.sci_Map$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$)))
});
ScalaJS.asArrayOf.sci_Map$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$;", depth)
  }
});
ScalaJS.d.sci_Map$ = new ScalaJS.ClassTypeData({
  sci_Map$: 0
}, false, "scala.collection.immutable.Map$", ScalaJS.d.scg_ImmutableMapFactory, {
  sci_Map$: 1,
  scg_ImmutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.sci_Map$.prototype.$classData = ScalaJS.d.sci_Map$;
ScalaJS.n.sci_Map = undefined;
ScalaJS.m.sci_Map = (function() {
  if ((!ScalaJS.n.sci_Map)) {
    ScalaJS.n.sci_Map = new ScalaJS.c.sci_Map$().init___()
  };
  return ScalaJS.n.sci_Map
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Range = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this);
  this.start$4 = 0;
  this.end$4 = 0;
  this.step$4 = 0;
  this.isEmpty$4 = false;
  this.numRangeElements$4 = 0;
  this.lastElement$4 = 0;
  this.terminalElement$4 = 0
});
ScalaJS.c.sci_Range.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.sci_Range.prototype.constructor = ScalaJS.c.sci_Range;
/** @constructor */
ScalaJS.h.sci_Range = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Range.prototype = ScalaJS.c.sci_Range.prototype;
ScalaJS.c.sci_Range.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_IndexedSeq$class__companion__sci_IndexedSeq__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Range.prototype.seq__sci_IndexedSeq = (function() {
  return ScalaJS.i.sci_IndexedSeq$class__seq__sci_IndexedSeq__sci_IndexedSeq(this)
});
ScalaJS.c.sci_Range.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.sci_Range.prototype.thisCollection__sc_IndexedSeq = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__thisCollection__sc_IndexedSeqLike__sc_IndexedSeq(this)
});
ScalaJS.c.sci_Range.prototype.toCollection__O__sc_IndexedSeq = (function(repr) {
  return ScalaJS.i.sc_IndexedSeqLike$class__toCollection__sc_IndexedSeqLike__O__sc_IndexedSeq(this, repr)
});
ScalaJS.c.sci_Range.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator(this)
});
ScalaJS.c.sci_Range.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.sci_Range.prototype.start__I = (function() {
  return this.start$4
});
ScalaJS.c.sci_Range.prototype.end__I = (function() {
  return this.end$4
});
ScalaJS.c.sci_Range.prototype.step__I = (function() {
  return this.step$4
});
ScalaJS.c.sci_Range.prototype.gap__p4__J = (function() {
  return ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(this.end__I()).$$minus__sjsr_RuntimeLong__sjsr_RuntimeLong(ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(this.start__I()))
});
ScalaJS.c.sci_Range.prototype.isExact__p4__Z = (function() {
  return this.gap__p4__J().$$percent__sjsr_RuntimeLong__sjsr_RuntimeLong(ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(this.step__I())).equals__O__Z(ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(0))
});
ScalaJS.c.sci_Range.prototype.hasStub__p4__Z = (function() {
  return (this.isInclusive__Z() || (!this.isExact__p4__Z()))
});
ScalaJS.c.sci_Range.prototype.longLength__p4__J = (function() {
  var jsx$4 = this.gap__p4__J().$$div__sjsr_RuntimeLong__sjsr_RuntimeLong(ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(this.step__I()));
  var jsx$3 = ScalaJS.m.sjsr_RuntimeLong();
  if (this.hasStub__p4__Z()) {
    var jsx$2 = 1
  } else {
    var jsx$2 = 0
  };
  var jsx$1 = jsx$3.fromInt__I__sjsr_RuntimeLong(jsx$2);
  return jsx$4.$$plus__sjsr_RuntimeLong__sjsr_RuntimeLong(jsx$1)
});
ScalaJS.c.sci_Range.prototype.isEmpty__Z = (function() {
  return this.isEmpty$4
});
ScalaJS.c.sci_Range.prototype.numRangeElements__I = (function() {
  return this.numRangeElements$4
});
ScalaJS.c.sci_Range.prototype.lastElement__I = (function() {
  return this.lastElement$4
});
ScalaJS.c.sci_Range.prototype.terminalElement__I = (function() {
  return this.terminalElement$4
});
ScalaJS.c.sci_Range.prototype.last__I = (function() {
  if (this.isEmpty__Z()) {
    return ScalaJS.uI(ScalaJS.m.sci_Nil().last__O())
  } else {
    return this.lastElement__I()
  }
});
ScalaJS.c.sci_Range.prototype.isInclusive__Z = (function() {
  return false
});
ScalaJS.c.sci_Range.prototype.size__I = (function() {
  return this.length__I()
});
ScalaJS.c.sci_Range.prototype.length__I = (function() {
  if ((this.numRangeElements__I() < 0)) {
    this.fail__p4__sr_Nothing$()
  } else {
    return this.numRangeElements__I()
  }
});
ScalaJS.c.sci_Range.prototype.description__p4__T = (function() {
  var jsx$6 = new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T("%d %s %d by %s"));
  var jsx$5 = ScalaJS.m.s_Predef();
  var jsx$4 = this.start__I();
  if (this.isInclusive__Z()) {
    var jsx$3 = "to"
  } else {
    var jsx$3 = "until"
  };
  var jsx$2 = ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [jsx$4, jsx$3, this.end__I(), this.step__I()]);
  var jsx$1 = jsx$5.genericWrapArray__O__scm_WrappedArray(jsx$2);
  return jsx$6.format__sc_Seq__T(jsx$1)
});
ScalaJS.c.sci_Range.prototype.fail__p4__sr_Nothing$ = (function() {
  throw new ScalaJS.c.jl_IllegalArgumentException().init___T((this.description__p4__T() + ": seqs cannot contain more than Int.MaxValue elements."))
});
ScalaJS.c.sci_Range.prototype.scala$collection$immutable$Range$$validateMaxLength__V = (function() {
  if ((this.numRangeElements__I() < 0)) {
    this.fail__p4__sr_Nothing$()
  }
});
ScalaJS.c.sci_Range.prototype.validateRangeBoundaries__F1__Z = (function(f) {
  this.scala$collection$immutable$Range$$validateMaxLength__V();
  if (((this.start__I() !== -2147483648) || (this.end__I() !== -2147483648))) {
    return true
  } else {
    var count = 0;
    var num = this.start__I();
    while ((count < this.numRangeElements__I())) {
      f.apply__O__O(num);
      count = ((count + 1) | 0);
      num = ((num + this.step__I()) | 0)
    };
    return false
  }
});
ScalaJS.c.sci_Range.prototype.apply__I__I = (function(idx) {
  return this.apply$mcII$sp__I__I(idx)
});
ScalaJS.c.sci_Range.prototype.foreach__F1__V = (function(f) {
  if (this.validateRangeBoundaries__F1__Z(f)) {
    var i = this.start__I();
    var terminal = this.terminalElement__I();
    var step = this.step__I();
    while ((i !== terminal)) {
      f.apply__O__O(i);
      i = ((i + step) | 0)
    }
  }
});
ScalaJS.c.sci_Range.prototype.take__I__sci_Range = (function(n) {
  if (((n <= 0) || this.isEmpty__Z())) {
    return this.newEmptyRange__p4__I__sci_Range(this.start__I())
  } else {
    if ((n >= this.numRangeElements__I())) {
      return this
    } else {
      return new ScalaJS.c.sci_Range$Inclusive().init___I__I__I(this.start__I(), this.locationAfterN__p4__I__I(((n - 1) | 0)), this.step__I())
    }
  }
});
ScalaJS.c.sci_Range.prototype.locationAfterN__p4__I__I = (function(n) {
  return ((this.start__I() + ScalaJS.imul(this.step__I(), n)) | 0)
});
ScalaJS.c.sci_Range.prototype.newEmptyRange__p4__I__sci_Range = (function(value) {
  return new ScalaJS.c.sci_Range().init___I__I__I(value, value, this.step__I())
});
ScalaJS.c.sci_Range.prototype.reverse__sci_Range = (function() {
  if (this.isEmpty__Z()) {
    return this
  } else {
    return new ScalaJS.c.sci_Range$Inclusive().init___I__I__I(this.last__I(), this.start__I(), (-this.step__I()))
  }
});
ScalaJS.c.sci_Range.prototype.equals__O__Z = (function(other) {
  var x1 = other;
  if (ScalaJS.is.sci_Range(x1)) {
    var x2 = ScalaJS.as.sci_Range(x1);
    return ((x2.canEqual__O__Z(this) && (this.length__I() === x2.length__I())) && (this.isEmpty__Z() || ((this.start__I() === x2.start__I()) && (this.last__I() === x2.last__I()))))
  };
  return ScalaJS.i.sc_GenSeqLike$class__equals__sc_GenSeqLike__O__Z(this, other)
});
ScalaJS.c.sci_Range.prototype.toString__T = (function() {
  if ((this.numRangeElements__I() > ScalaJS.m.sci_Range().MAX$undPRINT__I())) {
    var endStr = ", ... )"
  } else {
    var endStr = ")"
  };
  return this.take__I__sci_Range(ScalaJS.m.sci_Range().MAX$undPRINT__I()).mkString__T__T__T__T("Range(", ", ", endStr)
});
ScalaJS.c.sci_Range.prototype.foreach$mVc$sp__F1__V = (function(f) {
  if (this.validateRangeBoundaries__F1__Z(f)) {
    var i = this.start__I();
    var terminal = this.terminalElement__I();
    var step = this.step__I();
    while ((i !== terminal)) {
      f.apply$mcVI$sp__I__V(i);
      i = ((i + step) | 0)
    }
  }
});
ScalaJS.c.sci_Range.prototype.apply$mcII$sp__I__I = (function(idx) {
  this.scala$collection$immutable$Range$$validateMaxLength__V();
  if (((idx < 0) || (idx >= this.numRangeElements__I()))) {
    throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(idx))
  } else {
    return ((this.start__I() + ScalaJS.imul(this.step__I(), idx)) | 0)
  }
});
ScalaJS.c.sci_Range.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.sci_Range.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__O__sc_IndexedSeq(repr)
});
ScalaJS.c.sci_Range.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sc_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.seq__sc_Seq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Range.prototype.reverse__O = (function() {
  return this.reverse__sci_Range()
});
ScalaJS.c.sci_Range.prototype.apply__O__O = (function(v1) {
  return this.apply__I__I(ScalaJS.uI(v1))
});
ScalaJS.c.sci_Range.prototype.apply__I__O = (function(idx) {
  return this.apply__I__I(idx)
});
ScalaJS.c.sci_Range.prototype.init___I__I__I = (function(start, end, step) {
  this.start$4 = start;
  this.end$4 = end;
  this.step$4 = step;
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.sci_IndexedSeq$class__$init$__sci_IndexedSeq__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  this.isEmpty$4 = ((((start > end) && (step > 0)) || ((start < end) && (step < 0))) || ((start === end) && (!this.isInclusive__Z())));
  if ((step === 0)) {
    throw new ScalaJS.c.jl_IllegalArgumentException().init___T("step cannot be 0.")
  } else {
    if (this.isEmpty__Z()) {
      var jsx$1 = 0
    } else {
      var len = this.longLength__p4__J();
      if (len.$$greater__sjsr_RuntimeLong__Z(ScalaJS.m.sjsr_RuntimeLong().fromInt__I__sjsr_RuntimeLong(2147483647))) {
        var jsx$1 = -1
      } else {
        var jsx$1 = len.toInt__I()
      }
    }
  };
  this.numRangeElements$4 = jsx$1;
  this.lastElement$4 = ((start + ScalaJS.imul(((this.numRangeElements__I() - 1) | 0), step)) | 0);
  this.terminalElement$4 = ((start + ScalaJS.imul(this.numRangeElements__I(), step)) | 0);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Range = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Range)))
});
ScalaJS.as.sci_Range = (function(obj) {
  if ((ScalaJS.is.sci_Range(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Range")
  }
});
ScalaJS.isArrayOf.sci_Range = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Range)))
});
ScalaJS.asArrayOf.sci_Range = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Range(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Range;", depth)
  }
});
ScalaJS.d.sci_Range = new ScalaJS.ClassTypeData({
  sci_Range: 0
}, false, "scala.collection.immutable.Range", ScalaJS.d.sc_AbstractSeq, {
  sci_Range: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_IndexedSeq: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Range.prototype.$classData = ScalaJS.d.sci_Range;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$EmptySet$ = (function() {
  ScalaJS.c.sc_AbstractSet.call(this)
});
ScalaJS.c.sci_Set$EmptySet$.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_Set$EmptySet$.prototype.constructor = ScalaJS.c.sci_Set$EmptySet$;
/** @constructor */
ScalaJS.h.sci_Set$EmptySet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$EmptySet$.prototype = ScalaJS.c.sci_Set$EmptySet$.prototype;
ScalaJS.c.sci_Set$EmptySet$.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Set$EmptySet$.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_Set$EmptySet$.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_Set$EmptySet$.prototype.contains__O__Z = (function(elem) {
  return false
});
ScalaJS.c.sci_Set$EmptySet$.prototype.$$plus__O__sci_Set = (function(elem) {
  return new ScalaJS.c.sci_Set$Set1().init___O(elem)
});
ScalaJS.c.sci_Set$EmptySet$.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().empty__sc_Iterator()
});
ScalaJS.c.sci_Set$EmptySet$.prototype.foreach__F1__V = (function(f) {
  /*<skip>*/
});
ScalaJS.c.sci_Set$EmptySet$.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_Set$EmptySet$.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_Set$EmptySet$.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_Set$EmptySet$.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$EmptySet$.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$EmptySet$.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$EmptySet$.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_Set(elem)
});
ScalaJS.c.sci_Set$EmptySet$.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.n.sci_Set$EmptySet = this;
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Set$EmptySet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$EmptySet$)))
});
ScalaJS.as.sci_Set$EmptySet$ = (function(obj) {
  if ((ScalaJS.is.sci_Set$EmptySet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$EmptySet$")
  }
});
ScalaJS.isArrayOf.sci_Set$EmptySet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$EmptySet$)))
});
ScalaJS.asArrayOf.sci_Set$EmptySet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$EmptySet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$EmptySet$;", depth)
  }
});
ScalaJS.d.sci_Set$EmptySet$ = new ScalaJS.ClassTypeData({
  sci_Set$EmptySet$: 0
}, false, "scala.collection.immutable.Set$EmptySet$", ScalaJS.d.sc_AbstractSet, {
  sci_Set$EmptySet$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Set$EmptySet$.prototype.$classData = ScalaJS.d.sci_Set$EmptySet$;
ScalaJS.n.sci_Set$EmptySet = undefined;
ScalaJS.m.sci_Set$EmptySet = (function() {
  if ((!ScalaJS.n.sci_Set$EmptySet)) {
    ScalaJS.n.sci_Set$EmptySet = new ScalaJS.c.sci_Set$EmptySet$().init___()
  };
  return ScalaJS.n.sci_Set$EmptySet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$Set1 = (function() {
  ScalaJS.c.sc_AbstractSet.call(this);
  this.elem1$4 = null
});
ScalaJS.c.sci_Set$Set1.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_Set$Set1.prototype.constructor = ScalaJS.c.sci_Set$Set1;
/** @constructor */
ScalaJS.h.sci_Set$Set1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$Set1.prototype = ScalaJS.c.sci_Set$Set1.prototype;
ScalaJS.c.sci_Set$Set1.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Set$Set1.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_Set$Set1.prototype.size__I = (function() {
  return 1
});
ScalaJS.c.sci_Set$Set1.prototype.contains__O__Z = (function(elem) {
  return ScalaJS.anyEqEq(elem, this.elem1$4)
});
ScalaJS.c.sci_Set$Set1.prototype.$$plus__O__sci_Set = (function(elem) {
  if (this.contains__O__Z(elem)) {
    return this
  } else {
    return new ScalaJS.c.sci_Set$Set2().init___O__O(this.elem1$4, elem)
  }
});
ScalaJS.c.sci_Set$Set1.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.elem1$4])))
});
ScalaJS.c.sci_Set$Set1.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.elem1$4)
});
ScalaJS.c.sci_Set$Set1.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_Set$Set1.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_Set$Set1.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_Set$Set1.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set1.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set1.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set1.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_Set(elem)
});
ScalaJS.c.sci_Set$Set1.prototype.init___O = (function(elem1) {
  this.elem1$4 = elem1;
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Set$Set1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$Set1)))
});
ScalaJS.as.sci_Set$Set1 = (function(obj) {
  if ((ScalaJS.is.sci_Set$Set1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$Set1")
  }
});
ScalaJS.isArrayOf.sci_Set$Set1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$Set1)))
});
ScalaJS.asArrayOf.sci_Set$Set1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$Set1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$Set1;", depth)
  }
});
ScalaJS.d.sci_Set$Set1 = new ScalaJS.ClassTypeData({
  sci_Set$Set1: 0
}, false, "scala.collection.immutable.Set$Set1", ScalaJS.d.sc_AbstractSet, {
  sci_Set$Set1: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Set$Set1.prototype.$classData = ScalaJS.d.sci_Set$Set1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$Set2 = (function() {
  ScalaJS.c.sc_AbstractSet.call(this);
  this.elem1$4 = null;
  this.elem2$4 = null
});
ScalaJS.c.sci_Set$Set2.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_Set$Set2.prototype.constructor = ScalaJS.c.sci_Set$Set2;
/** @constructor */
ScalaJS.h.sci_Set$Set2 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$Set2.prototype = ScalaJS.c.sci_Set$Set2.prototype;
ScalaJS.c.sci_Set$Set2.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Set$Set2.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_Set$Set2.prototype.size__I = (function() {
  return 2
});
ScalaJS.c.sci_Set$Set2.prototype.contains__O__Z = (function(elem) {
  return (ScalaJS.anyEqEq(elem, this.elem1$4) || ScalaJS.anyEqEq(elem, this.elem2$4))
});
ScalaJS.c.sci_Set$Set2.prototype.$$plus__O__sci_Set = (function(elem) {
  if (this.contains__O__Z(elem)) {
    return this
  } else {
    return new ScalaJS.c.sci_Set$Set3().init___O__O__O(this.elem1$4, this.elem2$4, elem)
  }
});
ScalaJS.c.sci_Set$Set2.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.elem1$4, this.elem2$4])))
});
ScalaJS.c.sci_Set$Set2.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.elem1$4);
  f.apply__O__O(this.elem2$4)
});
ScalaJS.c.sci_Set$Set2.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_Set$Set2.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_Set$Set2.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_Set$Set2.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set2.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set2.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set2.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_Set(elem)
});
ScalaJS.c.sci_Set$Set2.prototype.init___O__O = (function(elem1, elem2) {
  this.elem1$4 = elem1;
  this.elem2$4 = elem2;
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Set$Set2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$Set2)))
});
ScalaJS.as.sci_Set$Set2 = (function(obj) {
  if ((ScalaJS.is.sci_Set$Set2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$Set2")
  }
});
ScalaJS.isArrayOf.sci_Set$Set2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$Set2)))
});
ScalaJS.asArrayOf.sci_Set$Set2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$Set2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$Set2;", depth)
  }
});
ScalaJS.d.sci_Set$Set2 = new ScalaJS.ClassTypeData({
  sci_Set$Set2: 0
}, false, "scala.collection.immutable.Set$Set2", ScalaJS.d.sc_AbstractSet, {
  sci_Set$Set2: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Set$Set2.prototype.$classData = ScalaJS.d.sci_Set$Set2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$Set3 = (function() {
  ScalaJS.c.sc_AbstractSet.call(this);
  this.elem1$4 = null;
  this.elem2$4 = null;
  this.elem3$4 = null
});
ScalaJS.c.sci_Set$Set3.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_Set$Set3.prototype.constructor = ScalaJS.c.sci_Set$Set3;
/** @constructor */
ScalaJS.h.sci_Set$Set3 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$Set3.prototype = ScalaJS.c.sci_Set$Set3.prototype;
ScalaJS.c.sci_Set$Set3.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Set$Set3.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_Set$Set3.prototype.size__I = (function() {
  return 3
});
ScalaJS.c.sci_Set$Set3.prototype.contains__O__Z = (function(elem) {
  return ((ScalaJS.anyEqEq(elem, this.elem1$4) || ScalaJS.anyEqEq(elem, this.elem2$4)) || ScalaJS.anyEqEq(elem, this.elem3$4))
});
ScalaJS.c.sci_Set$Set3.prototype.$$plus__O__sci_Set = (function(elem) {
  if (this.contains__O__Z(elem)) {
    return this
  } else {
    return new ScalaJS.c.sci_Set$Set4().init___O__O__O__O(this.elem1$4, this.elem2$4, this.elem3$4, elem)
  }
});
ScalaJS.c.sci_Set$Set3.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.elem1$4, this.elem2$4, this.elem3$4])))
});
ScalaJS.c.sci_Set$Set3.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.elem1$4);
  f.apply__O__O(this.elem2$4);
  f.apply__O__O(this.elem3$4)
});
ScalaJS.c.sci_Set$Set3.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_Set$Set3.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_Set$Set3.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_Set$Set3.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set3.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set3.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set3.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_Set(elem)
});
ScalaJS.c.sci_Set$Set3.prototype.init___O__O__O = (function(elem1, elem2, elem3) {
  this.elem1$4 = elem1;
  this.elem2$4 = elem2;
  this.elem3$4 = elem3;
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Set$Set3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$Set3)))
});
ScalaJS.as.sci_Set$Set3 = (function(obj) {
  if ((ScalaJS.is.sci_Set$Set3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$Set3")
  }
});
ScalaJS.isArrayOf.sci_Set$Set3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$Set3)))
});
ScalaJS.asArrayOf.sci_Set$Set3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$Set3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$Set3;", depth)
  }
});
ScalaJS.d.sci_Set$Set3 = new ScalaJS.ClassTypeData({
  sci_Set$Set3: 0
}, false, "scala.collection.immutable.Set$Set3", ScalaJS.d.sc_AbstractSet, {
  sci_Set$Set3: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Set$Set3.prototype.$classData = ScalaJS.d.sci_Set$Set3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$Set4 = (function() {
  ScalaJS.c.sc_AbstractSet.call(this);
  this.elem1$4 = null;
  this.elem2$4 = null;
  this.elem3$4 = null;
  this.elem4$4 = null
});
ScalaJS.c.sci_Set$Set4.prototype = new ScalaJS.h.sc_AbstractSet();
ScalaJS.c.sci_Set$Set4.prototype.constructor = ScalaJS.c.sci_Set$Set4;
/** @constructor */
ScalaJS.h.sci_Set$Set4 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$Set4.prototype = ScalaJS.c.sci_Set$Set4.prototype;
ScalaJS.c.sci_Set$Set4.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_Set$class__companion__sci_Set__scg_GenericCompanion(this)
});
ScalaJS.c.sci_Set$Set4.prototype.seq__sci_Set = (function() {
  return ScalaJS.i.sci_Set$class__seq__sci_Set__sci_Set(this)
});
ScalaJS.c.sci_Set$Set4.prototype.size__I = (function() {
  return 4
});
ScalaJS.c.sci_Set$Set4.prototype.contains__O__Z = (function(elem) {
  return (((ScalaJS.anyEqEq(elem, this.elem1$4) || ScalaJS.anyEqEq(elem, this.elem2$4)) || ScalaJS.anyEqEq(elem, this.elem3$4)) || ScalaJS.anyEqEq(elem, this.elem4$4))
});
ScalaJS.c.sci_Set$Set4.prototype.$$plus__O__sci_Set = (function(elem) {
  if (this.contains__O__Z(elem)) {
    return this
  } else {
    return new ScalaJS.c.sci_HashSet().init___().$$plus__O__O__sc_Seq__sci_HashSet(this.elem1$4, this.elem2$4, ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.elem3$4, this.elem4$4, elem])))
  }
});
ScalaJS.c.sci_Set$Set4.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.elem1$4, this.elem2$4, this.elem3$4, this.elem4$4])))
});
ScalaJS.c.sci_Set$Set4.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.elem1$4);
  f.apply__O__O(this.elem2$4);
  f.apply__O__O(this.elem3$4);
  f.apply__O__O(this.elem4$4)
});
ScalaJS.c.sci_Set$Set4.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_Set$Set4.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.sci_Set$Set4.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.sci_Set$Set4.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set4.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set4.prototype.seq__sc_Set = (function() {
  return this.seq__sci_Set()
});
ScalaJS.c.sci_Set$Set4.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_Set(elem)
});
ScalaJS.c.sci_Set$Set4.prototype.init___O__O__O__O = (function(elem1, elem2, elem3, elem4) {
  this.elem1$4 = elem1;
  this.elem2$4 = elem2;
  this.elem3$4 = elem3;
  this.elem4$4 = elem4;
  ScalaJS.c.sc_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Set$class__$init$__sci_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Set$Set4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$Set4)))
});
ScalaJS.as.sci_Set$Set4 = (function(obj) {
  if ((ScalaJS.is.sci_Set$Set4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$Set4")
  }
});
ScalaJS.isArrayOf.sci_Set$Set4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$Set4)))
});
ScalaJS.asArrayOf.sci_Set$Set4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$Set4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$Set4;", depth)
  }
});
ScalaJS.d.sci_Set$Set4 = new ScalaJS.ClassTypeData({
  sci_Set$Set4: 0
}, false, "scala.collection.immutable.Set$Set4", ScalaJS.d.sc_AbstractSet, {
  sci_Set$Set4: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Set$Set4.prototype.$classData = ScalaJS.d.sci_Set$Set4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Stream = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this)
});
ScalaJS.c.sci_Stream.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.sci_Stream.prototype.constructor = ScalaJS.c.sci_Stream;
/** @constructor */
ScalaJS.h.sci_Stream = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Stream.prototype = ScalaJS.c.sci_Stream.prototype;
ScalaJS.c.sci_Stream.prototype.scala$collection$LinearSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_Stream.prototype.apply__I__O = (function(n) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__apply__sc_LinearSeqOptimized__I__O(this, n)
});
ScalaJS.c.sci_Stream.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__find__sc_LinearSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.sci_Stream.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__sameElements__sc_LinearSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_Stream.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__lengthCompare__sc_LinearSeqOptimized__I__I(this, len)
});
ScalaJS.c.sci_Stream.prototype.isDefinedAt__I__Z = (function(x) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__isDefinedAt__sc_LinearSeqOptimized__I__Z(this, x)
});
ScalaJS.c.sci_Stream.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_LinearSeqOptimized$class__segmentLength__sc_LinearSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.sci_Stream.prototype.seq__sci_LinearSeq = (function() {
  return ScalaJS.i.sci_LinearSeq$class__seq__sci_LinearSeq__sci_LinearSeq(this)
});
ScalaJS.c.sci_Stream.prototype.thisCollection__sc_LinearSeq = (function() {
  return ScalaJS.i.sc_LinearSeqLike$class__thisCollection__sc_LinearSeqLike__sc_LinearSeq(this)
});
ScalaJS.c.sci_Stream.prototype.toCollection__sc_LinearSeqLike__sc_LinearSeq = (function(repr) {
  return ScalaJS.i.sc_LinearSeqLike$class__toCollection__sc_LinearSeqLike__sc_LinearSeqLike__sc_LinearSeq(this, repr)
});
ScalaJS.c.sci_Stream.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_LinearSeqLike$class__hashCode__sc_LinearSeqLike__I(this)
});
ScalaJS.c.sci_Stream.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.sci_Stream()
});
ScalaJS.c.sci_Stream.prototype.append__F0__sci_Stream = (function(rest) {
  if (this.isEmpty__Z()) {
    return ScalaJS.as.sc_GenTraversableOnce(rest.apply__O()).toStream__sci_Stream()
  } else {
    return ScalaJS.m.sci_Stream$cons().apply__O__F0__sci_Stream$Cons(this.head__O(), new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, rest$1) {
      return (function() {
        return ScalaJS.as.sci_Stream(arg$outer.tail__O()).append__F0__sci_Stream(rest$1)
      })
    })(this, rest)))
  }
});
ScalaJS.c.sci_Stream.prototype.force__sci_Stream = (function() {
  var these = this;
  while ((!these.isEmpty__Z())) {
    these = ScalaJS.as.sci_Stream(these.tail__O())
  };
  return this
});
ScalaJS.c.sci_Stream.prototype.length__I = (function() {
  var len = 0;
  var left = this;
  while ((!left.isEmpty__Z())) {
    len = ((len + 1) | 0);
    left = ScalaJS.as.sci_Stream(left.tail__O())
  };
  return len
});
ScalaJS.c.sci_Stream.prototype.scala$collection$immutable$Stream$$asThat__O__O = (function(x) {
  return x
});
ScalaJS.c.sci_Stream.prototype.scala$collection$immutable$Stream$$asStream__O__sci_Stream = (function(x) {
  return ScalaJS.as.sci_Stream(x)
});
ScalaJS.c.sci_Stream.prototype.scala$collection$immutable$Stream$$isStreamBuilder__scg_CanBuildFrom__Z = (function(bf) {
  return ScalaJS.is.sci_Stream$StreamBuilder(bf.apply__O__scm_Builder(this.repr__O()))
});
ScalaJS.c.sci_Stream.prototype.toStream__sci_Stream = (function() {
  return this
});
ScalaJS.c.sci_Stream.prototype.map__F1__scg_CanBuildFrom__O = (function(f, bf) {
  if (this.scala$collection$immutable$Stream$$isStreamBuilder__scg_CanBuildFrom__Z(bf)) {
    if (this.isEmpty__Z()) {
      var jsx$1 = ScalaJS.m.sci_Stream$Empty()
    } else {
      var jsx$1 = ScalaJS.m.sci_Stream$cons().apply__O__F0__sci_Stream$Cons(f.apply__O__O(this.head__O()), new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, f$1) {
        return (function() {
          return arg$outer.scala$collection$immutable$Stream$$asStream__O__sci_Stream(ScalaJS.as.sci_Stream(arg$outer.tail__O()).map__F1__scg_CanBuildFrom__O(f$1, ScalaJS.m.sci_Stream().canBuildFrom__scg_CanBuildFrom()))
        })
      })(this, f)))
    };
    return this.scala$collection$immutable$Stream$$asThat__O__O(jsx$1)
  } else {
    return ScalaJS.i.sc_TraversableLike$class__map__sc_TraversableLike__F1__scg_CanBuildFrom__O(this, f, bf)
  }
});
ScalaJS.c.sci_Stream.prototype.flatMap__F1__scg_CanBuildFrom__O = (function(f, bf) {
  if (this.scala$collection$immutable$Stream$$isStreamBuilder__scg_CanBuildFrom__Z(bf)) {
    if (this.isEmpty__Z()) {
      var jsx$1 = ScalaJS.m.sci_Stream$Empty()
    } else {
      var temp1 = this;
      var nonEmptyPrefix = new ScalaJS.c.sr_ObjectRef().init___O(temp1);
      var prefix = ScalaJS.as.sc_GenTraversableOnce(f.apply__O__O(ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).head__O())).toStream__sci_Stream();
      while (((!ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).isEmpty__Z()) && prefix.isEmpty__Z())) {
        nonEmptyPrefix.elem$1 = ScalaJS.as.sci_Stream(ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).tail__O());
        if ((!ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).isEmpty__Z())) {
          prefix = ScalaJS.as.sc_GenTraversableOnce(f.apply__O__O(ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).head__O())).toStream__sci_Stream()
        }
      };
      if (ScalaJS.as.sci_Stream(nonEmptyPrefix.elem$1).isEmpty__Z()) {
        var jsx$1 = ScalaJS.m.sci_Stream().empty__sci_Stream()
      } else {
        var jsx$1 = prefix.append__F0__sci_Stream(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, f$2, nonEmptyPrefix$1) {
          return (function() {
            return arg$outer.scala$collection$immutable$Stream$$asStream__O__sci_Stream(ScalaJS.as.sci_Stream(ScalaJS.as.sci_Stream(nonEmptyPrefix$1.elem$1).tail__O()).flatMap__F1__scg_CanBuildFrom__O(f$2, ScalaJS.m.sci_Stream().canBuildFrom__scg_CanBuildFrom()))
          })
        })(this, f, nonEmptyPrefix)))
      }
    };
    return this.scala$collection$immutable$Stream$$asThat__O__O(jsx$1)
  } else {
    return ScalaJS.i.sc_TraversableLike$class__flatMap__sc_TraversableLike__F1__scg_CanBuildFrom__O(this, f, bf)
  }
});
ScalaJS.c.sci_Stream.prototype.iterator__sc_Iterator = (function() {
  return new ScalaJS.c.sci_StreamIterator().init___sci_Stream(this)
});
ScalaJS.c.sci_Stream.prototype.foreach__F1__V = (function(f) {
  var _$this = this;
  tailCallLoop: while (true) {
    if ((!_$this.isEmpty__Z())) {
      f.apply__O__O(_$this.head__O());
      _$this = ScalaJS.as.sci_Stream(_$this.tail__O());
      continue tailCallLoop
    };
    return undefined
  }
});
ScalaJS.c.sci_Stream.prototype.foldLeft__O__F2__O = (function(z, op) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (_$this.isEmpty__Z()) {
      return z
    } else {
      var temp$_$this = ScalaJS.as.sci_Stream(_$this.tail__O());
      var temp$z = op.apply__O__O__O(z, _$this.head__O());
      _$this = temp$_$this;
      z = temp$z;
      continue tailCallLoop
    }
  }
});
ScalaJS.c.sci_Stream.prototype.addString__scm_StringBuilder__T__T__T__scm_StringBuilder = (function(b, start, sep, end) {
  b.append__T__scm_StringBuilder(start);
  this.loop$3__p4__T__sci_Stream__scm_StringBuilder__T__T__V("", this, b, sep, end);
  return b
});
ScalaJS.c.sci_Stream.prototype.mkString__T__T = (function(sep) {
  return this.mkString__T__T__T__T("", sep, "")
});
ScalaJS.c.sci_Stream.prototype.mkString__T__T__T__T = (function(start, sep, end) {
  this.force__sci_Stream();
  return ScalaJS.i.sc_TraversableOnce$class__mkString__sc_TraversableOnce__T__T__T__T(this, start, sep, end)
});
ScalaJS.c.sci_Stream.prototype.toString__T = (function() {
  return ScalaJS.i.sc_TraversableOnce$class__mkString__sc_TraversableOnce__T__T__T__T(this, (this.stringPrefix__T() + "("), ", ", ")")
});
ScalaJS.c.sci_Stream.prototype.drop__I__sci_Stream = (function(n) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (((n <= 0) || _$this.isEmpty__Z())) {
      return _$this
    } else {
      var temp$_$this = ScalaJS.as.sci_Stream(_$this.tail__O());
      var temp$n = ((n - 1) | 0);
      _$this = temp$_$this;
      n = temp$n;
      continue tailCallLoop
    }
  }
});
ScalaJS.c.sci_Stream.prototype.reverse__sci_Stream = (function() {
  var result = new ScalaJS.c.sr_ObjectRef().init___O(ScalaJS.m.sci_Stream$Empty());
  var these = this;
  while ((!these.isEmpty__Z())) {
    var r = ScalaJS.m.sci_Stream().consWrapper__F0__sci_Stream$ConsWrapper(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(result$1) {
      return (function() {
        return ScalaJS.as.sci_Stream(result$1.elem$1)
      })
    })(result))).$$hash$colon$colon__O__sci_Stream(these.head__O());
    r.tail__O();
    result.elem$1 = r;
    these = ScalaJS.as.sci_Stream(these.tail__O())
  };
  return ScalaJS.as.sci_Stream(result.elem$1)
});
ScalaJS.c.sci_Stream.prototype.stringPrefix__T = (function() {
  return "Stream"
});
ScalaJS.c.sci_Stream.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__sc_LinearSeqLike__sc_LinearSeq(ScalaJS.as.sc_LinearSeqLike(repr))
});
ScalaJS.c.sci_Stream.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sc_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.seq__sc_Seq = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.seq__sc_LinearSeq = (function() {
  return this.seq__sci_LinearSeq()
});
ScalaJS.c.sci_Stream.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.sci_Stream.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.sci_Stream.prototype.reverse__O = (function() {
  return this.reverse__sci_Stream()
});
ScalaJS.c.sci_Stream.prototype.drop__I__sc_LinearSeqOptimized = (function(n) {
  return this.drop__I__sci_Stream(n)
});
ScalaJS.c.sci_Stream.prototype.loop$3__p4__T__sci_Stream__scm_StringBuilder__T__T__V = (function(pre, these, b$1, sep$2, end$1) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (these.isEmpty__Z()) {
      b$1.append__T__scm_StringBuilder(end$1)
    } else {
      b$1.append__T__scm_StringBuilder(pre).append__O__scm_StringBuilder(these.head__O());
      if (these.tailDefined__Z()) {
        var temp$pre = sep$2;
        var temp$these = ScalaJS.as.sci_Stream(these.tail__O());
        pre = temp$pre;
        these = temp$these;
        continue tailCallLoop
      } else {
        b$1.append__T__scm_StringBuilder(sep$2).append__T__scm_StringBuilder("?").append__T__scm_StringBuilder(end$1)
      }
    };
    return undefined
  }
});
ScalaJS.c.sci_Stream.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V(this);
  ScalaJS.i.sc_LinearSeqLike$class__$init$__sc_LinearSeqLike__V(this);
  ScalaJS.i.sc_LinearSeq$class__$init$__sc_LinearSeq__V(this);
  ScalaJS.i.sci_LinearSeq$class__$init$__sci_LinearSeq__V(this);
  ScalaJS.i.sc_LinearSeqOptimized$class__$init$__sc_LinearSeqOptimized__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Stream = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Stream)))
});
ScalaJS.as.sci_Stream = (function(obj) {
  if ((ScalaJS.is.sci_Stream(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Stream")
  }
});
ScalaJS.isArrayOf.sci_Stream = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Stream)))
});
ScalaJS.asArrayOf.sci_Stream = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Stream(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Stream;", depth)
  }
});
ScalaJS.d.sci_Stream = new ScalaJS.ClassTypeData({
  sci_Stream: 0
}, false, "scala.collection.immutable.Stream", ScalaJS.d.sc_AbstractSeq, {
  sci_Stream: 1,
  sc_LinearSeqOptimized: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Stream.prototype.$classData = ScalaJS.d.sci_Stream;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Vector = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this);
  this.startIndex$4 = 0;
  this.endIndex$4 = 0;
  this.focus$4 = 0;
  this.dirty$4 = false;
  this.depth$4 = 0;
  this.display0$4 = null;
  this.display1$4 = null;
  this.display2$4 = null;
  this.display3$4 = null;
  this.display4$4 = null;
  this.display5$4 = null
});
ScalaJS.c.sci_Vector.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.sci_Vector.prototype.constructor = ScalaJS.c.sci_Vector;
/** @constructor */
ScalaJS.h.sci_Vector = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Vector.prototype = ScalaJS.c.sci_Vector.prototype;
ScalaJS.c.sci_Vector.prototype.depth__I = (function() {
  return this.depth$4
});
ScalaJS.c.sci_Vector.prototype.depth$und$eq__I__V = (function(x$1) {
  this.depth$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display0__AO = (function() {
  return this.display0$4
});
ScalaJS.c.sci_Vector.prototype.display0$und$eq__AO__V = (function(x$1) {
  this.display0$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display1__AO = (function() {
  return this.display1$4
});
ScalaJS.c.sci_Vector.prototype.display1$und$eq__AO__V = (function(x$1) {
  this.display1$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display2__AO = (function() {
  return this.display2$4
});
ScalaJS.c.sci_Vector.prototype.display2$und$eq__AO__V = (function(x$1) {
  this.display2$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display3__AO = (function() {
  return this.display3$4
});
ScalaJS.c.sci_Vector.prototype.display3$und$eq__AO__V = (function(x$1) {
  this.display3$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display4__AO = (function() {
  return this.display4$4
});
ScalaJS.c.sci_Vector.prototype.display4$und$eq__AO__V = (function(x$1) {
  this.display4$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.display5__AO = (function() {
  return this.display5$4
});
ScalaJS.c.sci_Vector.prototype.display5$und$eq__AO__V = (function(x$1) {
  this.display5$4 = x$1
});
ScalaJS.c.sci_Vector.prototype.initFrom__sci_VectorPointer__V = (function(that) {
  ScalaJS.i.sci_VectorPointer$class__initFrom__sci_VectorPointer__sci_VectorPointer__V(this, that)
});
ScalaJS.c.sci_Vector.prototype.initFrom__sci_VectorPointer__I__V = (function(that, depth) {
  ScalaJS.i.sci_VectorPointer$class__initFrom__sci_VectorPointer__sci_VectorPointer__I__V(this, that, depth)
});
ScalaJS.c.sci_Vector.prototype.getElem__I__I__O = (function(index, xor) {
  return ScalaJS.i.sci_VectorPointer$class__getElem__sci_VectorPointer__I__I__O(this, index, xor)
});
ScalaJS.c.sci_Vector.prototype.gotoPos__I__I__V = (function(index, xor) {
  ScalaJS.i.sci_VectorPointer$class__gotoPos__sci_VectorPointer__I__I__V(this, index, xor)
});
ScalaJS.c.sci_Vector.prototype.copyOf__AO__AO = (function(a) {
  return ScalaJS.i.sci_VectorPointer$class__copyOf__sci_VectorPointer__AO__AO(this, a)
});
ScalaJS.c.sci_Vector.prototype.seq__sci_IndexedSeq = (function() {
  return ScalaJS.i.sci_IndexedSeq$class__seq__sci_IndexedSeq__sci_IndexedSeq(this)
});
ScalaJS.c.sci_Vector.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.sci_Vector.prototype.thisCollection__sc_IndexedSeq = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__thisCollection__sc_IndexedSeqLike__sc_IndexedSeq(this)
});
ScalaJS.c.sci_Vector.prototype.toCollection__O__sc_IndexedSeq = (function(repr) {
  return ScalaJS.i.sc_IndexedSeqLike$class__toCollection__sc_IndexedSeqLike__O__sc_IndexedSeq(this, repr)
});
ScalaJS.c.sci_Vector.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.sci_Vector.prototype.startIndex__I = (function() {
  return this.startIndex$4
});
ScalaJS.c.sci_Vector.prototype.endIndex__I = (function() {
  return this.endIndex$4
});
ScalaJS.c.sci_Vector.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.sci_Vector()
});
ScalaJS.c.sci_Vector.prototype.dirty__Z = (function() {
  return this.dirty$4
});
ScalaJS.c.sci_Vector.prototype.length__I = (function() {
  return ((this.endIndex__I() - this.startIndex__I()) | 0)
});
ScalaJS.c.sci_Vector.prototype.lengthCompare__I__I = (function(len) {
  return ((this.length__I() - len) | 0)
});
ScalaJS.c.sci_Vector.prototype.initIterator__sci_VectorIterator__V = (function(s) {
  s.initFrom__sci_VectorPointer__V(this);
  if (this.dirty__Z()) {
    s.stabilize__I__V(this.focus$4)
  };
  if ((s.depth__I() > 1)) {
    s.gotoPos__I__I__V(this.startIndex__I(), (this.startIndex__I() ^ this.focus$4))
  }
});
ScalaJS.c.sci_Vector.prototype.iterator__sci_VectorIterator = (function() {
  var s = new ScalaJS.c.sci_VectorIterator().init___I__I(this.startIndex__I(), this.endIndex__I());
  this.initIterator__sci_VectorIterator__V(s);
  return s
});
ScalaJS.c.sci_Vector.prototype.apply__I__O = (function(index) {
  var idx = this.checkRangeConvert__p4__I__I(index);
  return this.getElem__I__I__O(idx, (idx ^ this.focus$4))
});
ScalaJS.c.sci_Vector.prototype.checkRangeConvert__p4__I__I = (function(index) {
  var idx = ((index + this.startIndex__I()) | 0);
  if (((0 <= index) && (idx < this.endIndex__I()))) {
    return idx
  } else {
    throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(index))
  }
});
ScalaJS.c.sci_Vector.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.sci_Vector.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__O__sc_IndexedSeq(repr)
});
ScalaJS.c.sci_Vector.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sc_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.seq__sc_Seq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_Vector.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.sci_Vector.prototype.iterator__sc_Iterator = (function() {
  return this.iterator__sci_VectorIterator()
});
ScalaJS.c.sci_Vector.prototype.init___I__I__I = (function(startIndex, endIndex, focus) {
  this.startIndex$4 = startIndex;
  this.endIndex$4 = endIndex;
  this.focus$4 = focus;
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.sci_IndexedSeq$class__$init$__sci_IndexedSeq__V(this);
  ScalaJS.i.sci_VectorPointer$class__$init$__sci_VectorPointer__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  this.dirty$4 = false;
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Vector = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Vector)))
});
ScalaJS.as.sci_Vector = (function(obj) {
  if ((ScalaJS.is.sci_Vector(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Vector")
  }
});
ScalaJS.isArrayOf.sci_Vector = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Vector)))
});
ScalaJS.asArrayOf.sci_Vector = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Vector(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Vector;", depth)
  }
});
ScalaJS.d.sci_Vector = new ScalaJS.ClassTypeData({
  sci_Vector: 0
}, false, "scala.collection.immutable.Vector", ScalaJS.d.sc_AbstractSeq, {
  sci_Vector: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_VectorPointer: 1,
  sci_IndexedSeq: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Vector.prototype.$classData = ScalaJS.d.sci_Vector;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_WrappedString = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this);
  this.self$4 = null
});
ScalaJS.c.sci_WrappedString.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.sci_WrappedString.prototype.constructor = ScalaJS.c.sci_WrappedString;
/** @constructor */
ScalaJS.h.sci_WrappedString = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_WrappedString.prototype = ScalaJS.c.sci_WrappedString.prototype;
ScalaJS.c.sci_WrappedString.prototype.apply__I__C = (function(n) {
  return ScalaJS.i.sci_StringLike$class__apply__sci_StringLike__I__C(this, n)
});
ScalaJS.c.sci_WrappedString.prototype.linesWithSeparators__sc_Iterator = (function() {
  return ScalaJS.i.sci_StringLike$class__linesWithSeparators__sci_StringLike__sc_Iterator(this)
});
ScalaJS.c.sci_WrappedString.prototype.stripMargin__C__T = (function(marginChar) {
  return ScalaJS.i.sci_StringLike$class__stripMargin__sci_StringLike__C__T(this, marginChar)
});
ScalaJS.c.sci_WrappedString.prototype.toArray__s_reflect_ClassTag__O = (function(evidence$1) {
  return ScalaJS.i.sci_StringLike$class__toArray__sci_StringLike__s_reflect_ClassTag__O(this, evidence$1)
});
ScalaJS.c.sci_WrappedString.prototype.scala$collection$IndexedSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_WrappedString.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__isEmpty__sc_IndexedSeqOptimized__Z(this)
});
ScalaJS.c.sci_WrappedString.prototype.foreach__F1__V = (function(f) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__foreach__sc_IndexedSeqOptimized__F1__V(this, f)
});
ScalaJS.c.sci_WrappedString.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__find__sc_IndexedSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.sci_WrappedString.prototype.foldLeft__O__F2__O = (function(z, op) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__foldLeft__sc_IndexedSeqOptimized__O__F2__O(this, z, op)
});
ScalaJS.c.sci_WrappedString.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__sameElements__sc_IndexedSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.sci_WrappedString.prototype.copyToArray__O__I__I__V = (function(xs, start, len) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__copyToArray__sc_IndexedSeqOptimized__O__I__I__V(this, xs, start, len)
});
ScalaJS.c.sci_WrappedString.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__lengthCompare__sc_IndexedSeqOptimized__I__I(this, len)
});
ScalaJS.c.sci_WrappedString.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__segmentLength__sc_IndexedSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.sci_WrappedString.prototype.reverse__O = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__reverse__sc_IndexedSeqOptimized__O(this)
});
ScalaJS.c.sci_WrappedString.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.sci_IndexedSeq$class__companion__sci_IndexedSeq__scg_GenericCompanion(this)
});
ScalaJS.c.sci_WrappedString.prototype.seq__sci_IndexedSeq = (function() {
  return ScalaJS.i.sci_IndexedSeq$class__seq__sci_IndexedSeq__sci_IndexedSeq(this)
});
ScalaJS.c.sci_WrappedString.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.sci_WrappedString.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator(this)
});
ScalaJS.c.sci_WrappedString.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.sci_WrappedString.prototype.self__T = (function() {
  return this.self$4
});
ScalaJS.c.sci_WrappedString.prototype.thisCollection__sci_WrappedString = (function() {
  return this
});
ScalaJS.c.sci_WrappedString.prototype.toCollection__sci_WrappedString__sci_WrappedString = (function(repr) {
  return repr
});
ScalaJS.c.sci_WrappedString.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_WrappedString().newBuilder__scm_Builder()
});
ScalaJS.c.sci_WrappedString.prototype.length__I = (function() {
  return ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(this.self__T())
});
ScalaJS.c.sci_WrappedString.prototype.toString__T = (function() {
  return this.self__T()
});
ScalaJS.c.sci_WrappedString.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.sci_WrappedString.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_WrappedString.prototype.seq__sc_Iterable = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_WrappedString.prototype.seq__sc_Seq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_WrappedString.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__sci_IndexedSeq()
});
ScalaJS.c.sci_WrappedString.prototype.apply__O__O = (function(v1) {
  return ScalaJS.bC(this.apply__I__C(ScalaJS.uI(v1)))
});
ScalaJS.c.sci_WrappedString.prototype.apply__I__O = (function(idx) {
  return ScalaJS.bC(this.apply__I__C(idx))
});
ScalaJS.c.sci_WrappedString.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__sci_WrappedString__sci_WrappedString(ScalaJS.as.sci_WrappedString(repr))
});
ScalaJS.c.sci_WrappedString.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sci_WrappedString()
});
ScalaJS.c.sci_WrappedString.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sci_WrappedString()
});
ScalaJS.c.sci_WrappedString.prototype.init___T = (function(self) {
  this.self$4 = self;
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sci_Traversable$class__$init$__sci_Traversable__V(this);
  ScalaJS.i.sci_Iterable$class__$init$__sci_Iterable__V(this);
  ScalaJS.i.sci_Seq$class__$init$__sci_Seq__V(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.sci_IndexedSeq$class__$init$__sci_IndexedSeq__V(this);
  ScalaJS.i.sc_IndexedSeqOptimized$class__$init$__sc_IndexedSeqOptimized__V(this);
  ScalaJS.i.s_math_Ordered$class__$init$__s_math_Ordered__V(this);
  ScalaJS.i.sci_StringLike$class__$init$__sci_StringLike__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_WrappedString = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_WrappedString)))
});
ScalaJS.as.sci_WrappedString = (function(obj) {
  if ((ScalaJS.is.sci_WrappedString(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.WrappedString")
  }
});
ScalaJS.isArrayOf.sci_WrappedString = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_WrappedString)))
});
ScalaJS.asArrayOf.sci_WrappedString = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_WrappedString(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.WrappedString;", depth)
  }
});
ScalaJS.d.sci_WrappedString = new ScalaJS.ClassTypeData({
  sci_WrappedString: 0
}, false, "scala.collection.immutable.WrappedString", ScalaJS.d.sc_AbstractSeq, {
  sci_WrappedString: 1,
  sci_StringLike: 1,
  s_math_Ordered: 1,
  jl_Comparable: 1,
  sc_IndexedSeqOptimized: 1,
  sci_IndexedSeq: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_WrappedString.prototype.$classData = ScalaJS.d.sci_WrappedString;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_AbstractMap = (function() {
  ScalaJS.c.sc_AbstractMap.call(this)
});
ScalaJS.c.scm_AbstractMap.prototype = new ScalaJS.h.sc_AbstractMap();
ScalaJS.c.scm_AbstractMap.prototype.constructor = ScalaJS.c.scm_AbstractMap;
/** @constructor */
ScalaJS.h.scm_AbstractMap = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_AbstractMap.prototype = ScalaJS.c.scm_AbstractMap.prototype;
ScalaJS.c.scm_AbstractMap.prototype.seq__scm_Map = (function() {
  return ScalaJS.i.scm_Map$class__seq__scm_Map__scm_Map(this)
});
ScalaJS.c.scm_AbstractMap.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.i.scm_MapLike$class__newBuilder__scm_MapLike__scm_Builder(this)
});
ScalaJS.c.scm_AbstractMap.prototype.$$plus__T2__scm_Map = (function(kv) {
  return ScalaJS.i.scm_MapLike$class__$plus__scm_MapLike__T2__scm_Map(this, kv)
});
ScalaJS.c.scm_AbstractMap.prototype.clone__scm_Map = (function() {
  return ScalaJS.i.scm_MapLike$class__clone__scm_MapLike__scm_Map(this)
});
ScalaJS.c.scm_AbstractMap.prototype.result__scm_Map = (function() {
  return ScalaJS.i.scm_MapLike$class__result__scm_MapLike__scm_Map(this)
});
ScalaJS.c.scm_AbstractMap.prototype.sizeHint__I__V = (function(size) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__I__V(this, size)
});
ScalaJS.c.scm_AbstractMap.prototype.sizeHint__sc_TraversableLike__V = (function(coll) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V(this, coll)
});
ScalaJS.c.scm_AbstractMap.prototype.sizeHint__sc_TraversableLike__I__V = (function(coll, delta) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V(this, coll, delta)
});
ScalaJS.c.scm_AbstractMap.prototype.sizeHintBounded__I__sc_TraversableLike__V = (function(size, boundingColl) {
  ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V(this, size, boundingColl)
});
ScalaJS.c.scm_AbstractMap.prototype.$$plus$plus$eq__sc_TraversableOnce__scg_Growable = (function(xs) {
  return ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable(this, xs)
});
ScalaJS.c.scm_AbstractMap.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.scm_Iterable$class__companion__scm_Iterable__scg_GenericCompanion(this)
});
ScalaJS.c.scm_AbstractMap.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_Map()
});
ScalaJS.c.scm_AbstractMap.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractMap.prototype.init___.call(this);
  ScalaJS.i.scm_Traversable$class__$init$__scm_Traversable__V(this);
  ScalaJS.i.scm_Iterable$class__$init$__scm_Iterable__V(this);
  ScalaJS.i.scg_Growable$class__$init$__scg_Growable__V(this);
  ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V(this);
  ScalaJS.i.scg_Shrinkable$class__$init$__scg_Shrinkable__V(this);
  ScalaJS.i.scm_Cloneable$class__$init$__scm_Cloneable__V(this);
  ScalaJS.i.scm_MapLike$class__$init$__scm_MapLike__V(this);
  ScalaJS.i.scm_Map$class__$init$__scm_Map__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_AbstractMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_AbstractMap)))
});
ScalaJS.as.scm_AbstractMap = (function(obj) {
  if ((ScalaJS.is.scm_AbstractMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.AbstractMap")
  }
});
ScalaJS.isArrayOf.scm_AbstractMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_AbstractMap)))
});
ScalaJS.asArrayOf.scm_AbstractMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_AbstractMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.AbstractMap;", depth)
  }
});
ScalaJS.d.scm_AbstractMap = new ScalaJS.ClassTypeData({
  scm_AbstractMap: 0
}, false, "scala.collection.mutable.AbstractMap", ScalaJS.d.sc_AbstractMap, {
  scm_AbstractMap: 1,
  scm_Map: 1,
  scm_MapLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scg_Shrinkable: 1,
  scm_Builder: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_AbstractMap.prototype.$classData = ScalaJS.d.scm_AbstractMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_AbstractSeq = (function() {
  ScalaJS.c.sc_AbstractSeq.call(this)
});
ScalaJS.c.scm_AbstractSeq.prototype = new ScalaJS.h.sc_AbstractSeq();
ScalaJS.c.scm_AbstractSeq.prototype.constructor = ScalaJS.c.scm_AbstractSeq;
/** @constructor */
ScalaJS.h.scm_AbstractSeq = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_AbstractSeq.prototype = ScalaJS.c.scm_AbstractSeq.prototype;
ScalaJS.c.scm_AbstractSeq.prototype.seq__scm_Seq = (function() {
  return ScalaJS.i.scm_Seq$class__seq__scm_Seq__scm_Seq(this)
});
ScalaJS.c.scm_AbstractSeq.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_Seq()
});
ScalaJS.c.scm_AbstractSeq.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_Seq()
});
ScalaJS.c.scm_AbstractSeq.prototype.init___ = (function() {
  ScalaJS.c.sc_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.scm_Traversable$class__$init$__scm_Traversable__V(this);
  ScalaJS.i.scm_Iterable$class__$init$__scm_Iterable__V(this);
  ScalaJS.i.scm_Cloneable$class__$init$__scm_Cloneable__V(this);
  ScalaJS.i.scm_SeqLike$class__$init$__scm_SeqLike__V(this);
  ScalaJS.i.scm_Seq$class__$init$__scm_Seq__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_AbstractSeq = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_AbstractSeq)))
});
ScalaJS.as.scm_AbstractSeq = (function(obj) {
  if ((ScalaJS.is.scm_AbstractSeq(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.AbstractSeq")
  }
});
ScalaJS.isArrayOf.scm_AbstractSeq = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_AbstractSeq)))
});
ScalaJS.asArrayOf.scm_AbstractSeq = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_AbstractSeq(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.AbstractSeq;", depth)
  }
});
ScalaJS.d.scm_AbstractSeq = new ScalaJS.ClassTypeData({
  scm_AbstractSeq: 0
}, false, "scala.collection.mutable.AbstractSeq", ScalaJS.d.sc_AbstractSeq, {
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_AbstractSeq.prototype.$classData = ScalaJS.d.scm_AbstractSeq;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_AbstractSet = (function() {
  ScalaJS.c.scm_AbstractIterable.call(this)
});
ScalaJS.c.scm_AbstractSet.prototype = new ScalaJS.h.scm_AbstractIterable();
ScalaJS.c.scm_AbstractSet.prototype.constructor = ScalaJS.c.scm_AbstractSet;
/** @constructor */
ScalaJS.h.scm_AbstractSet = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_AbstractSet.prototype = ScalaJS.c.scm_AbstractSet.prototype;
ScalaJS.c.scm_AbstractSet.prototype.seq__scm_Set = (function() {
  return ScalaJS.i.scm_Set$class__seq__scm_Set__scm_Set(this)
});
ScalaJS.c.scm_AbstractSet.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.i.scm_SetLike$class__newBuilder__scm_SetLike__scm_Builder(this)
});
ScalaJS.c.scm_AbstractSet.prototype.result__scm_Set = (function() {
  return ScalaJS.i.scm_SetLike$class__result__scm_SetLike__scm_Set(this)
});
ScalaJS.c.scm_AbstractSet.prototype.$$plus__O__scm_Set = (function(elem) {
  return ScalaJS.i.scm_SetLike$class__$plus__scm_SetLike__O__scm_Set(this, elem)
});
ScalaJS.c.scm_AbstractSet.prototype.sizeHint__I__V = (function(size) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__I__V(this, size)
});
ScalaJS.c.scm_AbstractSet.prototype.sizeHint__sc_TraversableLike__V = (function(coll) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V(this, coll)
});
ScalaJS.c.scm_AbstractSet.prototype.sizeHint__sc_TraversableLike__I__V = (function(coll, delta) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V(this, coll, delta)
});
ScalaJS.c.scm_AbstractSet.prototype.sizeHintBounded__I__sc_TraversableLike__V = (function(size, boundingColl) {
  ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V(this, size, boundingColl)
});
ScalaJS.c.scm_AbstractSet.prototype.$$plus$plus$eq__sc_TraversableOnce__scg_Growable = (function(xs) {
  return ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable(this, xs)
});
ScalaJS.c.scm_AbstractSet.prototype.scala$collection$SetLike$$super$map__F1__scg_CanBuildFrom__O = (function(f, bf) {
  return ScalaJS.i.sc_TraversableLike$class__map__sc_TraversableLike__F1__scg_CanBuildFrom__O(this, f, bf)
});
ScalaJS.c.scm_AbstractSet.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_SetLike$class__toBuffer__sc_SetLike__scm_Buffer(this)
});
ScalaJS.c.scm_AbstractSet.prototype.map__F1__scg_CanBuildFrom__O = (function(f, bf) {
  return ScalaJS.i.sc_SetLike$class__map__sc_SetLike__F1__scg_CanBuildFrom__O(this, f, bf)
});
ScalaJS.c.scm_AbstractSet.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.sc_SetLike$class__isEmpty__sc_SetLike__Z(this)
});
ScalaJS.c.scm_AbstractSet.prototype.stringPrefix__T = (function() {
  return ScalaJS.i.sc_SetLike$class__stringPrefix__sc_SetLike__T(this)
});
ScalaJS.c.scm_AbstractSet.prototype.toString__T = (function() {
  return ScalaJS.i.sc_SetLike$class__toString__sc_SetLike__T(this)
});
ScalaJS.c.scm_AbstractSet.prototype.empty__sc_GenSet = (function() {
  return ScalaJS.i.scg_GenericSetTemplate$class__empty__scg_GenericSetTemplate__sc_GenSet(this)
});
ScalaJS.c.scm_AbstractSet.prototype.apply__O__Z = (function(elem) {
  return ScalaJS.i.sc_GenSetLike$class__apply__sc_GenSetLike__O__Z(this, elem)
});
ScalaJS.c.scm_AbstractSet.prototype.subsetOf__sc_GenSet__Z = (function(that) {
  return ScalaJS.i.sc_GenSetLike$class__subsetOf__sc_GenSetLike__sc_GenSet__Z(this, that)
});
ScalaJS.c.scm_AbstractSet.prototype.equals__O__Z = (function(that) {
  return ScalaJS.i.sc_GenSetLike$class__equals__sc_GenSetLike__O__Z(this, that)
});
ScalaJS.c.scm_AbstractSet.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_GenSetLike$class__hashCode__sc_GenSetLike__I(this)
});
ScalaJS.c.scm_AbstractSet.prototype.apply$mcVI$sp__I__V = (function(v1) {
  ScalaJS.i.s_Function1$class__apply$mcVI$sp__F1__I__V(this, v1)
});
ScalaJS.c.scm_AbstractSet.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_Set()
});
ScalaJS.c.scm_AbstractSet.prototype.init___ = (function() {
  ScalaJS.c.scm_AbstractIterable.prototype.init___.call(this);
  ScalaJS.i.s_Function1$class__$init$__F1__V(this);
  ScalaJS.i.sc_GenSetLike$class__$init$__sc_GenSetLike__V(this);
  ScalaJS.i.scg_GenericSetTemplate$class__$init$__scg_GenericSetTemplate__V(this);
  ScalaJS.i.sc_GenSet$class__$init$__sc_GenSet__V(this);
  ScalaJS.i.scg_Subtractable$class__$init$__scg_Subtractable__V(this);
  ScalaJS.i.sc_SetLike$class__$init$__sc_SetLike__V(this);
  ScalaJS.i.sc_Set$class__$init$__sc_Set__V(this);
  ScalaJS.i.scg_Growable$class__$init$__scg_Growable__V(this);
  ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V(this);
  ScalaJS.i.scg_Shrinkable$class__$init$__scg_Shrinkable__V(this);
  ScalaJS.i.scm_Cloneable$class__$init$__scm_Cloneable__V(this);
  ScalaJS.i.scm_SetLike$class__$init$__scm_SetLike__V(this);
  ScalaJS.i.scm_Set$class__$init$__scm_Set__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_AbstractSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_AbstractSet)))
});
ScalaJS.as.scm_AbstractSet = (function(obj) {
  if ((ScalaJS.is.scm_AbstractSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.AbstractSet")
  }
});
ScalaJS.isArrayOf.scm_AbstractSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_AbstractSet)))
});
ScalaJS.asArrayOf.scm_AbstractSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_AbstractSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.AbstractSet;", depth)
  }
});
ScalaJS.d.scm_AbstractSet = new ScalaJS.ClassTypeData({
  scm_AbstractSet: 0
}, false, "scala.collection.mutable.AbstractSet", ScalaJS.d.scm_AbstractIterable, {
  scm_AbstractSet: 1,
  scm_Set: 1,
  scm_SetLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scg_Shrinkable: 1,
  scm_Builder: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  sc_script_Scriptable: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  scm_AbstractIterable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_AbstractSet.prototype.$classData = ScalaJS.d.scm_AbstractSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_HashMap$ = (function() {
  ScalaJS.c.scg_MutableMapFactory.call(this)
});
ScalaJS.c.scm_HashMap$.prototype = new ScalaJS.h.scg_MutableMapFactory();
ScalaJS.c.scm_HashMap$.prototype.constructor = ScalaJS.c.scm_HashMap$;
/** @constructor */
ScalaJS.h.scm_HashMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_HashMap$.prototype = ScalaJS.c.scm_HashMap$.prototype;
ScalaJS.c.scm_HashMap$.prototype.empty__scm_HashMap = (function() {
  return new ScalaJS.c.scm_HashMap().init___()
});
ScalaJS.c.scm_HashMap$.prototype.empty__sc_GenMap = (function() {
  return this.empty__scm_HashMap()
});
ScalaJS.c.scm_HashMap$.prototype.empty__sc_Map = (function() {
  return this.empty__scm_HashMap()
});
/*<skip>*/;
ScalaJS.is.scm_HashMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_HashMap$)))
});
ScalaJS.as.scm_HashMap$ = (function(obj) {
  if ((ScalaJS.is.scm_HashMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.HashMap$")
  }
});
ScalaJS.isArrayOf.scm_HashMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_HashMap$)))
});
ScalaJS.asArrayOf.scm_HashMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_HashMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.HashMap$;", depth)
  }
});
ScalaJS.d.scm_HashMap$ = new ScalaJS.ClassTypeData({
  scm_HashMap$: 0
}, false, "scala.collection.mutable.HashMap$", ScalaJS.d.scg_MutableMapFactory, {
  scm_HashMap$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_MutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.scm_HashMap$.prototype.$classData = ScalaJS.d.scm_HashMap$;
ScalaJS.n.scm_HashMap = undefined;
ScalaJS.m.scm_HashMap = (function() {
  if ((!ScalaJS.n.scm_HashMap)) {
    ScalaJS.n.scm_HashMap = new ScalaJS.c.scm_HashMap$().init___()
  };
  return ScalaJS.n.scm_HashMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_Map$ = (function() {
  ScalaJS.c.scg_MutableMapFactory.call(this)
});
ScalaJS.c.scm_Map$.prototype = new ScalaJS.h.scg_MutableMapFactory();
ScalaJS.c.scm_Map$.prototype.constructor = ScalaJS.c.scm_Map$;
/** @constructor */
ScalaJS.h.scm_Map$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_Map$.prototype = ScalaJS.c.scm_Map$.prototype;
ScalaJS.c.scm_Map$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return new ScalaJS.c.scg_GenMapFactory$MapCanBuildFrom().init___scg_GenMapFactory(this)
});
ScalaJS.c.scm_Map$.prototype.empty__scm_Map = (function() {
  return new ScalaJS.c.scm_HashMap().init___()
});
ScalaJS.c.scm_Map$.prototype.empty__sc_GenMap = (function() {
  return this.empty__scm_Map()
});
ScalaJS.c.scm_Map$.prototype.empty__sc_Map = (function() {
  return this.empty__scm_Map()
});
/*<skip>*/;
ScalaJS.is.scm_Map$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_Map$)))
});
ScalaJS.as.scm_Map$ = (function(obj) {
  if ((ScalaJS.is.scm_Map$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.Map$")
  }
});
ScalaJS.isArrayOf.scm_Map$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_Map$)))
});
ScalaJS.asArrayOf.scm_Map$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_Map$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.Map$;", depth)
  }
});
ScalaJS.d.scm_Map$ = new ScalaJS.ClassTypeData({
  scm_Map$: 0
}, false, "scala.collection.mutable.Map$", ScalaJS.d.scg_MutableMapFactory, {
  scm_Map$: 1,
  scg_MutableMapFactory: 1,
  scg_MapFactory: 1,
  scg_GenMapFactory: 1,
  O: 1
});
ScalaJS.c.scm_Map$.prototype.$classData = ScalaJS.d.scm_Map$;
ScalaJS.n.scm_Map = undefined;
ScalaJS.m.scm_Map = (function() {
  if ((!ScalaJS.n.scm_Map)) {
    ScalaJS.n.scm_Map = new ScalaJS.c.scm_Map$().init___()
  };
  return ScalaJS.n.scm_Map
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sjs_js_JavaScriptException = (function() {
  ScalaJS.c.jl_RuntimeException.call(this);
  this.exception$4 = null
});
ScalaJS.c.sjs_js_JavaScriptException.prototype = new ScalaJS.h.jl_RuntimeException();
ScalaJS.c.sjs_js_JavaScriptException.prototype.constructor = ScalaJS.c.sjs_js_JavaScriptException;
/** @constructor */
ScalaJS.h.sjs_js_JavaScriptException = (function() {
  /*<skip>*/
});
ScalaJS.h.sjs_js_JavaScriptException.prototype = ScalaJS.c.sjs_js_JavaScriptException.prototype;
ScalaJS.c.sjs_js_JavaScriptException.prototype.exception__sjs_js_Any = (function() {
  return this.exception$4
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.toString__T = (function() {
  return ScalaJS.objectToString(this.exception__sjs_js_Any())
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.fillInStackTrace__jl_Throwable = (function() {
  ScalaJS.m.sjsr_StackTrace().captureState__jl_Throwable__sjs_js_Any__V(this, this.exception__sjs_js_Any());
  return this
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.productPrefix__T = (function() {
  return "JavaScriptException"
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.productArity__I = (function() {
  return 1
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  switch (x1) {
    case 0:
      {
        return this.exception__sjs_js_Any();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1));
  }
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.canEqual__O__Z = (function(x$1) {
  return ScalaJS.is.sjs_js_JavaScriptException(x$1)
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.hashCode__I = (function() {
  return ScalaJS.m.sr_ScalaRunTime().$$undhashCode__s_Product__I(this)
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.equals__O__Z = (function(x$1) {
  if ((this === x$1)) {
    return true
  } else {
    var x1 = x$1;
    matchEnd4: {
      if (ScalaJS.is.sjs_js_JavaScriptException(x1)) {
        var jsx$1 = true;
        break matchEnd4
      };
      var jsx$1 = false;
      break matchEnd4
    };
    if (jsx$1) {
      var JavaScriptException$1 = ScalaJS.as.sjs_js_JavaScriptException(x$1);
      return ((this.exception__sjs_js_Any() === JavaScriptException$1.exception__sjs_js_Any()) && JavaScriptException$1.canEqual__O__Z(this))
    } else {
      return false
    }
  }
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.init___sjs_js_Any = (function(exception) {
  this.exception$4 = exception;
  ScalaJS.c.jl_RuntimeException.prototype.init___.call(this);
  ScalaJS.i.s_Product$class__$init$__s_Product__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sjs_js_JavaScriptException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sjs_js_JavaScriptException)))
});
ScalaJS.as.sjs_js_JavaScriptException = (function(obj) {
  if ((ScalaJS.is.sjs_js_JavaScriptException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.scalajs.js.JavaScriptException")
  }
});
ScalaJS.isArrayOf.sjs_js_JavaScriptException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sjs_js_JavaScriptException)))
});
ScalaJS.asArrayOf.sjs_js_JavaScriptException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sjs_js_JavaScriptException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.scalajs.js.JavaScriptException;", depth)
  }
});
ScalaJS.d.sjs_js_JavaScriptException = new ScalaJS.ClassTypeData({
  sjs_js_JavaScriptException: 0
}, false, "scala.scalajs.js.JavaScriptException", ScalaJS.d.jl_RuntimeException, {
  sjs_js_JavaScriptException: 1,
  s_Serializable: 1,
  s_Product: 1,
  s_Equals: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.sjs_js_JavaScriptException.prototype.$classData = ScalaJS.d.sjs_js_JavaScriptException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.authors$5 = null;
  this.title$5 = null;
  this.text$5 = null;
  this.published$5 = null;
  this.lastEdited$5 = null
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_ArticleView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$1().init___Lorg_denigma_binding_frontend_ArticleView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$2().init___Lorg_denigma_binding_frontend_ArticleView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$3().init___Lorg_denigma_binding_frontend_ArticleView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView$$anon$4().init___Lorg_denigma_binding_frontend_ArticleView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.authors__Lrx_core_Var = (function() {
  return this.authors$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.title__Lrx_core_Var = (function() {
  return this.title$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.text__Lrx_core_Var = (function() {
  return this.text$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.published__Lrx_core_Var = (function() {
  return this.published$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.lastEdited__Lrx_core_Var = (function() {
  return this.lastEdited$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "article", element);
  this.authors$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "Anton Kulaga"
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.title$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "ScalaJS and scalajs-binding presentation"
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.text$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T("\n      <h3 class=\"ui blue message\">Scala js allows to make dynamic property binding and share code between backend and frontend</h3>\n      <a href=\"http://http://www.scala-js-fiddle.com/\">YOU CAN TRY IT RIGHT NOW</a>\n   ")).stripMargin__T()
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.published$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "17/05/2014"
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.lastEdited$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "17/05/2014"
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_ArticleView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_ArticleView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_ArticleView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.ArticleView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_ArticleView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_ArticleView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_ArticleView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.ArticleView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_ArticleView: 0
}, false, "org.denigma.binding.frontend.ArticleView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_ArticleView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_ArticleView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_ArticleView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$ = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.tags$5 = null;
  this.strings$5 = null;
  this.bools$5 = null;
  this.sidebarParams$5 = null;
  this.bitmap$0$5 = false
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$ = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_FrontEnd$.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.bools$lzycompute__p5__sci_Map = (function() {
  if ((!this.bitmap$0$5)) {
    this.bools$5 = this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$3().init___());
    this.bitmap$0$5 = true
  };
  return this.bools$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.tags__sci_Map = (function() {
  return this.tags$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.strings__sci_Map = (function() {
  return this.strings$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.bools__sci_Map = (function() {
  if ((!this.bitmap$0$5)) {
    return this.bools$lzycompute__p5__sci_Map()
  } else {
    return this.bools$5
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$4().init___())
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.sidebarParams__sjs_js_Dynamic = (function() {
  return this.sidebarParams$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.main__V = (function() {
  ScalaJS.m.Lmodels_RegisterPicklers().registerPicklers__V();
  this.bind__Lorg_scalajs_dom_HTMLElement__V(this.viewElement__Lorg_scalajs_dom_HTMLElement());
  ScalaJS.m.Lorg_denigma_extensions_package().AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(ScalaJS.protect(ScalaJS.g["jQuery"])(".top.sidebar")).dyn__sjs_js_Dynamic()["sidebar"](this.sidebarParams__sjs_js_Dynamic())["sidebar"]("show");
  ScalaJS.m.Lorg_denigma_extensions_package().AnyJs__sjs_js_Any__Lorg_denigma_extensions_AnyJsExtensions$AnyJs(ScalaJS.protect(ScalaJS.g["jQuery"])(".left.sidebar")).dyn__sjs_js_Dynamic()["sidebar"](this.sidebarParams__sjs_js_Dynamic())["sidebar"]("show")
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.load__T__T__V = (function(content, into) {
  ScalaJS.g["document"]["getElementById"](into)["innerHTML"] = content
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.moveInto__T__T__V = (function(from, into) {
  var ins = ScalaJS.g["document"]["getElementById"](from);
  var intoElement = ScalaJS.g["document"]["getElementById"](into);
  this.loadElementInto__Lorg_scalajs_dom_HTMLElement__T__T__V(intoElement, ScalaJS.as.T(ins["innerHTML"]), this.loadElementInto$default$3__T());
  ins["parentNode"]["removeChild"](ins)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.$$js$exported$meth$main__O = (function() {
  this.main__V()
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.$$js$exported$meth$load__T__T__O = (function(content, into) {
  this.load__T__T__V(content, into)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.$$js$exported$meth$moveInto__T__T__O = (function(from, into) {
  this.moveInto__T__T__V(from, into)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.init___ = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "main", ScalaJS.g["document"]["body"]);
  ScalaJS.n.Lorg_denigma_binding_frontend_FrontEnd = this;
  ScalaJS.i.sjs_js_JSApp$class__$init$__sjs_js_JSApp__V(this);
  this.tags$5 = this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$1().init___());
  this.strings$5 = this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anon$2().init___());
  this.sidebarParams$5 = {
    "exclusive": false
  };
  ScalaJS.m.Lorg_denigma_views_package().register__T__F2__Lorg_denigma_views_package$("menu", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$1().init___()).register__T__F2__Lorg_denigma_views_package$("ArticleView", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$2().init___()).register__T__F2__Lorg_denigma_views_package$("sidebar", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$3().init___()).register__T__F2__Lorg_denigma_views_package$("random", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$4().init___()).register__T__F2__Lorg_denigma_views_package$("lists", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$5().init___()).register__T__F2__Lorg_denigma_views_package$("SlideView", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$6().init___()).register__T__F2__Lorg_denigma_views_package$("BindSlide", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$7().init___()).register__T__F2__Lorg_denigma_views_package$("CodeView", new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$$anonfun$8().init___());
  return this
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype["main"] = (function() {
  return this.$$js$exported$meth$main__O()
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype["load"] = (function(arg$1, arg$2) {
  arg$1 = ScalaJS.as.T(arg$1);
  arg$2 = ScalaJS.as.T(arg$2);
  return this.$$js$exported$meth$load__T__T__O(arg$1, arg$2)
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype["moveInto"] = (function(arg$1, arg$2) {
  arg$1 = ScalaJS.as.T(arg$1);
  arg$2 = ScalaJS.as.T(arg$2);
  return this.$$js$exported$meth$moveInto__T__T__O(arg$1, arg$2)
});
ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_FrontEnd$)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_FrontEnd$ = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_FrontEnd$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.FrontEnd$")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_FrontEnd$)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_FrontEnd$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_FrontEnd$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.FrontEnd$;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$ = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_FrontEnd$: 0
}, false, "org.denigma.binding.frontend.FrontEnd$", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_FrontEnd$: 1,
  sjs_js_JSApp: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_FrontEnd$;
ScalaJS.n.Lorg_denigma_binding_frontend_FrontEnd = undefined;
ScalaJS.m.Lorg_denigma_binding_frontend_FrontEnd = (function() {
  if ((!ScalaJS.n.Lorg_denigma_binding_frontend_FrontEnd)) {
    ScalaJS.n.Lorg_denigma_binding_frontend_FrontEnd = new ScalaJS.c.Lorg_denigma_binding_frontend_FrontEnd$().init___()
  };
  return ScalaJS.n.Lorg_denigma_binding_frontend_FrontEnd
});
ScalaJS.e["FrontEnd"] = ScalaJS.m.Lorg_denigma_binding_frontend_FrontEnd;
ScalaJS.e["org"] = (ScalaJS.e["org"] || {});
ScalaJS.e["org"]["denigma"] = (ScalaJS.e["org"]["denigma"] || {});
ScalaJS.e["org"]["denigma"]["binding"] = (ScalaJS.e["org"]["denigma"]["binding"] || {});
ScalaJS.e["org"]["denigma"]["binding"]["frontend"] = (ScalaJS.e["org"]["denigma"]["binding"]["frontend"] || {});
ScalaJS.e["org"]["denigma"]["binding"]["frontend"]["FrontEnd"] = ScalaJS.m.Lorg_denigma_binding_frontend_FrontEnd;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.logo$5 = null
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_SidebarView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$1().init___Lorg_denigma_binding_frontend_SidebarView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$2().init___Lorg_denigma_binding_frontend_SidebarView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$3().init___Lorg_denigma_binding_frontend_SidebarView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anon$4().init___Lorg_denigma_binding_frontend_SidebarView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.logo__Lrx_core_Var = (function() {
  return this.logo$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "sidebar", element);
  this.logo$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return ""
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().get__T__T__I__sc_Seq__Z__s_concurrent_Future(ScalaJS.m.Lorg_denigma_extensions_sq().withHost__T__T("/logo/sidebar"), ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().get$default$2__T(), ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().get$default$3__I(), ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().get$default$4__sc_Seq(), ScalaJS.m.Lorg_scalajs_dom_extensions_Ajax().get$default$5__Z()).foreach__F1__s_concurrent_ExecutionContext__V(new ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView$$anonfun$2().init___Lorg_denigma_binding_frontend_SidebarView(this), ScalaJS.m.sjs_concurrent_JSExecutionContext$Implicits().queue__s_concurrent_ExecutionContext());
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_SidebarView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_SidebarView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_SidebarView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.SidebarView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_SidebarView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_SidebarView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_SidebarView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.SidebarView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_SidebarView: 0
}, false, "org.denigma.binding.frontend.SidebarView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_SidebarView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_SidebarView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_SidebarView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.html$undcode$5 = null;
  this.scala$undcode$5 = null
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_BindSlide.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$1().init___Lorg_denigma_binding_frontend_slides_BindSlide(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$2().init___Lorg_denigma_binding_frontend_slides_BindSlide(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$3().init___Lorg_denigma_binding_frontend_slides_BindSlide(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide$$anon$4().init___Lorg_denigma_binding_frontend_slides_BindSlide(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  ScalaJS.c.Lorg_denigma_views_BindingView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V.call(this, el)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.html$undcode__Lrx_core_Var = (function() {
  return this.html$undcode$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.scala$undcode__Lrx_core_Var = (function() {
  return this.scala$undcode$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "slide", element);
  this.html$undcode$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T("\n      |<section class=\"ui\" data-view=\"random\">\n      |\n      |    <section data-html=\"counting\"></section>\n      |    <h1 class=\"ui purple large header\" data-bind=\"bar\"></h1>\n      |\n      |    <div class=\"ui two column grid\">\n      |        <section class=\"row\">\n      |            <div class=\"column\">\n      |                <input class=\"ui input\" data-bind=\"foo\">\n      |                <textarea class=\"ui textarea\" data-bind=\"foo\"></textarea>\n      |            </div>\n      |            <div class=\"column\">\n      |                <textarea class=\"ui textarea\" data-bind=\"bar\"></textarea>\n      |                <input class=\"ui input\"  data-bind=\"bar\">\n      |            </div>\n      |\n      |        </section>\n      |\n      |\n      |\n      |    </div>\n      |\n      |    <h1 class=\"ui teal large header\" data-bind=\"foo\"></h1>\n      |\n      |\n      |</section>\n    ")).stripMargin__T()
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.scala$undcode$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return new ScalaJS.c.sci_StringOps().init___T(ScalaJS.m.s_Predef().augmentString__T__T("\n      |/**\n      | * For test purposes only\n      | */\n      |class RandomView(el:HTMLElement, params:Map[String,Any]) extends OrdinaryView(\"random\",el){\n      |\n      |  val counting: Var[HtmlTag] = Var{\n      |    div(`class`:=\"ui segment\",\n      |      h1(\"This is title\"),\n      |      p(\"value that changes: \\\"START\\\"\")\n      |    )\n      |  }\n      |\n      |  val foo= Var{\"Foo variable text\"}\n      |  val bar = Var{\"Bar variable text\"}\n      |\n      |\n      |  val list = List(\"ONE\",\"TWO\",\"THREE\",\"FOUR\",\"SOME TEXT\",\"THAT IS RANDOM\")\n      |\n      |  def update():Unit ={\n      |    val value =  div(`class`:=\"ui segment\",\n      |      h1(\"This is title\"),\n      |      p(s\"value that changes: \\\"${list(Random.nextInt(list.length))}\\\"\")\n      |    )\n      |    counting() = value\n      |\n      |  }\n      |\n      |\n      |  dom.setInterval(update _, 100)\n      |\n      |  /** Computes the square of an integer.\n      |    *  This demonstrates unit testing.\n      |    */\n      |  def square(x: Int): Int = x*x\n      |\n      |  lazy val tags: Map[String, Rx[HtmlTag]] = this.extractTagRx(this)\n      |\n      |  //val doubles: Map[String, Rx[Double]] = this.extractDoubles[this.type]\n      |\n      |  lazy val strings: Map[String, Rx[String]] = this.extractStringRx(this)\n      |\n      |  lazy val bools: Map[String, Rx[Boolean]] = this.extractBooleanRx(this)\n      |\n      |  //override def textEvents:Map[String, rx.Var[TextEvent]] = this.extractTextEvents(this)\n      |\n      |  override def mouseEvents: Map[String, rx.Var[MouseEvent]] = this.extractMouseEvens(this)\n      |}\n      |\n    ")).stripMargin__T()
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_BindSlide = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_BindSlide(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.BindSlide")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_BindSlide)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_BindSlide(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.BindSlide;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_BindSlide: 0
}, false, "org.denigma.binding.frontend.slides.BindSlide", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_slides_BindSlide: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_BindSlide.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_BindSlide;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_slides_SlideView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$1().init___Lorg_denigma_binding_frontend_slides_SlideView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$2().init___Lorg_denigma_binding_frontend_slides_SlideView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$3().init___Lorg_denigma_binding_frontend_slides_SlideView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView$$anon$4().init___Lorg_denigma_binding_frontend_slides_SlideView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  ScalaJS.c.Lorg_denigma_views_BindingView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V.call(this, el)
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "slide", element);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_slides_SlideView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_slides_SlideView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_slides_SlideView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.slides.SlideView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_slides_SlideView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_slides_SlideView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_slides_SlideView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.slides.SlideView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_slides_SlideView: 0
}, false, "org.denigma.binding.frontend.slides.SlideView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_slides_SlideView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_slides_SlideView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_slides_SlideView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.counting$5 = null;
  this.foo$5 = null;
  this.bar$5 = null;
  this.list$5 = null;
  this.tags$5 = null;
  this.strings$5 = null;
  this.bools$5 = null;
  this.bitmap$0$5 = 0
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_RandomView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.tags$lzycompute__p5__sci_Map = (function() {
  if (((this.bitmap$0$5 & 1) === 0)) {
    this.tags$5 = this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$1().init___Lorg_denigma_binding_frontend_tests_RandomView(this));
    this.bitmap$0$5 = (this.bitmap$0$5 | 1)
  };
  return this.tags$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.strings$lzycompute__p5__sci_Map = (function() {
  if (((this.bitmap$0$5 & 2) === 0)) {
    this.strings$5 = this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$2().init___Lorg_denigma_binding_frontend_tests_RandomView(this));
    this.bitmap$0$5 = (this.bitmap$0$5 | 2)
  };
  return this.strings$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.bools$lzycompute__p5__sci_Map = (function() {
  if (((this.bitmap$0$5 & 4) === 0)) {
    this.bools$5 = this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$3().init___Lorg_denigma_binding_frontend_tests_RandomView(this));
    this.bitmap$0$5 = (this.bitmap$0$5 | 4)
  };
  return this.bools$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.counting__Lrx_core_Var = (function() {
  return this.counting$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.foo__Lrx_core_Var = (function() {
  return this.foo$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.bar__Lrx_core_Var = (function() {
  return this.bar$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.list__sci_List = (function() {
  return this.list$5
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.update__V = (function() {
  var value = ScalaJS.m.Lscalatags_all().div__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_all().$class__Lscalatags_UntypedAttr().$$colon$eq__T__Lscalatags_AttrPair("ui segment"), ScalaJS.m.Lscalatags_all().h1__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_package().stringNode__T__Lscalatags_StringNode("This is title")]), 1))), ScalaJS.m.Lscalatags_all().p__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_package().stringNode__T__Lscalatags_StringNode(new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["value that changes: \"", "\" "]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.list__sci_List().apply__I__O(ScalaJS.m.s_util_Random().nextInt__I__I(this.list__sci_List().length__I()))]))))]), 1)))]), 1)));
  this.counting__Lrx_core_Var().update__F0__Lrx_core_Propagator__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(value$1) {
    return (function() {
      return value$1
    })
  })(value)), ScalaJS.m.Lrx_core_Propagator$Immediate())
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.tags__sci_Map = (function() {
  if (((this.bitmap$0$5 & 1) === 0)) {
    return this.tags$lzycompute__p5__sci_Map()
  } else {
    return this.tags$5
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.strings__sci_Map = (function() {
  if (((this.bitmap$0$5 & 2) === 0)) {
    return this.strings$lzycompute__p5__sci_Map()
  } else {
    return this.strings$5
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.bools__sci_Map = (function() {
  if (((this.bitmap$0$5 & 4) === 0)) {
    return this.bools$lzycompute__p5__sci_Map()
  } else {
    return this.bools$5
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView$$anon$4().init___Lorg_denigma_binding_frontend_tests_RandomView(this))
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(el, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "random", el);
  this.counting$5 = ScalaJS.m.Lrx_core_Var().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return ScalaJS.m.Lscalatags_all().div__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_all().$class__Lscalatags_UntypedAttr().$$colon$eq__T__Lscalatags_AttrPair("ui segment"), ScalaJS.m.Lscalatags_all().h1__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_package().stringNode__T__Lscalatags_StringNode("This is title")]), 1))), ScalaJS.m.Lscalatags_all().p__Lscalatags_TypedHtmlTag().apply__sc_Seq__Lscalatags_TypedHtmlTag(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.Lscalatags_Modifier.getArrayOf(), [ScalaJS.m.Lscalatags_package().stringNode__T__Lscalatags_StringNode("value that changes: \"START\" ")]), 1)))]), 1)))
    })
  })()), ScalaJS.m.Lrx_core_Var().apply$default$2__T());
  this.foo$5 = ScalaJS.m.Lrx_core_Var().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "Foo variable text"
    })
  })()), ScalaJS.m.Lrx_core_Var().apply$default$2__T());
  this.bar$5 = ScalaJS.m.Lrx_core_Var().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "Bar variable text"
    })
  })()), ScalaJS.m.Lrx_core_Var().apply$default$2__T());
  this.list$5 = ScalaJS.m.sci_List().apply__sc_Seq__sci_List(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["ONE", "TWO", "THREE", "FOUR", "SOME TEXT", "THAT IS RANDOM"]), 1)));
  ScalaJS.uD(ScalaJS.g["setInterval"]((function(arg$outer) {
    return (function() {
      arg$outer.update__V()
    })
  })(this), 100));
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_RandomView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_RandomView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_RandomView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.RandomView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_RandomView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_RandomView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_RandomView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.RandomView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_RandomView: 0
}, false, "org.denigma.binding.frontend.tests.RandomView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_binding_frontend_tests_RandomView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_RandomView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_RandomView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_BindingView$JustView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this)
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_BindingView$JustView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_BindingView$JustView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_BindingView$JustView.prototype = ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype;
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$1().init___Lorg_denigma_views_BindingView$JustView(this))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$2().init___Lorg_denigma_views_BindingView$JustView(this))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$3().init___Lorg_denigma_views_BindingView$JustView(this))
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_BindingView$JustView$$anon$4().init___Lorg_denigma_views_BindingView$JustView(this))
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_BindingView$JustView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_BindingView$JustView)))
});
ScalaJS.as.Lorg_denigma_views_BindingView$JustView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_BindingView$JustView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.BindingView$JustView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_BindingView$JustView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_BindingView$JustView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_BindingView$JustView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.BindingView$JustView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_BindingView$JustView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_BindingView$JustView: 0
}, false, "org.denigma.views.BindingView$JustView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_views_BindingView$JustView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_BindingView$JustView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_BindingView$JustView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_CodeMirrorView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.code$5 = null;
  this.mode$5 = null
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_CodeMirrorView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_CodeMirrorView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_CodeMirrorView.prototype = ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype;
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$1().init___Lorg_denigma_views_CodeMirrorView(this))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$2().init___Lorg_denigma_views_CodeMirrorView(this))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$3().init___Lorg_denigma_views_CodeMirrorView(this))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_CodeMirrorView$$anon$4().init___Lorg_denigma_views_CodeMirrorView(this))
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.code__Lrx_core_Var = (function() {
  return this.code$5
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.mode__T = (function() {
  return this.mode$5
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  ScalaJS.c.Lorg_denigma_views_BindingView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V.call(this, el);
  var x1 = el;
  matchEnd4: {
    if ((x1 instanceof ScalaJS.g["HTMLTextAreaElement"])) {
      var x2 = x1;
      var params = {
        "mode": this.mode__T(),
        "lineNumbers": true,
        "value": this.code__Lrx_core_Var().apply__O()
      };
      var m = ScalaJS.g["CodeMirror"]["fromTextArea"](x2, params);
      ScalaJS.m.Lrx_package().Rx__Lrx_core_Rx$().apply__F0__Lrx_core_Rx(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function(arg$outer, m$1) {
        return (function() {
          m$1["getDoc"]()["setValue"](ScalaJS.as.T(arg$outer.code__Lrx_core_Var().apply__O()))
        })
      })(this, m)));
      ScalaJS.g["console"]["log"]("code mirror has started!");
      break matchEnd4
    };
    ScalaJS.g["console"]["log"]("it is not a text area!");
    break matchEnd4
  }
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, "CodeView", element);
  this.code$5 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return ""
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.mode$5 = ScalaJS.as.T(params.get__O__s_Option("mode").fold__F0__F1__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "htmlmixed"
    })
  })()), new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x$1$2) {
      var x$1 = ScalaJS.as.O(x$1$2);
      return ScalaJS.objectToString(x$1)
    })
  })())));
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_CodeMirrorView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_CodeMirrorView)))
});
ScalaJS.as.Lorg_denigma_views_CodeMirrorView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_CodeMirrorView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.CodeMirrorView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_CodeMirrorView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_CodeMirrorView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_CodeMirrorView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.CodeMirrorView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_CodeMirrorView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_CodeMirrorView: 0
}, false, "org.denigma.views.CodeMirrorView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_views_CodeMirrorView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_CodeMirrorView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_CodeMirrorView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.org$denigma$views$ListView$$element$f = null;
  this.params$5 = null;
  this.key$5 = null;
  this.disp$5 = null;
  this.template$5 = null
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_views_ListView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView.prototype = ScalaJS.c.Lorg_denigma_views_ListView.prototype;
ScalaJS.c.Lorg_denigma_views_ListView.prototype.extractListRx__O__Lorg_denigma_binding_macroses_ListRxMap__sci_Map = (function(t, evidence$1) {
  return ScalaJS.i.Lorg_denigma_binding_CollectionBinding$class__extractListRx__Lorg_denigma_binding_CollectionBinding__O__Lorg_denigma_binding_macroses_ListRxMap__sci_Map(this, t, evidence$1)
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.key__T = (function() {
  return this.key$5
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.template__Lorg_scalajs_dom_HTMLElement = (function() {
  return this.template$5
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.extractTemplate__Lorg_scalajs_dom_HTMLElement = (function() {
  return ScalaJS.m.Lorg_scalajs_dom_extensions_package().PimpedNodeList__Lorg_scalajs_dom_NodeList__Lorg_scalajs_dom_extensions_package$PimpedNodeList(this.org$denigma$views$ListView$$element$f["childNodes"]).collectFirst__s_PartialFunction__s_Option(new ScalaJS.c.Lorg_denigma_views_ListView$$anonfun$extractTemplate$1().init___Lorg_denigma_views_ListView(this)).getOrElse__F0__O(new ScalaJS.c.Lorg_denigma_views_ListView$$anonfun$extractTemplate$2().init___Lorg_denigma_views_ListView(this))
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.newItem__sci_Map__Lorg_denigma_views_MapView = (function(mp) {
  var el = this.template__Lorg_scalajs_dom_HTMLElement()["cloneNode"](true);
  var x1 = ScalaJS.m.Lorg_scalajs_dom_extensions_package().Attributes__Lorg_scalajs_dom_NamedNodeMap__Lorg_scalajs_dom_extensions_package$Attributes(el["attributes"]).get__T__s_Option("item-view");
  matchEnd5: {
    if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1)) {
      var view = ScalaJS.m.Lorg_denigma_views_ListView().apply__Lorg_scalajs_dom_HTMLElement__sci_Map__Lorg_denigma_views_MapView(el, mp);
      break matchEnd5
    };
    if (ScalaJS.is.s_Some(x1)) {
      var x2 = ScalaJS.as.s_Some(x1);
      var v = x2.x__O();
      var x1$2 = this.inject__T__Lorg_scalajs_dom_HTMLElement__sci_Map__Lorg_denigma_views_BindingView(ScalaJS.as.T(v["value"]), el, mp);
      if (ScalaJS.is.Lorg_denigma_views_MapView(x1$2)) {
        var x2$2 = ScalaJS.as.Lorg_denigma_views_MapView(x1$2);
        var view = x2$2;
        break matchEnd5
      };
      ScalaJS.g["console"]["error"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["view ", " exists but does not inherit MapView"]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [ScalaJS.as.T(v["value"])]))));
      var view = ScalaJS.m.Lorg_denigma_views_ListView().apply__Lorg_scalajs_dom_HTMLElement__sci_Map__Lorg_denigma_views_MapView(el, mp);
      break matchEnd5
    };
    throw new ScalaJS.c.s_MatchError().init___O(x1)
  };
  return view
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  var id = ("items_of_" + ScalaJS.as.T(this.org$denigma$views$ListView$$element$f["id"]));
  var x1 = ScalaJS.m.Lorg_denigma_extensions_sq().byId__T__s_Option(id);
  matchEnd5: {
    if (ScalaJS.is.s_Some(x1)) {
      var x2 = ScalaJS.as.s_Some(x1);
      var el$2 = x2.x__O();
      var span = el$2;
      break matchEnd5
    };
    if (ScalaJS.anyRefEqEq(ScalaJS.m.s_None(), x1)) {
      var sp = ScalaJS.g["document"]["createElement"]("span");
      sp["id"] = id;
      if ((this.template__Lorg_scalajs_dom_HTMLElement() === this.org$denigma$views$ListView$$element$f)) {
        this.org$denigma$views$ListView$$element$f["appendChild"](sp)
      } else {
        this.org$denigma$views$ListView$$element$f["replaceChild"](sp, this.template__Lorg_scalajs_dom_HTMLElement())
      };
      var span = sp;
      break matchEnd5
    };
    throw new ScalaJS.c.s_MatchError().init___O(x1)
  };
  if ((!this.lists__sci_Map().contains__O__Z(this.key__T()))) {
    throw ScalaJS.unwrapJavaScriptException(new ScalaJS.c.jl_Exception().init___T(new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["not items with key == ", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.key__T()])))))
  };
  var items = ScalaJS.as.sci_List(ScalaJS.as.sc_TraversableLike(ScalaJS.as.Lrx_core_Rx(this.lists__sci_Map().apply__O__O(this.key__T())).now__O()).map__F1__scg_CanBuildFrom__O(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer) {
    return (function(mp$2) {
      var mp = ScalaJS.as.sci_Map(mp$2);
      return arg$outer.newItem__sci_Map__Lorg_denigma_views_MapView(mp)
    })
  })(this)), ScalaJS.m.sci_List().canBuildFrom__scg_CanBuildFrom()));
  items.foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, span$1) {
    return (function(i$2) {
      var i = ScalaJS.as.Lorg_denigma_views_MapView(i$2);
      arg$outer.addView__Lorg_denigma_views_BindingView__V(i);
      arg$outer.org$denigma$views$ListView$$element$f["insertBefore"](i.viewElement__Lorg_scalajs_dom_HTMLElement(), span$1);
      i.bindView__Lorg_scalajs_dom_HTMLElement__V(i.viewElement__Lorg_scalajs_dom_HTMLElement())
    })
  })(this, span)));
  ScalaJS.as.sc_IterableLike(ScalaJS.m.Lorg_scalajs_dom_extensions_package().PimpedHtmlCollection__Lorg_scalajs_dom_HTMLCollection__Lorg_scalajs_dom_extensions_package$PimpedHtmlCollection(this.org$denigma$views$ListView$$element$f["children"]).collect__s_PartialFunction__scg_CanBuildFrom__O(new ScalaJS.c.Lorg_denigma_views_ListView$$anonfun$bindView$1().init___Lorg_denigma_views_ListView(this), ScalaJS.m.sc_Seq().canBuildFrom__scg_CanBuildFrom())).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer) {
    return (function(el$2) {
      var el = el$2;
      arg$outer.bind__Lorg_scalajs_dom_HTMLElement__V(el)
    })
  })(this)))
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.init___T__Lorg_scalajs_dom_HTMLElement__sci_Map = (function(name, element, params) {
  this.org$denigma$views$ListView$$element$f = element;
  this.params$5 = params;
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, name, element);
  ScalaJS.i.Lorg_denigma_binding_CollectionBinding$class__$init$__Lorg_denigma_binding_CollectionBinding__V(this);
  this.key$5 = ScalaJS.objectToString(params.get__O__s_Option("items").getOrElse__F0__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "items"
    })
  })())));
  this.disp$5 = ScalaJS.as.T(element["style"]["display"]);
  this.template$5 = this.extractTemplate__Lorg_scalajs_dom_HTMLElement();
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView)))
});
ScalaJS.as.Lorg_denigma_views_ListView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView: 0
}, false, "org.denigma.views.ListView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_views_ListView: 1,
  Lorg_denigma_binding_CollectionBinding: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_MapView = (function() {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.call(this);
  this.reactiveMap$5 = null
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype = new ScalaJS.h.Lorg_denigma_views_OrdinaryView();
ScalaJS.c.Lorg_denigma_views_MapView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_MapView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_MapView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_MapView.prototype = ScalaJS.c.Lorg_denigma_views_MapView.prototype;
ScalaJS.c.Lorg_denigma_views_MapView.prototype.reactiveMap__sci_Map = (function() {
  return this.reactiveMap$5
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.bindProperties__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function(el, ats) {
  ats.withFilter__F1__scg_FilterMonadic(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(check$ifrefutable$1$2) {
      var check$ifrefutable$1 = ScalaJS.as.T2(check$ifrefutable$1$2);
      var x1 = check$ifrefutable$1;
      if ((x1 !== null)) {
        return true
      };
      return false
    })
  })())).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$1) {
    return (function(x$1$2) {
      var x$1 = ScalaJS.as.T2(x$1$2);
      var x1 = x$1;
      matchEnd3: {
        if ((x1 !== null)) {
          var key = ScalaJS.as.T(x1.$$und1__O());
          var value = ScalaJS.as.T(x1.$$und2__O());
          ScalaJS.asUnit(arg$outer.visibilityPartial__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction(el$1, value).orElse__s_PartialFunction__s_PartialFunction(arg$outer.classPartial__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction(el$1, value)).orElse__s_PartialFunction__s_PartialFunction(arg$outer.itemPartial__Lorg_scalajs_dom_HTMLElement__T__T__s_PartialFunction(el$1, key.toString(), value)).orElse__s_PartialFunction__s_PartialFunction(arg$outer.propertyPartial__Lorg_scalajs_dom_HTMLElement__T__T__s_PartialFunction(el$1, key.toString(), value)).orElse__s_PartialFunction__s_PartialFunction(arg$outer.loadIntoPartial__Lorg_scalajs_dom_HTMLElement__T__s_PartialFunction(el$1, value)).orElse__s_PartialFunction__s_PartialFunction(arg$outer.otherPartial__s_PartialFunction()).apply__O__O(key.toString()));
          break matchEnd3
        };
        throw new ScalaJS.c.s_MatchError().init___O(x1)
      }
    })
  })(this, el)))
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.itemPartial__Lorg_scalajs_dom_HTMLElement__T__T__s_PartialFunction = (function(el, key, value) {
  return new ScalaJS.c.Lorg_denigma_views_MapView$$anonfun$itemPartial$1().init___Lorg_denigma_views_MapView__Lorg_scalajs_dom_HTMLElement__T__T(this, el, key, value)
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.bindAttributes__Lorg_scalajs_dom_HTMLElement__sci_Map__V = (function(el, ats) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.bindAttributes__Lorg_scalajs_dom_HTMLElement__sci_Map__V.call(this, el, ats)
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.bindItemProperty__Lorg_scalajs_dom_HTMLElement__T__T__V = (function(el, key, att) {
  var x1 = new ScalaJS.c.T2().init___O__O(ScalaJS.i.sjsr_RuntimeString$class__replace__sjsr_RuntimeString__jl_CharSequence__jl_CharSequence__T(key.toString(), "item-", ""), ScalaJS.i.sjsr_RuntimeString$class__toLowerCase__sjsr_RuntimeString__T(ScalaJS.as.T(el["tagName"])).toString());
  matchEnd13: {
    if ((x1 !== null)) {
      var p2 = ScalaJS.as.T(x1.$$und1__O());
      var p3 = ScalaJS.as.T(x1.$$und2__O());
      if (ScalaJS.anyRefEqEq("bind", p2)) {
        if (ScalaJS.anyRefEqEq("input", p3)) {
          var x1$2 = ScalaJS.m.Lorg_scalajs_dom_extensions_package().Attributes__Lorg_scalajs_dom_NamedNodeMap__Lorg_scalajs_dom_extensions_package$Attributes(el["attributes"]).get__T__s_Option("type").map__F1__s_Option(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
            return (function(x$2$2) {
              var x$2 = x$2$2;
              return ScalaJS.as.T(x$2["value"]).toString()
            })
          })()));
          if (ScalaJS.is.s_Some(x1$2)) {
            var x3 = ScalaJS.as.s_Some(x1$2);
            var p2$2 = ScalaJS.as.T(x3.x__O());
            if (ScalaJS.anyRefEqEq("checkbox", p2$2)) {
              break matchEnd13
            }
          };
          this.reactiveMap__sci_Map().get__O__s_Option(att).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$3, key$2) {
            return (function(str$2) {
              var str = ScalaJS.as.Lrx_core_Var(str$2);
              el$3["onkeyup"] = (function(f) {
                return (function(arg1) {
                  return f.apply__O__O(arg1)
                })
              })(arg$outer.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el$3, str, "value"));
              arg$outer.bindInput__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el$3, key$2, str)
            })
          })(this, el, key)));
          break matchEnd13
        }
      }
    };
    if ((x1 !== null)) {
      var p4 = ScalaJS.as.T(x1.$$und1__O());
      var p5 = ScalaJS.as.T(x1.$$und2__O());
      if (ScalaJS.anyRefEqEq("bind", p4)) {
        if (ScalaJS.anyRefEqEq("textarea", p5)) {
          this.reactiveMap__sci_Map().get__O__s_Option(att).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$3, key$2) {
            return (function(str$2) {
              var str = ScalaJS.as.Lrx_core_Var(str$2);
              el$3["onkeyup"] = (function(f) {
                return (function(arg1) {
                  return f.apply__O__O(arg1)
                })
              })(arg$outer.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el$3, str, "value"));
              arg$outer.bindText__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el$3, key$2, str)
            })
          })(this, el, key)));
          break matchEnd13
        }
      }
    };
    if ((x1 !== null)) {
      var p6 = ScalaJS.as.T(x1.$$und1__O());
      if (ScalaJS.anyRefEqEq("bind", p6)) {
        this.reactiveMap__sci_Map().get__O__s_Option(att).foreach__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(arg$outer, el$3, key$2) {
          return (function(str$2) {
            var str = ScalaJS.as.Lrx_core_Var(str$2);
            el$3["onkeyup"] = (function(f) {
              return (function(arg1) {
                return f.apply__O__O(arg1)
              })
            })(arg$outer.makePropHandler__Lorg_scalajs_dom_HTMLElement__Lrx_core_Rx__T__F1(el$3, str, "value"));
            arg$outer.bindText__Lorg_scalajs_dom_HTMLElement__T__Lrx_core_Rx__V(el$3, key$2, str)
          })
        })(this, el, key)));
        break matchEnd13
      }
    };
    ScalaJS.g["console"]["error"](new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["unknown binding"]), 1))).s__sc_Seq__T(ScalaJS.m.sci_Nil()));
    break matchEnd13
  }
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.init___T__Lorg_scalajs_dom_HTMLElement__sci_Map = (function(name, element, props) {
  ScalaJS.c.Lorg_denigma_views_OrdinaryView.prototype.init___T__Lorg_scalajs_dom_HTMLElement.call(this, name, element);
  this.reactiveMap$5 = ScalaJS.as.sci_Map(props.map__F1__scg_CanBuildFrom__O(new ScalaJS.c.Lorg_denigma_views_MapView$$anonfun$1().init___Lorg_denigma_views_MapView(this), ScalaJS.m.sci_Map().canBuildFrom__scg_CanBuildFrom()));
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_MapView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_MapView)))
});
ScalaJS.as.Lorg_denigma_views_MapView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_MapView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.MapView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_MapView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_MapView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_MapView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_MapView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.MapView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_MapView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_MapView: 0
}, false, "org.denigma.views.MapView", ScalaJS.d.Lorg_denigma_views_OrdinaryView, {
  Lorg_denigma_views_MapView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_MapView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_MapView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.jl_NumberFormatException = (function() {
  ScalaJS.c.jl_IllegalArgumentException.call(this)
});
ScalaJS.c.jl_NumberFormatException.prototype = new ScalaJS.h.jl_IllegalArgumentException();
ScalaJS.c.jl_NumberFormatException.prototype.constructor = ScalaJS.c.jl_NumberFormatException;
/** @constructor */
ScalaJS.h.jl_NumberFormatException = (function() {
  /*<skip>*/
});
ScalaJS.h.jl_NumberFormatException.prototype = ScalaJS.c.jl_NumberFormatException.prototype;
/*<skip>*/;
ScalaJS.is.jl_NumberFormatException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.jl_NumberFormatException)))
});
ScalaJS.as.jl_NumberFormatException = (function(obj) {
  if ((ScalaJS.is.jl_NumberFormatException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.lang.NumberFormatException")
  }
});
ScalaJS.isArrayOf.jl_NumberFormatException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.jl_NumberFormatException)))
});
ScalaJS.asArrayOf.jl_NumberFormatException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.jl_NumberFormatException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.lang.NumberFormatException;", depth)
  }
});
ScalaJS.d.jl_NumberFormatException = new ScalaJS.ClassTypeData({
  jl_NumberFormatException: 0
}, false, "java.lang.NumberFormatException", ScalaJS.d.jl_IllegalArgumentException, {
  jl_NumberFormatException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.jl_NumberFormatException.prototype.$classData = ScalaJS.d.jl_NumberFormatException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_FormatterClosedException = (function() {
  ScalaJS.c.jl_IllegalStateException.call(this)
});
ScalaJS.c.ju_FormatterClosedException.prototype = new ScalaJS.h.jl_IllegalStateException();
ScalaJS.c.ju_FormatterClosedException.prototype.constructor = ScalaJS.c.ju_FormatterClosedException;
/** @constructor */
ScalaJS.h.ju_FormatterClosedException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_FormatterClosedException.prototype = ScalaJS.c.ju_FormatterClosedException.prototype;
/*<skip>*/;
ScalaJS.is.ju_FormatterClosedException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_FormatterClosedException)))
});
ScalaJS.as.ju_FormatterClosedException = (function(obj) {
  if ((ScalaJS.is.ju_FormatterClosedException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.FormatterClosedException")
  }
});
ScalaJS.isArrayOf.ju_FormatterClosedException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_FormatterClosedException)))
});
ScalaJS.asArrayOf.ju_FormatterClosedException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_FormatterClosedException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.FormatterClosedException;", depth)
  }
});
ScalaJS.d.ju_FormatterClosedException = new ScalaJS.ClassTypeData({
  ju_FormatterClosedException: 0
}, false, "java.util.FormatterClosedException", ScalaJS.d.jl_IllegalStateException, {
  ju_FormatterClosedException: 1,
  jl_IllegalStateException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_FormatterClosedException.prototype.$classData = ScalaJS.d.ju_FormatterClosedException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_IllegalFormatException = (function() {
  ScalaJS.c.jl_IllegalArgumentException.call(this)
});
ScalaJS.c.ju_IllegalFormatException.prototype = new ScalaJS.h.jl_IllegalArgumentException();
ScalaJS.c.ju_IllegalFormatException.prototype.constructor = ScalaJS.c.ju_IllegalFormatException;
/** @constructor */
ScalaJS.h.ju_IllegalFormatException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_IllegalFormatException.prototype = ScalaJS.c.ju_IllegalFormatException.prototype;
/*<skip>*/;
ScalaJS.is.ju_IllegalFormatException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_IllegalFormatException)))
});
ScalaJS.as.ju_IllegalFormatException = (function(obj) {
  if ((ScalaJS.is.ju_IllegalFormatException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.IllegalFormatException")
  }
});
ScalaJS.isArrayOf.ju_IllegalFormatException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_IllegalFormatException)))
});
ScalaJS.asArrayOf.ju_IllegalFormatException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_IllegalFormatException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.IllegalFormatException;", depth)
  }
});
ScalaJS.d.ju_IllegalFormatException = new ScalaJS.ClassTypeData({
  ju_IllegalFormatException: 0
}, false, "java.util.IllegalFormatException", ScalaJS.d.jl_IllegalArgumentException, {
  ju_IllegalFormatException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_IllegalFormatException.prototype.$classData = ScalaJS.d.ju_IllegalFormatException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.s_StringContext$InvalidEscapeException = (function() {
  ScalaJS.c.jl_IllegalArgumentException.call(this)
});
ScalaJS.c.s_StringContext$InvalidEscapeException.prototype = new ScalaJS.h.jl_IllegalArgumentException();
ScalaJS.c.s_StringContext$InvalidEscapeException.prototype.constructor = ScalaJS.c.s_StringContext$InvalidEscapeException;
/** @constructor */
ScalaJS.h.s_StringContext$InvalidEscapeException = (function() {
  /*<skip>*/
});
ScalaJS.h.s_StringContext$InvalidEscapeException.prototype = ScalaJS.c.s_StringContext$InvalidEscapeException.prototype;
ScalaJS.c.s_StringContext$InvalidEscapeException.prototype.init___T__I = (function(str, idx) {
  ScalaJS.c.jl_IllegalArgumentException.prototype.init___T.call(this, (((("invalid escape character at index " + idx) + " in \"") + str) + "\""));
  return this
});
/*<skip>*/;
ScalaJS.is.s_StringContext$InvalidEscapeException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_StringContext$InvalidEscapeException)))
});
ScalaJS.as.s_StringContext$InvalidEscapeException = (function(obj) {
  if ((ScalaJS.is.s_StringContext$InvalidEscapeException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.StringContext$InvalidEscapeException")
  }
});
ScalaJS.isArrayOf.s_StringContext$InvalidEscapeException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_StringContext$InvalidEscapeException)))
});
ScalaJS.asArrayOf.s_StringContext$InvalidEscapeException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_StringContext$InvalidEscapeException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.StringContext$InvalidEscapeException;", depth)
  }
});
ScalaJS.d.s_StringContext$InvalidEscapeException = new ScalaJS.ClassTypeData({
  s_StringContext$InvalidEscapeException: 0
}, false, "scala.StringContext$InvalidEscapeException", ScalaJS.d.jl_IllegalArgumentException, {
  s_StringContext$InvalidEscapeException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.s_StringContext$InvalidEscapeException.prototype.$classData = ScalaJS.d.s_StringContext$InvalidEscapeException;
/*<skip>*/;
ScalaJS.is.s_xml_Node = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_xml_Node)))
});
ScalaJS.as.s_xml_Node = (function(obj) {
  if ((ScalaJS.is.s_xml_Node(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.xml.Node")
  }
});
ScalaJS.isArrayOf.s_xml_Node = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_xml_Node)))
});
ScalaJS.asArrayOf.s_xml_Node = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_xml_Node(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.xml.Node;", depth)
  }
});
ScalaJS.d.s_xml_Node = new ScalaJS.ClassTypeData({
  s_xml_Node: 0
}, false, "scala.xml.Node", ScalaJS.d.s_xml_NodeSeq, {
  s_xml_Node: 1,
  s_xml_NodeSeq: 1,
  s_xml_Equality: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sc_IndexedSeq$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this);
  this.ReusableCBF$5 = null;
  this.bitmap$0$5 = false
});
ScalaJS.c.sc_IndexedSeq$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sc_IndexedSeq$.prototype.constructor = ScalaJS.c.sc_IndexedSeq$;
/** @constructor */
ScalaJS.h.sc_IndexedSeq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sc_IndexedSeq$.prototype = ScalaJS.c.sc_IndexedSeq$.prototype;
ScalaJS.c.sc_IndexedSeq$.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_IndexedSeq().newBuilder__scm_Builder()
});
/*<skip>*/;
ScalaJS.is.sc_IndexedSeq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_IndexedSeq$)))
});
ScalaJS.as.sc_IndexedSeq$ = (function(obj) {
  if ((ScalaJS.is.sc_IndexedSeq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.IndexedSeq$")
  }
});
ScalaJS.isArrayOf.sc_IndexedSeq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_IndexedSeq$)))
});
ScalaJS.asArrayOf.sc_IndexedSeq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_IndexedSeq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.IndexedSeq$;", depth)
  }
});
ScalaJS.d.sc_IndexedSeq$ = new ScalaJS.ClassTypeData({
  sc_IndexedSeq$: 0
}, false, "scala.collection.IndexedSeq$", ScalaJS.d.scg_SeqFactory, {
  sc_IndexedSeq$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sc_IndexedSeq$.prototype.$classData = ScalaJS.d.sc_IndexedSeq$;
ScalaJS.n.sc_IndexedSeq = undefined;
ScalaJS.m.sc_IndexedSeq = (function() {
  if ((!ScalaJS.n.sc_IndexedSeq)) {
    ScalaJS.n.sc_IndexedSeq = new ScalaJS.c.sc_IndexedSeq$().init___()
  };
  return ScalaJS.n.sc_IndexedSeq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sc_Seq$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.sc_Seq$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sc_Seq$.prototype.constructor = ScalaJS.c.sc_Seq$;
/** @constructor */
ScalaJS.h.sc_Seq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sc_Seq$.prototype = ScalaJS.c.sc_Seq$.prototype;
ScalaJS.c.sc_Seq$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return this.ReusableCBF__scg_GenTraversableFactory$GenericCanBuildFrom()
});
ScalaJS.c.sc_Seq$.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_Seq().newBuilder__scm_Builder()
});
/*<skip>*/;
ScalaJS.is.sc_Seq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sc_Seq$)))
});
ScalaJS.as.sc_Seq$ = (function(obj) {
  if ((ScalaJS.is.sc_Seq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.Seq$")
  }
});
ScalaJS.isArrayOf.sc_Seq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sc_Seq$)))
});
ScalaJS.asArrayOf.sc_Seq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sc_Seq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.Seq$;", depth)
  }
});
ScalaJS.d.sc_Seq$ = new ScalaJS.ClassTypeData({
  sc_Seq$: 0
}, false, "scala.collection.Seq$", ScalaJS.d.scg_SeqFactory, {
  sc_Seq$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sc_Seq$.prototype.$classData = ScalaJS.d.sc_Seq$;
ScalaJS.n.sc_Seq = undefined;
ScalaJS.m.sc_Seq = (function() {
  if ((!ScalaJS.n.sc_Seq)) {
    ScalaJS.n.sc_Seq = new ScalaJS.c.sc_Seq$().init___()
  };
  return ScalaJS.n.sc_Seq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_$colon$colon = (function() {
  ScalaJS.c.sci_List.call(this);
  this.scala$collection$immutable$$colon$colon$$hd$5 = null;
  this.tl$5 = null
});
ScalaJS.c.sci_$colon$colon.prototype = new ScalaJS.h.sci_List();
ScalaJS.c.sci_$colon$colon.prototype.constructor = ScalaJS.c.sci_$colon$colon;
/** @constructor */
ScalaJS.h.sci_$colon$colon = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_$colon$colon.prototype = ScalaJS.c.sci_$colon$colon.prototype;
ScalaJS.c.sci_$colon$colon.prototype.hd$1__O = (function() {
  return this.scala$collection$immutable$$colon$colon$$hd$5
});
ScalaJS.c.sci_$colon$colon.prototype.tl$1__sci_List = (function() {
  return this.tl$5
});
ScalaJS.c.sci_$colon$colon.prototype.scala$collection$immutable$$colon$colon$$hd__O = (function() {
  return this.scala$collection$immutable$$colon$colon$$hd$5
});
ScalaJS.c.sci_$colon$colon.prototype.tl__sci_List = (function() {
  return this.tl$5
});
ScalaJS.c.sci_$colon$colon.prototype.tl$und$eq__sci_List__V = (function(x$1) {
  this.tl$5 = x$1
});
ScalaJS.c.sci_$colon$colon.prototype.head__O = (function() {
  return this.scala$collection$immutable$$colon$colon$$hd__O()
});
ScalaJS.c.sci_$colon$colon.prototype.tail__sci_List = (function() {
  return this.tl__sci_List()
});
ScalaJS.c.sci_$colon$colon.prototype.isEmpty__Z = (function() {
  return false
});
ScalaJS.c.sci_$colon$colon.prototype.productPrefix__T = (function() {
  return "::"
});
ScalaJS.c.sci_$colon$colon.prototype.productArity__I = (function() {
  return 2
});
ScalaJS.c.sci_$colon$colon.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  switch (x1) {
    case 0:
      {
        return this.hd$1__O();
        break
      };
    case 1:
      {
        return this.tl$1__sci_List();
        break
      };
    default:
      throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1));
  }
});
ScalaJS.c.sci_$colon$colon.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.sci_$colon$colon.prototype.tail__O = (function() {
  return this.tail__sci_List()
});
ScalaJS.c.sci_$colon$colon.prototype.init___O__sci_List = (function(hd, tl) {
  this.scala$collection$immutable$$colon$colon$$hd$5 = hd;
  this.tl$5 = tl;
  ScalaJS.c.sci_List.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_$colon$colon = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_$colon$colon)))
});
ScalaJS.as.sci_$colon$colon = (function(obj) {
  if ((ScalaJS.is.sci_$colon$colon(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.$colon$colon")
  }
});
ScalaJS.isArrayOf.sci_$colon$colon = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_$colon$colon)))
});
ScalaJS.asArrayOf.sci_$colon$colon = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_$colon$colon(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.$colon$colon;", depth)
  }
});
ScalaJS.d.sci_$colon$colon = new ScalaJS.ClassTypeData({
  sci_$colon$colon: 0
}, false, "scala.collection.immutable.$colon$colon", ScalaJS.d.sci_List, {
  sci_$colon$colon: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_List: 1,
  sc_LinearSeqOptimized: 1,
  s_Product: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_$colon$colon.prototype.$classData = ScalaJS.d.sci_$colon$colon;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap = (function() {
  ScalaJS.c.sci_AbstractMap.call(this)
});
ScalaJS.c.sci_HashMap.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_HashMap.prototype.constructor = ScalaJS.c.sci_HashMap;
/** @constructor */
ScalaJS.h.sci_HashMap = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap.prototype = ScalaJS.c.sci_HashMap.prototype;
ScalaJS.c.sci_HashMap.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_HashMap.prototype.empty__sci_HashMap = (function() {
  return ScalaJS.m.sci_HashMap().empty__sci_HashMap()
});
ScalaJS.c.sci_HashMap.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().empty__sc_Iterator()
});
ScalaJS.c.sci_HashMap.prototype.foreach__F1__V = (function(f) {
  /*<skip>*/
});
ScalaJS.c.sci_HashMap.prototype.get__O__s_Option = (function(key) {
  return this.get0__O__I__I__s_Option(key, this.computeHash__O__I(key), 0)
});
ScalaJS.c.sci_HashMap.prototype.$$plus__T2__sci_HashMap = (function(kv) {
  return this.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap(kv.$$und1__O(), this.computeHash__O__I(kv.$$und1__O()), 0, kv.$$und2__O(), kv, null)
});
ScalaJS.c.sci_HashMap.prototype.$$plus__T2__T2__sc_Seq__sci_HashMap = (function(elem1, elem2, elems) {
  return ScalaJS.as.sci_HashMap(this.$$plus__T2__sci_HashMap(elem1).$$plus__T2__sci_HashMap(elem2).$$plus$plus__sc_GenTraversableOnce__scg_CanBuildFrom__O(elems, ScalaJS.m.sci_HashMap().canBuildFrom__scg_CanBuildFrom()))
});
ScalaJS.c.sci_HashMap.prototype.$$minus__O__sci_HashMap = (function(key) {
  return this.removed0__O__I__I__sci_HashMap(key, this.computeHash__O__I(key), 0)
});
ScalaJS.c.sci_HashMap.prototype.elemHashCode__O__I = (function(key) {
  return ScalaJS.m.sr_ScalaRunTime().hash__O__I(key)
});
ScalaJS.c.sci_HashMap.prototype.improve__I__I = (function(hcode) {
  var h = ((hcode + (~(hcode << 9))) | 0);
  h = (h ^ ((h >>> 14) | 0));
  h = ((h + (h << 4)) | 0);
  return (h ^ ((h >>> 10) | 0))
});
ScalaJS.c.sci_HashMap.prototype.computeHash__O__I = (function(key) {
  return this.improve__I__I(this.elemHashCode__O__I(key))
});
ScalaJS.c.sci_HashMap.prototype.get0__O__I__I__s_Option = (function(key, hash, level) {
  return ScalaJS.m.s_None()
});
ScalaJS.c.sci_HashMap.prototype.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap = (function(key, hash, level, value, kv, merger) {
  return new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(key, hash, value, kv)
});
ScalaJS.c.sci_HashMap.prototype.removed0__O__I__I__sci_HashMap = (function(key, hash, level) {
  return this
});
ScalaJS.c.sci_HashMap.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_HashMap.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_HashMap.prototype.seq__sc_Map = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_HashMap.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_HashMap(key)
});
ScalaJS.c.sci_HashMap.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_HashMap(kv)
});
ScalaJS.c.sci_HashMap.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.$$plus__T2__sci_HashMap(kv)
});
ScalaJS.c.sci_HashMap.prototype.empty__sc_Map = (function() {
  return this.empty__sci_HashMap()
});
ScalaJS.c.sci_HashMap.prototype.empty__sci_Map = (function() {
  return this.empty__sci_HashMap()
});
ScalaJS.c.sci_HashMap.prototype.init___ = (function() {
  ScalaJS.c.sci_AbstractMap.prototype.init___.call(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap)))
});
ScalaJS.as.sci_HashMap = (function(obj) {
  if ((ScalaJS.is.sci_HashMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap")
  }
});
ScalaJS.isArrayOf.sci_HashMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap)))
});
ScalaJS.asArrayOf.sci_HashMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap;", depth)
  }
});
ScalaJS.d.sci_HashMap = new ScalaJS.ClassTypeData({
  sci_HashMap: 0
}, false, "scala.collection.immutable.HashMap", ScalaJS.d.sci_AbstractMap, {
  sci_HashMap: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashMap.prototype.$classData = ScalaJS.d.sci_HashMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$ = (function() {
  ScalaJS.c.scg_ImmutableSetFactory.call(this)
});
ScalaJS.c.sci_HashSet$.prototype = new ScalaJS.h.scg_ImmutableSetFactory();
ScalaJS.c.sci_HashSet$.prototype.constructor = ScalaJS.c.sci_HashSet$;
/** @constructor */
ScalaJS.h.sci_HashSet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$.prototype = ScalaJS.c.sci_HashSet$.prototype;
ScalaJS.c.sci_HashSet$.prototype.empty__sci_HashSet = (function() {
  return ScalaJS.m.sci_HashSet$EmptyHashSet()
});
ScalaJS.c.sci_HashSet$.prototype.scala$collection$immutable$HashSet$$makeHashTrieSet__I__sci_HashSet__I__sci_HashSet__I__sci_HashSet$HashTrieSet = (function(hash0, elem0, hash1, elem1, level) {
  var index0 = (((hash0 >>> level) | 0) & 31);
  var index1 = (((hash1 >>> level) | 0) & 31);
  if ((index0 !== index1)) {
    var bitmap = ((1 << index0) | (1 << index1));
    var elems = ScalaJS.newArrayObject(ScalaJS.d.sci_HashSet.getArrayOf(), [2]);
    if ((index0 < index1)) {
      elems.u[0] = elem0;
      elems.u[1] = elem1
    } else {
      elems.u[0] = elem1;
      elems.u[1] = elem0
    };
    return new ScalaJS.c.sci_HashSet$HashTrieSet().init___I__Asci_HashSet__I(bitmap, elems, ((elem0.size__I() + elem1.size__I()) | 0))
  } else {
    var elems$2 = ScalaJS.newArrayObject(ScalaJS.d.sci_HashSet.getArrayOf(), [1]);
    var bitmap$2 = (1 << index0);
    var child = this.scala$collection$immutable$HashSet$$makeHashTrieSet__I__sci_HashSet__I__sci_HashSet__I__sci_HashSet$HashTrieSet(hash0, elem0, hash1, elem1, ((level + 5) | 0));
    elems$2.u[0] = child;
    return new ScalaJS.c.sci_HashSet$HashTrieSet().init___I__Asci_HashSet__I(bitmap$2, elems$2, child.size__I())
  }
});
ScalaJS.c.sci_HashSet$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_HashSet()
});
/*<skip>*/;
ScalaJS.is.sci_HashSet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$)))
});
ScalaJS.as.sci_HashSet$ = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$")
  }
});
ScalaJS.isArrayOf.sci_HashSet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$)))
});
ScalaJS.asArrayOf.sci_HashSet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$;", depth)
  }
});
ScalaJS.d.sci_HashSet$ = new ScalaJS.ClassTypeData({
  sci_HashSet$: 0
}, false, "scala.collection.immutable.HashSet$", ScalaJS.d.scg_ImmutableSetFactory, {
  sci_HashSet$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_ImmutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$.prototype.$classData = ScalaJS.d.sci_HashSet$;
ScalaJS.n.sci_HashSet = undefined;
ScalaJS.m.sci_HashSet = (function() {
  if ((!ScalaJS.n.sci_HashSet)) {
    ScalaJS.n.sci_HashSet = new ScalaJS.c.sci_HashSet$().init___()
  };
  return ScalaJS.n.sci_HashSet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$EmptyHashSet$ = (function() {
  ScalaJS.c.sci_HashSet.call(this)
});
ScalaJS.c.sci_HashSet$EmptyHashSet$.prototype = new ScalaJS.h.sci_HashSet();
ScalaJS.c.sci_HashSet$EmptyHashSet$.prototype.constructor = ScalaJS.c.sci_HashSet$EmptyHashSet$;
/** @constructor */
ScalaJS.h.sci_HashSet$EmptyHashSet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$EmptyHashSet$.prototype = ScalaJS.c.sci_HashSet$EmptyHashSet$.prototype;
/*<skip>*/;
ScalaJS.is.sci_HashSet$EmptyHashSet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$EmptyHashSet$)))
});
ScalaJS.as.sci_HashSet$EmptyHashSet$ = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$EmptyHashSet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$EmptyHashSet$")
  }
});
ScalaJS.isArrayOf.sci_HashSet$EmptyHashSet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$EmptyHashSet$)))
});
ScalaJS.asArrayOf.sci_HashSet$EmptyHashSet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$EmptyHashSet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$EmptyHashSet$;", depth)
  }
});
ScalaJS.d.sci_HashSet$EmptyHashSet$ = new ScalaJS.ClassTypeData({
  sci_HashSet$EmptyHashSet$: 0
}, false, "scala.collection.immutable.HashSet$EmptyHashSet$", ScalaJS.d.sci_HashSet, {
  sci_HashSet$EmptyHashSet$: 1,
  sci_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$EmptyHashSet$.prototype.$classData = ScalaJS.d.sci_HashSet$EmptyHashSet$;
ScalaJS.n.sci_HashSet$EmptyHashSet = undefined;
ScalaJS.m.sci_HashSet$EmptyHashSet = (function() {
  if ((!ScalaJS.n.sci_HashSet$EmptyHashSet)) {
    ScalaJS.n.sci_HashSet$EmptyHashSet = new ScalaJS.c.sci_HashSet$EmptyHashSet$().init___()
  };
  return ScalaJS.n.sci_HashSet$EmptyHashSet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$HashSet1 = (function() {
  ScalaJS.c.sci_HashSet.call(this);
  this.key$5 = null;
  this.hash$5 = 0
});
ScalaJS.c.sci_HashSet$HashSet1.prototype = new ScalaJS.h.sci_HashSet();
ScalaJS.c.sci_HashSet$HashSet1.prototype.constructor = ScalaJS.c.sci_HashSet$HashSet1;
/** @constructor */
ScalaJS.h.sci_HashSet$HashSet1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$HashSet1.prototype = ScalaJS.c.sci_HashSet$HashSet1.prototype;
ScalaJS.c.sci_HashSet$HashSet1.prototype.key__O = (function() {
  return this.key$5
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.hash__I = (function() {
  return this.hash$5
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.size__I = (function() {
  return 1
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.get0__O__I__I__Z = (function(key, hash, level) {
  return ((hash === this.hash__I()) && ScalaJS.anyEqEq(key, this.key__O()))
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.updated0__O__I__I__sci_HashSet = (function(key, hash, level) {
  if (((hash === this.hash__I()) && ScalaJS.anyEqEq(key, this.key__O()))) {
    return this
  } else {
    if ((hash !== this.hash__I())) {
      return ScalaJS.m.sci_HashSet().scala$collection$immutable$HashSet$$makeHashTrieSet__I__sci_HashSet__I__sci_HashSet__I__sci_HashSet$HashTrieSet(this.hash__I(), this, hash, new ScalaJS.c.sci_HashSet$HashSet1().init___O__I(key, hash), level)
    } else {
      return new ScalaJS.c.sci_HashSet$HashSetCollision1().init___I__sci_ListSet(hash, ScalaJS.m.sci_ListSet().empty__sci_ListSet().$$plus__O__sci_ListSet(this.key__O()).$$plus__O__sci_ListSet(key))
    }
  }
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [this.key__O()])))
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.key__O())
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.init___O__I = (function(key, hash) {
  this.key$5 = key;
  this.hash$5 = hash;
  ScalaJS.c.sci_HashSet.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashSet$HashSet1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$HashSet1)))
});
ScalaJS.as.sci_HashSet$HashSet1 = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$HashSet1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$HashSet1")
  }
});
ScalaJS.isArrayOf.sci_HashSet$HashSet1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$HashSet1)))
});
ScalaJS.asArrayOf.sci_HashSet$HashSet1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$HashSet1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$HashSet1;", depth)
  }
});
ScalaJS.d.sci_HashSet$HashSet1 = new ScalaJS.ClassTypeData({
  sci_HashSet$HashSet1: 0
}, false, "scala.collection.immutable.HashSet$HashSet1", ScalaJS.d.sci_HashSet, {
  sci_HashSet$HashSet1: 1,
  sci_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$HashSet1.prototype.$classData = ScalaJS.d.sci_HashSet$HashSet1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$HashSetCollision1 = (function() {
  ScalaJS.c.sci_HashSet.call(this);
  this.hash$5 = 0;
  this.ks$5 = null
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype = new ScalaJS.h.sci_HashSet();
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.constructor = ScalaJS.c.sci_HashSet$HashSetCollision1;
/** @constructor */
ScalaJS.h.sci_HashSet$HashSetCollision1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$HashSetCollision1.prototype = ScalaJS.c.sci_HashSet$HashSetCollision1.prototype;
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.hash__I = (function() {
  return this.hash$5
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.ks__sci_ListSet = (function() {
  return this.ks$5
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.size__I = (function() {
  return this.ks__sci_ListSet().size__I()
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.get0__O__I__I__Z = (function(key, hash, level) {
  if ((hash === this.hash__I())) {
    return this.ks__sci_ListSet().contains__O__Z(key)
  } else {
    return false
  }
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.updated0__O__I__I__sci_HashSet = (function(key, hash, level) {
  if ((hash === this.hash__I())) {
    return new ScalaJS.c.sci_HashSet$HashSetCollision1().init___I__sci_ListSet(hash, this.ks__sci_ListSet().$$plus__O__sci_ListSet(key))
  } else {
    return ScalaJS.m.sci_HashSet().scala$collection$immutable$HashSet$$makeHashTrieSet__I__sci_HashSet__I__sci_HashSet__I__sci_HashSet$HashTrieSet(this.hash__I(), this, hash, new ScalaJS.c.sci_HashSet$HashSet1().init___O__I(key, hash), level)
  }
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.iterator__sc_Iterator = (function() {
  return this.ks__sci_ListSet().iterator__sc_Iterator()
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.foreach__F1__V = (function(f) {
  this.ks__sci_ListSet().foreach__F1__V(f)
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.init___I__sci_ListSet = (function(hash, ks) {
  this.hash$5 = hash;
  this.ks$5 = ks;
  ScalaJS.c.sci_HashSet.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashSet$HashSetCollision1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$HashSetCollision1)))
});
ScalaJS.as.sci_HashSet$HashSetCollision1 = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$HashSetCollision1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$HashSetCollision1")
  }
});
ScalaJS.isArrayOf.sci_HashSet$HashSetCollision1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$HashSetCollision1)))
});
ScalaJS.asArrayOf.sci_HashSet$HashSetCollision1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$HashSetCollision1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$HashSetCollision1;", depth)
  }
});
ScalaJS.d.sci_HashSet$HashSetCollision1 = new ScalaJS.ClassTypeData({
  sci_HashSet$HashSetCollision1: 0
}, false, "scala.collection.immutable.HashSet$HashSetCollision1", ScalaJS.d.sci_HashSet, {
  sci_HashSet$HashSetCollision1: 1,
  sci_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$HashSetCollision1.prototype.$classData = ScalaJS.d.sci_HashSet$HashSetCollision1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashSet$HashTrieSet = (function() {
  ScalaJS.c.sci_HashSet.call(this);
  this.bitmap$5 = 0;
  this.elems$5 = null;
  this.size0$5 = 0
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype = new ScalaJS.h.sci_HashSet();
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.constructor = ScalaJS.c.sci_HashSet$HashTrieSet;
/** @constructor */
ScalaJS.h.sci_HashSet$HashTrieSet = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashSet$HashTrieSet.prototype = ScalaJS.c.sci_HashSet$HashTrieSet.prototype;
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.bitmap__p5__I = (function() {
  return this.bitmap$5
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.elems__Asci_HashSet = (function() {
  return this.elems$5
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.size0__p5__I = (function() {
  return this.size0$5
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.size__I = (function() {
  return this.size0__p5__I()
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.get0__O__I__I__Z = (function(key, hash, level) {
  var index = (((hash >>> level) | 0) & 31);
  var mask = (1 << index);
  if ((this.bitmap__p5__I() === -1)) {
    return this.elems__Asci_HashSet().u[(index & 31)].get0__O__I__I__Z(key, hash, ((level + 5) | 0))
  } else {
    if (((this.bitmap__p5__I() & mask) !== 0)) {
      var offset = ScalaJS.m.jl_Integer().bitCount__I__I((this.bitmap__p5__I() & ((mask - 1) | 0)));
      return this.elems__Asci_HashSet().u[offset].get0__O__I__I__Z(key, hash, ((level + 5) | 0))
    } else {
      return false
    }
  }
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.updated0__O__I__I__sci_HashSet = (function(key, hash, level) {
  var index = (((hash >>> level) | 0) & 31);
  var mask = (1 << index);
  var offset = ScalaJS.m.jl_Integer().bitCount__I__I((this.bitmap__p5__I() & ((mask - 1) | 0)));
  if (((this.bitmap__p5__I() & mask) !== 0)) {
    var sub = this.elems__Asci_HashSet().u[offset];
    var subNew = sub.updated0__O__I__I__sci_HashSet(key, hash, ((level + 5) | 0));
    if ((sub === subNew)) {
      return this
    } else {
      var elemsNew = ScalaJS.newArrayObject(ScalaJS.d.sci_HashSet.getArrayOf(), [this.elems__Asci_HashSet().u["length"]]);
      ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashSet(), 0, elemsNew, 0, this.elems__Asci_HashSet().u["length"]);
      elemsNew.u[offset] = subNew;
      return new ScalaJS.c.sci_HashSet$HashTrieSet().init___I__Asci_HashSet__I(this.bitmap__p5__I(), elemsNew, ((this.size__I() + ((subNew.size__I() - sub.size__I()) | 0)) | 0))
    }
  } else {
    var elemsNew$2 = ScalaJS.newArrayObject(ScalaJS.d.sci_HashSet.getArrayOf(), [((this.elems__Asci_HashSet().u["length"] + 1) | 0)]);
    ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashSet(), 0, elemsNew$2, 0, offset);
    elemsNew$2.u[offset] = new ScalaJS.c.sci_HashSet$HashSet1().init___O__I(key, hash);
    ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashSet(), offset, elemsNew$2, ((offset + 1) | 0), ((this.elems__Asci_HashSet().u["length"] - offset) | 0));
    var bitmapNew = (this.bitmap__p5__I() | mask);
    return new ScalaJS.c.sci_HashSet$HashTrieSet().init___I__Asci_HashSet__I(bitmapNew, elemsNew$2, ((this.size__I() + 1) | 0))
  }
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.iterator__sci_TrieIterator = (function() {
  return new ScalaJS.c.sci_HashSet$HashTrieSet$$anon$1().init___sci_HashSet$HashTrieSet(this)
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.foreach__F1__V = (function(f) {
  var i = 0;
  while ((i < this.elems__Asci_HashSet().u["length"])) {
    this.elems__Asci_HashSet().u[i].foreach__F1__V(f);
    i = ((i + 1) | 0)
  }
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.iterator__sc_Iterator = (function() {
  return this.iterator__sci_TrieIterator()
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.init___I__Asci_HashSet__I = (function(bitmap, elems, size0) {
  this.bitmap$5 = bitmap;
  this.elems$5 = elems;
  this.size0$5 = size0;
  ScalaJS.c.sci_HashSet.prototype.init___.call(this);
  ScalaJS.m.s_Predef().assert__Z__V((ScalaJS.m.jl_Integer().bitCount__I__I(bitmap) === elems.u["length"]));
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashSet$HashTrieSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashSet$HashTrieSet)))
});
ScalaJS.as.sci_HashSet$HashTrieSet = (function(obj) {
  if ((ScalaJS.is.sci_HashSet$HashTrieSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashSet$HashTrieSet")
  }
});
ScalaJS.isArrayOf.sci_HashSet$HashTrieSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashSet$HashTrieSet)))
});
ScalaJS.asArrayOf.sci_HashSet$HashTrieSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashSet$HashTrieSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashSet$HashTrieSet;", depth)
  }
});
ScalaJS.d.sci_HashSet$HashTrieSet = new ScalaJS.ClassTypeData({
  sci_HashSet$HashTrieSet: 0
}, false, "scala.collection.immutable.HashSet$HashTrieSet", ScalaJS.d.sci_HashSet, {
  sci_HashSet$HashTrieSet: 1,
  sci_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashSet$HashTrieSet.prototype.$classData = ScalaJS.d.sci_HashSet$HashTrieSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_IndexedSeq$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this);
  this.ReusableCBF$5 = null;
  this.bitmap$0$5 = false
});
ScalaJS.c.sci_IndexedSeq$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sci_IndexedSeq$.prototype.constructor = ScalaJS.c.sci_IndexedSeq$;
/** @constructor */
ScalaJS.h.sci_IndexedSeq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_IndexedSeq$.prototype = ScalaJS.c.sci_IndexedSeq$.prototype;
ScalaJS.c.sci_IndexedSeq$.prototype.newBuilder__scm_Builder = (function() {
  return ScalaJS.m.sci_Vector().newBuilder__scm_Builder()
});
/*<skip>*/;
ScalaJS.is.sci_IndexedSeq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_IndexedSeq$)))
});
ScalaJS.as.sci_IndexedSeq$ = (function(obj) {
  if ((ScalaJS.is.sci_IndexedSeq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.IndexedSeq$")
  }
});
ScalaJS.isArrayOf.sci_IndexedSeq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_IndexedSeq$)))
});
ScalaJS.asArrayOf.sci_IndexedSeq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_IndexedSeq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.IndexedSeq$;", depth)
  }
});
ScalaJS.d.sci_IndexedSeq$ = new ScalaJS.ClassTypeData({
  sci_IndexedSeq$: 0
}, false, "scala.collection.immutable.IndexedSeq$", ScalaJS.d.scg_SeqFactory, {
  sci_IndexedSeq$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_IndexedSeq$.prototype.$classData = ScalaJS.d.sci_IndexedSeq$;
ScalaJS.n.sci_IndexedSeq = undefined;
ScalaJS.m.sci_IndexedSeq = (function() {
  if ((!ScalaJS.n.sci_IndexedSeq)) {
    ScalaJS.n.sci_IndexedSeq = new ScalaJS.c.sci_IndexedSeq$().init___()
  };
  return ScalaJS.n.sci_IndexedSeq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_List$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.sci_List$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sci_List$.prototype.constructor = ScalaJS.c.sci_List$;
/** @constructor */
ScalaJS.h.sci_List$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_List$.prototype = ScalaJS.c.sci_List$.prototype;
ScalaJS.c.sci_List$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return this.ReusableCBF__scg_GenTraversableFactory$GenericCanBuildFrom()
});
ScalaJS.c.sci_List$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ListBuffer().init___()
});
ScalaJS.c.sci_List$.prototype.empty__sci_List = (function() {
  return ScalaJS.m.sci_Nil()
});
ScalaJS.c.sci_List$.prototype.apply__sc_Seq__sci_List = (function(xs) {
  return xs.toList__sci_List()
});
ScalaJS.c.sci_List$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_List()
});
/*<skip>*/;
ScalaJS.is.sci_List$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_List$)))
});
ScalaJS.as.sci_List$ = (function(obj) {
  if ((ScalaJS.is.sci_List$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.List$")
  }
});
ScalaJS.isArrayOf.sci_List$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_List$)))
});
ScalaJS.asArrayOf.sci_List$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_List$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.List$;", depth)
  }
});
ScalaJS.d.sci_List$ = new ScalaJS.ClassTypeData({
  sci_List$: 0
}, false, "scala.collection.immutable.List$", ScalaJS.d.scg_SeqFactory, {
  sci_List$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_List$.prototype.$classData = ScalaJS.d.sci_List$;
ScalaJS.n.sci_List = undefined;
ScalaJS.m.sci_List = (function() {
  if ((!ScalaJS.n.sci_List)) {
    ScalaJS.n.sci_List = new ScalaJS.c.sci_List$().init___()
  };
  return ScalaJS.n.sci_List
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListMap = (function() {
  ScalaJS.c.sci_AbstractMap.call(this)
});
ScalaJS.c.sci_ListMap.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_ListMap.prototype.constructor = ScalaJS.c.sci_ListMap;
/** @constructor */
ScalaJS.h.sci_ListMap = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListMap.prototype = ScalaJS.c.sci_ListMap.prototype;
ScalaJS.c.sci_ListMap.prototype.empty__sci_ListMap = (function() {
  return ScalaJS.m.sci_ListMap().empty__sci_ListMap()
});
ScalaJS.c.sci_ListMap.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_ListMap.prototype.get__O__s_Option = (function(key) {
  return ScalaJS.m.s_None()
});
ScalaJS.c.sci_ListMap.prototype.updated__O__O__sci_ListMap = (function(key, value) {
  return new ScalaJS.c.sci_ListMap$Node().init___sci_ListMap__O__O(this, key, value)
});
ScalaJS.c.sci_ListMap.prototype.$$plus__T2__sci_ListMap = (function(kv) {
  return this.updated__O__O__sci_ListMap(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_ListMap.prototype.$$minus__O__sci_ListMap = (function(key) {
  return this
});
ScalaJS.c.sci_ListMap.prototype.iterator__sc_Iterator = (function() {
  return new ScalaJS.c.sci_ListMap$$anon$1().init___sci_ListMap(this).toList__sci_List().reverseIterator__sc_Iterator()
});
ScalaJS.c.sci_ListMap.prototype.key__O = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("empty map")
});
ScalaJS.c.sci_ListMap.prototype.value__O = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("empty map")
});
ScalaJS.c.sci_ListMap.prototype.tail__sci_ListMap = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("empty map")
});
ScalaJS.c.sci_ListMap.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.sci_ListMap.prototype.seq__sc_Map = (function() {
  return this.seq__sci_Map()
});
ScalaJS.c.sci_ListMap.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_ListMap(key)
});
ScalaJS.c.sci_ListMap.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_ListMap(kv)
});
ScalaJS.c.sci_ListMap.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.$$plus__T2__sci_ListMap(kv)
});
ScalaJS.c.sci_ListMap.prototype.empty__sc_Map = (function() {
  return this.empty__sci_ListMap()
});
ScalaJS.c.sci_ListMap.prototype.empty__sci_Map = (function() {
  return this.empty__sci_ListMap()
});
/*<skip>*/;
ScalaJS.is.sci_ListMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListMap)))
});
ScalaJS.as.sci_ListMap = (function(obj) {
  if ((ScalaJS.is.sci_ListMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListMap")
  }
});
ScalaJS.isArrayOf.sci_ListMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListMap)))
});
ScalaJS.asArrayOf.sci_ListMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListMap;", depth)
  }
});
ScalaJS.d.sci_ListMap = new ScalaJS.ClassTypeData({
  sci_ListMap: 0
}, false, "scala.collection.immutable.ListMap", ScalaJS.d.sci_AbstractMap, {
  sci_ListMap: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListMap.prototype.$classData = ScalaJS.d.sci_ListMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListSet$ = (function() {
  ScalaJS.c.scg_ImmutableSetFactory.call(this)
});
ScalaJS.c.sci_ListSet$.prototype = new ScalaJS.h.scg_ImmutableSetFactory();
ScalaJS.c.sci_ListSet$.prototype.constructor = ScalaJS.c.sci_ListSet$;
/** @constructor */
ScalaJS.h.sci_ListSet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListSet$.prototype = ScalaJS.c.sci_ListSet$.prototype;
ScalaJS.c.sci_ListSet$.prototype.empty__sci_ListSet = (function() {
  return ScalaJS.m.sci_ListSet$EmptyListSet()
});
ScalaJS.c.sci_ListSet$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.sci_ListSet$ListSetBuilder().init___()
});
ScalaJS.c.sci_ListSet$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_ListSet()
});
/*<skip>*/;
ScalaJS.is.sci_ListSet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListSet$)))
});
ScalaJS.as.sci_ListSet$ = (function(obj) {
  if ((ScalaJS.is.sci_ListSet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListSet$")
  }
});
ScalaJS.isArrayOf.sci_ListSet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListSet$)))
});
ScalaJS.asArrayOf.sci_ListSet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListSet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListSet$;", depth)
  }
});
ScalaJS.d.sci_ListSet$ = new ScalaJS.ClassTypeData({
  sci_ListSet$: 0
}, false, "scala.collection.immutable.ListSet$", ScalaJS.d.scg_ImmutableSetFactory, {
  sci_ListSet$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_ImmutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_ListSet$.prototype.$classData = ScalaJS.d.sci_ListSet$;
ScalaJS.n.sci_ListSet = undefined;
ScalaJS.m.sci_ListSet = (function() {
  if ((!ScalaJS.n.sci_ListSet)) {
    ScalaJS.n.sci_ListSet = new ScalaJS.c.sci_ListSet$().init___()
  };
  return ScalaJS.n.sci_ListSet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListSet$EmptyListSet$ = (function() {
  ScalaJS.c.sci_ListSet.call(this)
});
ScalaJS.c.sci_ListSet$EmptyListSet$.prototype = new ScalaJS.h.sci_ListSet();
ScalaJS.c.sci_ListSet$EmptyListSet$.prototype.constructor = ScalaJS.c.sci_ListSet$EmptyListSet$;
/** @constructor */
ScalaJS.h.sci_ListSet$EmptyListSet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListSet$EmptyListSet$.prototype = ScalaJS.c.sci_ListSet$EmptyListSet$.prototype;
/*<skip>*/;
ScalaJS.is.sci_ListSet$EmptyListSet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListSet$EmptyListSet$)))
});
ScalaJS.as.sci_ListSet$EmptyListSet$ = (function(obj) {
  if ((ScalaJS.is.sci_ListSet$EmptyListSet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListSet$EmptyListSet$")
  }
});
ScalaJS.isArrayOf.sci_ListSet$EmptyListSet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListSet$EmptyListSet$)))
});
ScalaJS.asArrayOf.sci_ListSet$EmptyListSet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListSet$EmptyListSet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListSet$EmptyListSet$;", depth)
  }
});
ScalaJS.d.sci_ListSet$EmptyListSet$ = new ScalaJS.ClassTypeData({
  sci_ListSet$EmptyListSet$: 0
}, false, "scala.collection.immutable.ListSet$EmptyListSet$", ScalaJS.d.sci_ListSet, {
  sci_ListSet$EmptyListSet$: 1,
  sci_ListSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListSet$EmptyListSet$.prototype.$classData = ScalaJS.d.sci_ListSet$EmptyListSet$;
ScalaJS.n.sci_ListSet$EmptyListSet = undefined;
ScalaJS.m.sci_ListSet$EmptyListSet = (function() {
  if ((!ScalaJS.n.sci_ListSet$EmptyListSet)) {
    ScalaJS.n.sci_ListSet$EmptyListSet = new ScalaJS.c.sci_ListSet$EmptyListSet$().init___()
  };
  return ScalaJS.n.sci_ListSet$EmptyListSet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListSet$Node = (function() {
  ScalaJS.c.sci_ListSet.call(this);
  this.head$5 = null;
  this.$$outer$f = null
});
ScalaJS.c.sci_ListSet$Node.prototype = new ScalaJS.h.sci_ListSet();
ScalaJS.c.sci_ListSet$Node.prototype.constructor = ScalaJS.c.sci_ListSet$Node;
/** @constructor */
ScalaJS.h.sci_ListSet$Node = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListSet$Node.prototype = ScalaJS.c.sci_ListSet$Node.prototype;
ScalaJS.c.sci_ListSet$Node.prototype.head__O = (function() {
  return this.head$5
});
ScalaJS.c.sci_ListSet$Node.prototype.scala$collection$immutable$ListSet$$unchecked$undouter__sci_ListSet = (function() {
  return this.scala$collection$immutable$ListSet$Node$$$outer__sci_ListSet()
});
ScalaJS.c.sci_ListSet$Node.prototype.size__I = (function() {
  return this.sizeInternal__p5__sci_ListSet__I__I(this, 0)
});
ScalaJS.c.sci_ListSet$Node.prototype.sizeInternal__p5__sci_ListSet__I__I = (function(n, acc) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (n.isEmpty__Z()) {
      return acc
    } else {
      var temp$n = n.scala$collection$immutable$ListSet$$unchecked$undouter__sci_ListSet();
      var temp$acc = ((acc + 1) | 0);
      n = temp$n;
      acc = temp$acc;
      continue tailCallLoop
    }
  }
});
ScalaJS.c.sci_ListSet$Node.prototype.isEmpty__Z = (function() {
  return false
});
ScalaJS.c.sci_ListSet$Node.prototype.contains__O__Z = (function(e) {
  return this.containsInternal__p5__sci_ListSet__O__Z(this, e)
});
ScalaJS.c.sci_ListSet$Node.prototype.containsInternal__p5__sci_ListSet__O__Z = (function(n, e) {
  var _$this = this;
  tailCallLoop: while (true) {
    if ((!n.isEmpty__Z())) {
      if (ScalaJS.anyEqEq(n.head__O(), e)) {
        return true
      } else {
        n = n.scala$collection$immutable$ListSet$$unchecked$undouter__sci_ListSet();
        continue tailCallLoop
      }
    } else {
      return false
    }
  }
});
ScalaJS.c.sci_ListSet$Node.prototype.$$plus__O__sci_ListSet = (function(e) {
  if (this.contains__O__Z(e)) {
    return this
  } else {
    return new ScalaJS.c.sci_ListSet$Node().init___sci_ListSet__O(this, e)
  }
});
ScalaJS.c.sci_ListSet$Node.prototype.tail__sci_ListSet = (function() {
  return this.scala$collection$immutable$ListSet$Node$$$outer__sci_ListSet()
});
ScalaJS.c.sci_ListSet$Node.prototype.scala$collection$immutable$ListSet$Node$$$outer__sci_ListSet = (function() {
  return this.$$outer$f
});
ScalaJS.c.sci_ListSet$Node.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__sci_ListSet(elem)
});
ScalaJS.c.sci_ListSet$Node.prototype.init___sci_ListSet__O = (function($$outer, head) {
  this.head$5 = head;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.sci_ListSet.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_ListSet$Node = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListSet$Node)))
});
ScalaJS.as.sci_ListSet$Node = (function(obj) {
  if ((ScalaJS.is.sci_ListSet$Node(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListSet$Node")
  }
});
ScalaJS.isArrayOf.sci_ListSet$Node = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListSet$Node)))
});
ScalaJS.asArrayOf.sci_ListSet$Node = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListSet$Node(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListSet$Node;", depth)
  }
});
ScalaJS.d.sci_ListSet$Node = new ScalaJS.ClassTypeData({
  sci_ListSet$Node: 0
}, false, "scala.collection.immutable.ListSet$Node", ScalaJS.d.sci_ListSet, {
  sci_ListSet$Node: 1,
  sci_ListSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Set: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSet: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListSet$Node.prototype.$classData = ScalaJS.d.sci_ListSet$Node;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$EmptyMap$ = (function() {
  ScalaJS.c.sci_AbstractMap.call(this)
});
ScalaJS.c.sci_Map$EmptyMap$.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_Map$EmptyMap$.prototype.constructor = ScalaJS.c.sci_Map$EmptyMap$;
/** @constructor */
ScalaJS.h.sci_Map$EmptyMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$EmptyMap$.prototype = ScalaJS.c.sci_Map$EmptyMap$.prototype;
ScalaJS.c.sci_Map$EmptyMap$.prototype.size__I = (function() {
  return 0
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.get__O__s_Option = (function(key) {
  return ScalaJS.m.s_None()
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().empty__sc_Iterator()
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.updated__O__O__sci_Map = (function(key, value) {
  return new ScalaJS.c.sci_Map$Map1().init___O__O(key, value)
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.updated__O__O__sci_Map(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.$$minus__O__sci_Map = (function(key) {
  return this
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_Map(key)
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_Map(kv)
});
/*<skip>*/;
ScalaJS.is.sci_Map$EmptyMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$EmptyMap$)))
});
ScalaJS.as.sci_Map$EmptyMap$ = (function(obj) {
  if ((ScalaJS.is.sci_Map$EmptyMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$EmptyMap$")
  }
});
ScalaJS.isArrayOf.sci_Map$EmptyMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$EmptyMap$)))
});
ScalaJS.asArrayOf.sci_Map$EmptyMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$EmptyMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$EmptyMap$;", depth)
  }
});
ScalaJS.d.sci_Map$EmptyMap$ = new ScalaJS.ClassTypeData({
  sci_Map$EmptyMap$: 0
}, false, "scala.collection.immutable.Map$EmptyMap$", ScalaJS.d.sci_AbstractMap, {
  sci_Map$EmptyMap$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Map$EmptyMap$.prototype.$classData = ScalaJS.d.sci_Map$EmptyMap$;
ScalaJS.n.sci_Map$EmptyMap = undefined;
ScalaJS.m.sci_Map$EmptyMap = (function() {
  if ((!ScalaJS.n.sci_Map$EmptyMap)) {
    ScalaJS.n.sci_Map$EmptyMap = new ScalaJS.c.sci_Map$EmptyMap$().init___()
  };
  return ScalaJS.n.sci_Map$EmptyMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$Map1 = (function() {
  ScalaJS.c.sci_AbstractMap.call(this);
  this.key1$5 = null;
  this.value1$5 = null
});
ScalaJS.c.sci_Map$Map1.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_Map$Map1.prototype.constructor = ScalaJS.c.sci_Map$Map1;
/** @constructor */
ScalaJS.h.sci_Map$Map1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$Map1.prototype = ScalaJS.c.sci_Map$Map1.prototype;
ScalaJS.c.sci_Map$Map1.prototype.size__I = (function() {
  return 1
});
ScalaJS.c.sci_Map$Map1.prototype.get__O__s_Option = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.s_Some().init___O(this.value1$5)
  } else {
    return ScalaJS.m.s_None()
  }
});
ScalaJS.c.sci_Map$Map1.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5)]), 1)))
});
ScalaJS.c.sci_Map$Map1.prototype.updated__O__O__sci_Map = (function(key, value) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map1().init___O__O(this.key1$5, value)
  } else {
    return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key1$5, this.value1$5, key, value)
  }
});
ScalaJS.c.sci_Map$Map1.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.updated__O__O__sci_Map(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_Map$Map1.prototype.$$minus__O__sci_Map = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return ScalaJS.m.sci_Map().empty__sci_Map()
  } else {
    return this
  }
});
ScalaJS.c.sci_Map$Map1.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5))
});
ScalaJS.c.sci_Map$Map1.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_Map(key)
});
ScalaJS.c.sci_Map$Map1.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_Map(kv)
});
ScalaJS.c.sci_Map$Map1.prototype.init___O__O = (function(key1, value1) {
  this.key1$5 = key1;
  this.value1$5 = value1;
  ScalaJS.c.sci_AbstractMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Map$Map1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$Map1)))
});
ScalaJS.as.sci_Map$Map1 = (function(obj) {
  if ((ScalaJS.is.sci_Map$Map1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$Map1")
  }
});
ScalaJS.isArrayOf.sci_Map$Map1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$Map1)))
});
ScalaJS.asArrayOf.sci_Map$Map1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$Map1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$Map1;", depth)
  }
});
ScalaJS.d.sci_Map$Map1 = new ScalaJS.ClassTypeData({
  sci_Map$Map1: 0
}, false, "scala.collection.immutable.Map$Map1", ScalaJS.d.sci_AbstractMap, {
  sci_Map$Map1: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Map$Map1.prototype.$classData = ScalaJS.d.sci_Map$Map1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$Map2 = (function() {
  ScalaJS.c.sci_AbstractMap.call(this);
  this.key1$5 = null;
  this.value1$5 = null;
  this.key2$5 = null;
  this.value2$5 = null
});
ScalaJS.c.sci_Map$Map2.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_Map$Map2.prototype.constructor = ScalaJS.c.sci_Map$Map2;
/** @constructor */
ScalaJS.h.sci_Map$Map2 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$Map2.prototype = ScalaJS.c.sci_Map$Map2.prototype;
ScalaJS.c.sci_Map$Map2.prototype.size__I = (function() {
  return 2
});
ScalaJS.c.sci_Map$Map2.prototype.get__O__s_Option = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.s_Some().init___O(this.value1$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.s_Some().init___O(this.value2$5)
    } else {
      return ScalaJS.m.s_None()
    }
  }
});
ScalaJS.c.sci_Map$Map2.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5), new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5)]), 1)))
});
ScalaJS.c.sci_Map$Map2.prototype.updated__O__O__sci_Map = (function(key, value) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key1$5, value, this.key2$5, this.value2$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key1$5, this.value1$5, this.key2$5, value)
    } else {
      return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, key, value)
    }
  }
});
ScalaJS.c.sci_Map$Map2.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.updated__O__O__sci_Map(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_Map$Map2.prototype.$$minus__O__sci_Map = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map1().init___O__O(this.key2$5, this.value2$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map1().init___O__O(this.key1$5, this.value1$5)
    } else {
      return this
    }
  }
});
ScalaJS.c.sci_Map$Map2.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5))
});
ScalaJS.c.sci_Map$Map2.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_Map(key)
});
ScalaJS.c.sci_Map$Map2.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_Map(kv)
});
ScalaJS.c.sci_Map$Map2.prototype.init___O__O__O__O = (function(key1, value1, key2, value2) {
  this.key1$5 = key1;
  this.value1$5 = value1;
  this.key2$5 = key2;
  this.value2$5 = value2;
  ScalaJS.c.sci_AbstractMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Map$Map2 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$Map2)))
});
ScalaJS.as.sci_Map$Map2 = (function(obj) {
  if ((ScalaJS.is.sci_Map$Map2(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$Map2")
  }
});
ScalaJS.isArrayOf.sci_Map$Map2 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$Map2)))
});
ScalaJS.asArrayOf.sci_Map$Map2 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$Map2(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$Map2;", depth)
  }
});
ScalaJS.d.sci_Map$Map2 = new ScalaJS.ClassTypeData({
  sci_Map$Map2: 0
}, false, "scala.collection.immutable.Map$Map2", ScalaJS.d.sci_AbstractMap, {
  sci_Map$Map2: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Map$Map2.prototype.$classData = ScalaJS.d.sci_Map$Map2;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$Map3 = (function() {
  ScalaJS.c.sci_AbstractMap.call(this);
  this.key1$5 = null;
  this.value1$5 = null;
  this.key2$5 = null;
  this.value2$5 = null;
  this.key3$5 = null;
  this.value3$5 = null
});
ScalaJS.c.sci_Map$Map3.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_Map$Map3.prototype.constructor = ScalaJS.c.sci_Map$Map3;
/** @constructor */
ScalaJS.h.sci_Map$Map3 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$Map3.prototype = ScalaJS.c.sci_Map$Map3.prototype;
ScalaJS.c.sci_Map$Map3.prototype.size__I = (function() {
  return 3
});
ScalaJS.c.sci_Map$Map3.prototype.get__O__s_Option = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.s_Some().init___O(this.value1$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.s_Some().init___O(this.value2$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.s_Some().init___O(this.value3$5)
      } else {
        return ScalaJS.m.s_None()
      }
    }
  }
});
ScalaJS.c.sci_Map$Map3.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5), new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5), new ScalaJS.c.T2().init___O__O(this.key3$5, this.value3$5)]), 1)))
});
ScalaJS.c.sci_Map$Map3.prototype.updated__O__O__sci_Map = (function(key, value) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, value, this.key2$5, this.value2$5, this.key3$5, this.value3$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, value, this.key3$5, this.value3$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key3$5, value)
      } else {
        return new ScalaJS.c.sci_Map$Map4().init___O__O__O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key3$5, this.value3$5, key, value)
      }
    }
  }
});
ScalaJS.c.sci_Map$Map3.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.updated__O__O__sci_Map(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_Map$Map3.prototype.$$minus__O__sci_Map = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key2$5, this.value2$5, this.key3$5, this.value3$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key1$5, this.value1$5, this.key3$5, this.value3$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.sci_Map$Map2().init___O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5)
      } else {
        return this
      }
    }
  }
});
ScalaJS.c.sci_Map$Map3.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key3$5, this.value3$5))
});
ScalaJS.c.sci_Map$Map3.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_Map(key)
});
ScalaJS.c.sci_Map$Map3.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_Map(kv)
});
ScalaJS.c.sci_Map$Map3.prototype.init___O__O__O__O__O__O = (function(key1, value1, key2, value2, key3, value3) {
  this.key1$5 = key1;
  this.value1$5 = value1;
  this.key2$5 = key2;
  this.value2$5 = value2;
  this.key3$5 = key3;
  this.value3$5 = value3;
  ScalaJS.c.sci_AbstractMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Map$Map3 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$Map3)))
});
ScalaJS.as.sci_Map$Map3 = (function(obj) {
  if ((ScalaJS.is.sci_Map$Map3(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$Map3")
  }
});
ScalaJS.isArrayOf.sci_Map$Map3 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$Map3)))
});
ScalaJS.asArrayOf.sci_Map$Map3 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$Map3(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$Map3;", depth)
  }
});
ScalaJS.d.sci_Map$Map3 = new ScalaJS.ClassTypeData({
  sci_Map$Map3: 0
}, false, "scala.collection.immutable.Map$Map3", ScalaJS.d.sci_AbstractMap, {
  sci_Map$Map3: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Map$Map3.prototype.$classData = ScalaJS.d.sci_Map$Map3;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Map$Map4 = (function() {
  ScalaJS.c.sci_AbstractMap.call(this);
  this.key1$5 = null;
  this.value1$5 = null;
  this.key2$5 = null;
  this.value2$5 = null;
  this.key3$5 = null;
  this.value3$5 = null;
  this.key4$5 = null;
  this.value4$5 = null
});
ScalaJS.c.sci_Map$Map4.prototype = new ScalaJS.h.sci_AbstractMap();
ScalaJS.c.sci_Map$Map4.prototype.constructor = ScalaJS.c.sci_Map$Map4;
/** @constructor */
ScalaJS.h.sci_Map$Map4 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Map$Map4.prototype = ScalaJS.c.sci_Map$Map4.prototype;
ScalaJS.c.sci_Map$Map4.prototype.size__I = (function() {
  return 4
});
ScalaJS.c.sci_Map$Map4.prototype.get__O__s_Option = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.s_Some().init___O(this.value1$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.s_Some().init___O(this.value2$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.s_Some().init___O(this.value3$5)
      } else {
        if (ScalaJS.anyEqEq(key, this.key4$5)) {
          return new ScalaJS.c.s_Some().init___O(this.value4$5)
        } else {
          return ScalaJS.m.s_None()
        }
      }
    }
  }
});
ScalaJS.c.sci_Map$Map4.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5), new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5), new ScalaJS.c.T2().init___O__O(this.key3$5, this.value3$5), new ScalaJS.c.T2().init___O__O(this.key4$5, this.value4$5)]), 1)))
});
ScalaJS.c.sci_Map$Map4.prototype.updated__O__O__sci_Map = (function(key, value) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map4().init___O__O__O__O__O__O__O__O(this.key1$5, value, this.key2$5, this.value2$5, this.key3$5, this.value3$5, this.key4$5, this.value4$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map4().init___O__O__O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, value, this.key3$5, this.value3$5, this.key4$5, this.value4$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.sci_Map$Map4().init___O__O__O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key3$5, value, this.key4$5, this.value4$5)
      } else {
        if (ScalaJS.anyEqEq(key, this.key4$5)) {
          return new ScalaJS.c.sci_Map$Map4().init___O__O__O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key3$5, this.value3$5, this.key4$5, value)
        } else {
          return new ScalaJS.c.sci_HashMap().init___().$$plus__T2__T2__sc_Seq__sci_HashMap(new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5), new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5), ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [new ScalaJS.c.T2().init___O__O(this.key3$5, this.value3$5), new ScalaJS.c.T2().init___O__O(this.key4$5, this.value4$5), new ScalaJS.c.T2().init___O__O(key, value)]), 1)))
        }
      }
    }
  }
});
ScalaJS.c.sci_Map$Map4.prototype.$$plus__T2__sci_Map = (function(kv) {
  return this.updated__O__O__sci_Map(kv.$$und1__O(), kv.$$und2__O())
});
ScalaJS.c.sci_Map$Map4.prototype.$$minus__O__sci_Map = (function(key) {
  if (ScalaJS.anyEqEq(key, this.key1$5)) {
    return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key2$5, this.value2$5, this.key3$5, this.value3$5, this.key4$5, this.value4$5)
  } else {
    if (ScalaJS.anyEqEq(key, this.key2$5)) {
      return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key3$5, this.value3$5, this.key4$5, this.value4$5)
    } else {
      if (ScalaJS.anyEqEq(key, this.key3$5)) {
        return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key4$5, this.value4$5)
      } else {
        if (ScalaJS.anyEqEq(key, this.key4$5)) {
          return new ScalaJS.c.sci_Map$Map3().init___O__O__O__O__O__O(this.key1$5, this.value1$5, this.key2$5, this.value2$5, this.key3$5, this.value3$5)
        } else {
          return this
        }
      }
    }
  }
});
ScalaJS.c.sci_Map$Map4.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key1$5, this.value1$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key2$5, this.value2$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key3$5, this.value3$5));
  f.apply__O__O(new ScalaJS.c.T2().init___O__O(this.key4$5, this.value4$5))
});
ScalaJS.c.sci_Map$Map4.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_Map(key)
});
ScalaJS.c.sci_Map$Map4.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__sci_Map(kv)
});
ScalaJS.c.sci_Map$Map4.prototype.init___O__O__O__O__O__O__O__O = (function(key1, value1, key2, value2, key3, value3, key4, value4) {
  this.key1$5 = key1;
  this.value1$5 = value1;
  this.key2$5 = key2;
  this.value2$5 = value2;
  this.key3$5 = key3;
  this.value3$5 = value3;
  this.key4$5 = key4;
  this.value4$5 = value4;
  ScalaJS.c.sci_AbstractMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Map$Map4 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Map$Map4)))
});
ScalaJS.as.sci_Map$Map4 = (function(obj) {
  if ((ScalaJS.is.sci_Map$Map4(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Map$Map4")
  }
});
ScalaJS.isArrayOf.sci_Map$Map4 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Map$Map4)))
});
ScalaJS.asArrayOf.sci_Map$Map4 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Map$Map4(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Map$Map4;", depth)
  }
});
ScalaJS.d.sci_Map$Map4 = new ScalaJS.ClassTypeData({
  sci_Map$Map4: 0
}, false, "scala.collection.immutable.Map$Map4", ScalaJS.d.sci_AbstractMap, {
  sci_Map$Map4: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Map$Map4.prototype.$classData = ScalaJS.d.sci_Map$Map4;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Nil$ = (function() {
  ScalaJS.c.sci_List.call(this)
});
ScalaJS.c.sci_Nil$.prototype = new ScalaJS.h.sci_List();
ScalaJS.c.sci_Nil$.prototype.constructor = ScalaJS.c.sci_Nil$;
/** @constructor */
ScalaJS.h.sci_Nil$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Nil$.prototype = ScalaJS.c.sci_Nil$.prototype;
ScalaJS.c.sci_Nil$.prototype.isEmpty__Z = (function() {
  return true
});
ScalaJS.c.sci_Nil$.prototype.head__sr_Nothing$ = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("head of empty list")
});
ScalaJS.c.sci_Nil$.prototype.tail__sci_List = (function() {
  throw new ScalaJS.c.jl_UnsupportedOperationException().init___T("tail of empty list")
});
ScalaJS.c.sci_Nil$.prototype.equals__O__Z = (function(that) {
  var x1 = that;
  if (ScalaJS.is.sc_GenSeq(x1)) {
    var x2 = ScalaJS.as.sc_GenSeq(x1);
    return x2.isEmpty__Z()
  };
  return false
});
ScalaJS.c.sci_Nil$.prototype.productPrefix__T = (function() {
  return "Nil"
});
ScalaJS.c.sci_Nil$.prototype.productArity__I = (function() {
  return 0
});
ScalaJS.c.sci_Nil$.prototype.productElement__I__O = (function(x$1) {
  var x1 = x$1;
  throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(x$1))
});
ScalaJS.c.sci_Nil$.prototype.productIterator__sc_Iterator = (function() {
  return ScalaJS.m.sr_ScalaRunTime().typedProductIterator__s_Product__sc_Iterator(this)
});
ScalaJS.c.sci_Nil$.prototype.tail__O = (function() {
  return this.tail__sci_List()
});
ScalaJS.c.sci_Nil$.prototype.head__O = (function() {
  this.head__sr_Nothing$()
});
/*<skip>*/;
ScalaJS.is.sci_Nil$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Nil$)))
});
ScalaJS.as.sci_Nil$ = (function(obj) {
  if ((ScalaJS.is.sci_Nil$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Nil$")
  }
});
ScalaJS.isArrayOf.sci_Nil$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Nil$)))
});
ScalaJS.asArrayOf.sci_Nil$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Nil$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Nil$;", depth)
  }
});
ScalaJS.d.sci_Nil$ = new ScalaJS.ClassTypeData({
  sci_Nil$: 0
}, false, "scala.collection.immutable.Nil$", ScalaJS.d.sci_List, {
  sci_Nil$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_List: 1,
  sc_LinearSeqOptimized: 1,
  s_Product: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Nil$.prototype.$classData = ScalaJS.d.sci_Nil$;
ScalaJS.n.sci_Nil = undefined;
ScalaJS.m.sci_Nil = (function() {
  if ((!ScalaJS.n.sci_Nil)) {
    ScalaJS.n.sci_Nil = new ScalaJS.c.sci_Nil$().init___()
  };
  return ScalaJS.n.sci_Nil
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Range$Inclusive = (function() {
  ScalaJS.c.sci_Range.call(this)
});
ScalaJS.c.sci_Range$Inclusive.prototype = new ScalaJS.h.sci_Range();
ScalaJS.c.sci_Range$Inclusive.prototype.constructor = ScalaJS.c.sci_Range$Inclusive;
/** @constructor */
ScalaJS.h.sci_Range$Inclusive = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Range$Inclusive.prototype = ScalaJS.c.sci_Range$Inclusive.prototype;
ScalaJS.c.sci_Range$Inclusive.prototype.isInclusive__Z = (function() {
  return true
});
/*<skip>*/;
ScalaJS.is.sci_Range$Inclusive = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Range$Inclusive)))
});
ScalaJS.as.sci_Range$Inclusive = (function(obj) {
  if ((ScalaJS.is.sci_Range$Inclusive(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Range$Inclusive")
  }
});
ScalaJS.isArrayOf.sci_Range$Inclusive = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Range$Inclusive)))
});
ScalaJS.asArrayOf.sci_Range$Inclusive = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Range$Inclusive(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Range$Inclusive;", depth)
  }
});
ScalaJS.d.sci_Range$Inclusive = new ScalaJS.ClassTypeData({
  sci_Range$Inclusive: 0
}, false, "scala.collection.immutable.Range$Inclusive", ScalaJS.d.sci_Range, {
  sci_Range$Inclusive: 1,
  sci_Range: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  sci_IndexedSeq: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Range$Inclusive.prototype.$classData = ScalaJS.d.sci_Range$Inclusive;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Seq$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.sci_Seq$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sci_Seq$.prototype.constructor = ScalaJS.c.sci_Seq$;
/** @constructor */
ScalaJS.h.sci_Seq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Seq$.prototype = ScalaJS.c.sci_Seq$.prototype;
ScalaJS.c.sci_Seq$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ListBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.sci_Seq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Seq$)))
});
ScalaJS.as.sci_Seq$ = (function(obj) {
  if ((ScalaJS.is.sci_Seq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Seq$")
  }
});
ScalaJS.isArrayOf.sci_Seq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Seq$)))
});
ScalaJS.asArrayOf.sci_Seq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Seq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Seq$;", depth)
  }
});
ScalaJS.d.sci_Seq$ = new ScalaJS.ClassTypeData({
  sci_Seq$: 0
}, false, "scala.collection.immutable.Seq$", ScalaJS.d.scg_SeqFactory, {
  sci_Seq$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Seq$.prototype.$classData = ScalaJS.d.sci_Seq$;
ScalaJS.n.sci_Seq = undefined;
ScalaJS.m.sci_Seq = (function() {
  if ((!ScalaJS.n.sci_Seq)) {
    ScalaJS.n.sci_Seq = new ScalaJS.c.sci_Seq$().init___()
  };
  return ScalaJS.n.sci_Seq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Set$ = (function() {
  ScalaJS.c.scg_ImmutableSetFactory.call(this)
});
ScalaJS.c.sci_Set$.prototype = new ScalaJS.h.scg_ImmutableSetFactory();
ScalaJS.c.sci_Set$.prototype.constructor = ScalaJS.c.sci_Set$;
/** @constructor */
ScalaJS.h.sci_Set$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Set$.prototype = ScalaJS.c.sci_Set$.prototype;
ScalaJS.c.sci_Set$.prototype.empty__sci_Set = (function() {
  return ScalaJS.m.sci_Set$EmptySet()
});
ScalaJS.c.sci_Set$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_Set()
});
/*<skip>*/;
ScalaJS.is.sci_Set$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Set$)))
});
ScalaJS.as.sci_Set$ = (function(obj) {
  if ((ScalaJS.is.sci_Set$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Set$")
  }
});
ScalaJS.isArrayOf.sci_Set$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Set$)))
});
ScalaJS.asArrayOf.sci_Set$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Set$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Set$;", depth)
  }
});
ScalaJS.d.sci_Set$ = new ScalaJS.ClassTypeData({
  sci_Set$: 0
}, false, "scala.collection.immutable.Set$", ScalaJS.d.scg_ImmutableSetFactory, {
  sci_Set$: 1,
  scg_ImmutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Set$.prototype.$classData = ScalaJS.d.sci_Set$;
ScalaJS.n.sci_Set = undefined;
ScalaJS.m.sci_Set = (function() {
  if ((!ScalaJS.n.sci_Set)) {
    ScalaJS.n.sci_Set = new ScalaJS.c.sci_Set$().init___()
  };
  return ScalaJS.n.sci_Set
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Stream$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.sci_Stream$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sci_Stream$.prototype.constructor = ScalaJS.c.sci_Stream$;
/** @constructor */
ScalaJS.h.sci_Stream$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Stream$.prototype = ScalaJS.c.sci_Stream$.prototype;
ScalaJS.c.sci_Stream$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return new ScalaJS.c.sci_Stream$StreamCanBuildFrom().init___()
});
ScalaJS.c.sci_Stream$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.sci_Stream$StreamBuilder().init___()
});
ScalaJS.c.sci_Stream$.prototype.empty__sci_Stream = (function() {
  return ScalaJS.m.sci_Stream$Empty()
});
ScalaJS.c.sci_Stream$.prototype.consWrapper__F0__sci_Stream$ConsWrapper = (function(stream) {
  return new ScalaJS.c.sci_Stream$ConsWrapper().init___F0(stream)
});
ScalaJS.c.sci_Stream$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_Stream()
});
/*<skip>*/;
ScalaJS.is.sci_Stream$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Stream$)))
});
ScalaJS.as.sci_Stream$ = (function(obj) {
  if ((ScalaJS.is.sci_Stream$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Stream$")
  }
});
ScalaJS.isArrayOf.sci_Stream$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Stream$)))
});
ScalaJS.asArrayOf.sci_Stream$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Stream$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Stream$;", depth)
  }
});
ScalaJS.d.sci_Stream$ = new ScalaJS.ClassTypeData({
  sci_Stream$: 0
}, false, "scala.collection.immutable.Stream$", ScalaJS.d.scg_SeqFactory, {
  sci_Stream$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Stream$.prototype.$classData = ScalaJS.d.sci_Stream$;
ScalaJS.n.sci_Stream = undefined;
ScalaJS.m.sci_Stream = (function() {
  if ((!ScalaJS.n.sci_Stream)) {
    ScalaJS.n.sci_Stream = new ScalaJS.c.sci_Stream$().init___()
  };
  return ScalaJS.n.sci_Stream
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Stream$Cons = (function() {
  ScalaJS.c.sci_Stream.call(this);
  this.hd$5 = null;
  this.tl$5 = null;
  this.tlVal$5 = null
});
ScalaJS.c.sci_Stream$Cons.prototype = new ScalaJS.h.sci_Stream();
ScalaJS.c.sci_Stream$Cons.prototype.constructor = ScalaJS.c.sci_Stream$Cons;
/** @constructor */
ScalaJS.h.sci_Stream$Cons = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Stream$Cons.prototype = ScalaJS.c.sci_Stream$Cons.prototype;
ScalaJS.c.sci_Stream$Cons.prototype.isEmpty__Z = (function() {
  return false
});
ScalaJS.c.sci_Stream$Cons.prototype.head__O = (function() {
  return this.hd$5
});
ScalaJS.c.sci_Stream$Cons.prototype.tailDefined__Z = (function() {
  return (this.tlVal$5 !== null)
});
ScalaJS.c.sci_Stream$Cons.prototype.tail__sci_Stream = (function() {
  if ((!this.tailDefined__Z())) {
    if ((!this.tailDefined__Z())) {
      this.tlVal$5 = ScalaJS.as.sci_Stream(this.tl$5.apply__O())
    }
  };
  return this.tlVal$5
});
ScalaJS.c.sci_Stream$Cons.prototype.tail__O = (function() {
  return this.tail__sci_Stream()
});
ScalaJS.c.sci_Stream$Cons.prototype.init___O__F0 = (function(hd, tl) {
  this.hd$5 = hd;
  this.tl$5 = tl;
  ScalaJS.c.sci_Stream.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Stream$Cons = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Stream$Cons)))
});
ScalaJS.as.sci_Stream$Cons = (function(obj) {
  if ((ScalaJS.is.sci_Stream$Cons(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Stream$Cons")
  }
});
ScalaJS.isArrayOf.sci_Stream$Cons = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Stream$Cons)))
});
ScalaJS.asArrayOf.sci_Stream$Cons = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Stream$Cons(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Stream$Cons;", depth)
  }
});
ScalaJS.d.sci_Stream$Cons = new ScalaJS.ClassTypeData({
  sci_Stream$Cons: 0
}, false, "scala.collection.immutable.Stream$Cons", ScalaJS.d.sci_Stream, {
  sci_Stream$Cons: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Stream: 1,
  sc_LinearSeqOptimized: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Stream$Cons.prototype.$classData = ScalaJS.d.sci_Stream$Cons;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Stream$Empty$ = (function() {
  ScalaJS.c.sci_Stream.call(this)
});
ScalaJS.c.sci_Stream$Empty$.prototype = new ScalaJS.h.sci_Stream();
ScalaJS.c.sci_Stream$Empty$.prototype.constructor = ScalaJS.c.sci_Stream$Empty$;
/** @constructor */
ScalaJS.h.sci_Stream$Empty$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Stream$Empty$.prototype = ScalaJS.c.sci_Stream$Empty$.prototype;
ScalaJS.c.sci_Stream$Empty$.prototype.isEmpty__Z = (function() {
  return true
});
ScalaJS.c.sci_Stream$Empty$.prototype.head__sr_Nothing$ = (function() {
  throw new ScalaJS.c.ju_NoSuchElementException().init___T("head of empty stream")
});
ScalaJS.c.sci_Stream$Empty$.prototype.tail__sr_Nothing$ = (function() {
  throw new ScalaJS.c.jl_UnsupportedOperationException().init___T("tail of empty stream")
});
ScalaJS.c.sci_Stream$Empty$.prototype.tailDefined__Z = (function() {
  return false
});
ScalaJS.c.sci_Stream$Empty$.prototype.tail__O = (function() {
  this.tail__sr_Nothing$()
});
ScalaJS.c.sci_Stream$Empty$.prototype.head__O = (function() {
  this.head__sr_Nothing$()
});
/*<skip>*/;
ScalaJS.is.sci_Stream$Empty$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Stream$Empty$)))
});
ScalaJS.as.sci_Stream$Empty$ = (function(obj) {
  if ((ScalaJS.is.sci_Stream$Empty$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Stream$Empty$")
  }
});
ScalaJS.isArrayOf.sci_Stream$Empty$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Stream$Empty$)))
});
ScalaJS.asArrayOf.sci_Stream$Empty$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Stream$Empty$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Stream$Empty$;", depth)
  }
});
ScalaJS.d.sci_Stream$Empty$ = new ScalaJS.ClassTypeData({
  sci_Stream$Empty$: 0
}, false, "scala.collection.immutable.Stream$Empty$", ScalaJS.d.sci_Stream, {
  sci_Stream$Empty$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_Stream: 1,
  sc_LinearSeqOptimized: 1,
  sci_LinearSeq: 1,
  sc_LinearSeq: 1,
  sc_LinearSeqLike: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_Stream$Empty$.prototype.$classData = ScalaJS.d.sci_Stream$Empty$;
ScalaJS.n.sci_Stream$Empty = undefined;
ScalaJS.m.sci_Stream$Empty = (function() {
  if ((!ScalaJS.n.sci_Stream$Empty)) {
    ScalaJS.n.sci_Stream$Empty = new ScalaJS.c.sci_Stream$Empty$().init___()
  };
  return ScalaJS.n.sci_Stream$Empty
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_Vector$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this);
  this.VectorReusableCBF$5 = null;
  this.ReusableCBF$5 = null;
  this.NIL$5 = null;
  this.bitmap$0$5 = false
});
ScalaJS.c.sci_Vector$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.sci_Vector$.prototype.constructor = ScalaJS.c.sci_Vector$;
/** @constructor */
ScalaJS.h.sci_Vector$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_Vector$.prototype = ScalaJS.c.sci_Vector$.prototype;
ScalaJS.c.sci_Vector$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.sci_VectorBuilder().init___()
});
ScalaJS.c.sci_Vector$.prototype.NIL__sci_Vector = (function() {
  return this.NIL$5
});
ScalaJS.c.sci_Vector$.prototype.empty__sci_Vector = (function() {
  return this.NIL__sci_Vector()
});
ScalaJS.c.sci_Vector$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__sci_Vector()
});
ScalaJS.c.sci_Vector$.prototype.init___ = (function() {
  ScalaJS.c.scg_SeqFactory.prototype.init___.call(this);
  ScalaJS.n.sci_Vector = this;
  this.VectorReusableCBF$5 = new ScalaJS.c.sci_Vector$VectorReusableCBF().init___();
  this.NIL$5 = new ScalaJS.c.sci_Vector().init___I__I__I(0, 0, 0);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_Vector$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_Vector$)))
});
ScalaJS.as.sci_Vector$ = (function(obj) {
  if ((ScalaJS.is.sci_Vector$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.Vector$")
  }
});
ScalaJS.isArrayOf.sci_Vector$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_Vector$)))
});
ScalaJS.asArrayOf.sci_Vector$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_Vector$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.Vector$;", depth)
  }
});
ScalaJS.d.sci_Vector$ = new ScalaJS.ClassTypeData({
  sci_Vector$: 0
}, false, "scala.collection.immutable.Vector$", ScalaJS.d.scg_SeqFactory, {
  sci_Vector$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.sci_Vector$.prototype.$classData = ScalaJS.d.sci_Vector$;
ScalaJS.n.sci_Vector = undefined;
ScalaJS.m.sci_Vector = (function() {
  if ((!ScalaJS.n.sci_Vector)) {
    ScalaJS.n.sci_Vector = new ScalaJS.c.sci_Vector$().init___()
  };
  return ScalaJS.n.sci_Vector
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_AbstractBuffer = (function() {
  ScalaJS.c.scm_AbstractSeq.call(this)
});
ScalaJS.c.scm_AbstractBuffer.prototype = new ScalaJS.h.scm_AbstractSeq();
ScalaJS.c.scm_AbstractBuffer.prototype.constructor = ScalaJS.c.scm_AbstractBuffer;
/** @constructor */
ScalaJS.h.scm_AbstractBuffer = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_AbstractBuffer.prototype = ScalaJS.c.scm_AbstractBuffer.prototype;
ScalaJS.c.scm_AbstractBuffer.prototype.init___ = (function() {
  ScalaJS.c.scm_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.scg_Growable$class__$init$__scg_Growable__V(this);
  ScalaJS.i.scg_Shrinkable$class__$init$__scg_Shrinkable__V(this);
  ScalaJS.i.scg_Subtractable$class__$init$__scg_Subtractable__V(this);
  ScalaJS.i.scm_BufferLike$class__$init$__scm_Buffer__V(this);
  ScalaJS.i.scm_Buffer$class__$init$__scm_Buffer__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_AbstractBuffer = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_AbstractBuffer)))
});
ScalaJS.as.scm_AbstractBuffer = (function(obj) {
  if ((ScalaJS.is.scm_AbstractBuffer(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.AbstractBuffer")
  }
});
ScalaJS.isArrayOf.scm_AbstractBuffer = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_AbstractBuffer)))
});
ScalaJS.asArrayOf.scm_AbstractBuffer = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_AbstractBuffer(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.AbstractBuffer;", depth)
  }
});
ScalaJS.d.scm_AbstractBuffer = new ScalaJS.ClassTypeData({
  scm_AbstractBuffer: 0
}, false, "scala.collection.mutable.AbstractBuffer", ScalaJS.d.scm_AbstractSeq, {
  scm_AbstractBuffer: 1,
  scm_Buffer: 1,
  scm_BufferLike: 1,
  scg_Subtractable: 1,
  sc_script_Scriptable: 1,
  scg_Shrinkable: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_AbstractBuffer.prototype.$classData = ScalaJS.d.scm_AbstractBuffer;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_ArrayBuffer$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.scm_ArrayBuffer$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.scm_ArrayBuffer$.prototype.constructor = ScalaJS.c.scm_ArrayBuffer$;
/** @constructor */
ScalaJS.h.scm_ArrayBuffer$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_ArrayBuffer$.prototype = ScalaJS.c.scm_ArrayBuffer$.prototype;
ScalaJS.c.scm_ArrayBuffer$.prototype.canBuildFrom__scg_CanBuildFrom = (function() {
  return this.ReusableCBF__scg_GenTraversableFactory$GenericCanBuildFrom()
});
ScalaJS.c.scm_ArrayBuffer$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ArrayBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.scm_ArrayBuffer$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_ArrayBuffer$)))
});
ScalaJS.as.scm_ArrayBuffer$ = (function(obj) {
  if ((ScalaJS.is.scm_ArrayBuffer$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.ArrayBuffer$")
  }
});
ScalaJS.isArrayOf.scm_ArrayBuffer$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_ArrayBuffer$)))
});
ScalaJS.asArrayOf.scm_ArrayBuffer$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_ArrayBuffer$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.ArrayBuffer$;", depth)
  }
});
ScalaJS.d.scm_ArrayBuffer$ = new ScalaJS.ClassTypeData({
  scm_ArrayBuffer$: 0
}, false, "scala.collection.mutable.ArrayBuffer$", ScalaJS.d.scg_SeqFactory, {
  scm_ArrayBuffer$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scm_ArrayBuffer$.prototype.$classData = ScalaJS.d.scm_ArrayBuffer$;
ScalaJS.n.scm_ArrayBuffer = undefined;
ScalaJS.m.scm_ArrayBuffer = (function() {
  if ((!ScalaJS.n.scm_ArrayBuffer)) {
    ScalaJS.n.scm_ArrayBuffer = new ScalaJS.c.scm_ArrayBuffer$().init___()
  };
  return ScalaJS.n.scm_ArrayBuffer
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_HashMap = (function() {
  ScalaJS.c.scm_AbstractMap.call(this);
  this.$$undloadFactor$5 = 0;
  this.table$5 = null;
  this.tableSize$5 = 0;
  this.threshold$5 = 0;
  this.sizemap$5 = null;
  this.seedvalue$5 = 0
});
ScalaJS.c.scm_HashMap.prototype = new ScalaJS.h.scm_AbstractMap();
ScalaJS.c.scm_HashMap.prototype.constructor = ScalaJS.c.scm_HashMap;
/** @constructor */
ScalaJS.h.scm_HashMap = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_HashMap.prototype = ScalaJS.c.scm_HashMap.prototype;
ScalaJS.c.scm_HashMap.prototype.$$undloadFactor__I = (function() {
  return this.$$undloadFactor$5
});
ScalaJS.c.scm_HashMap.prototype.$$undloadFactor$und$eq__I__V = (function(x$1) {
  this.$$undloadFactor$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.table__Ascm_HashEntry = (function() {
  return this.table$5
});
ScalaJS.c.scm_HashMap.prototype.table$und$eq__Ascm_HashEntry__V = (function(x$1) {
  this.table$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.tableSize__I = (function() {
  return this.tableSize$5
});
ScalaJS.c.scm_HashMap.prototype.tableSize$und$eq__I__V = (function(x$1) {
  this.tableSize$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.threshold__I = (function() {
  return this.threshold$5
});
ScalaJS.c.scm_HashMap.prototype.threshold$und$eq__I__V = (function(x$1) {
  this.threshold$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.sizemap__AI = (function() {
  return this.sizemap$5
});
ScalaJS.c.scm_HashMap.prototype.sizemap$und$eq__AI__V = (function(x$1) {
  this.sizemap$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.seedvalue__I = (function() {
  return this.seedvalue$5
});
ScalaJS.c.scm_HashMap.prototype.seedvalue$und$eq__I__V = (function(x$1) {
  this.seedvalue$5 = x$1
});
ScalaJS.c.scm_HashMap.prototype.tableSizeSeed__I = (function() {
  return ScalaJS.i.scm_HashTable$class__tableSizeSeed__scm_HashTable__I(this)
});
ScalaJS.c.scm_HashMap.prototype.initialSize__I = (function() {
  return ScalaJS.i.scm_HashTable$class__initialSize__scm_HashTable__I(this)
});
ScalaJS.c.scm_HashMap.prototype.findEntry__O__scm_HashEntry = (function(key) {
  return ScalaJS.i.scm_HashTable$class__findEntry__scm_HashTable__O__scm_HashEntry(this, key)
});
ScalaJS.c.scm_HashMap.prototype.findOrAddEntry__O__O__scm_HashEntry = (function(key, value) {
  return ScalaJS.i.scm_HashTable$class__findOrAddEntry__scm_HashTable__O__O__scm_HashEntry(this, key, value)
});
ScalaJS.c.scm_HashMap.prototype.entriesIterator__sc_Iterator = (function() {
  return ScalaJS.i.scm_HashTable$class__entriesIterator__scm_HashTable__sc_Iterator(this)
});
ScalaJS.c.scm_HashMap.prototype.foreachEntry__F1__V = (function(f) {
  ScalaJS.i.scm_HashTable$class__foreachEntry__scm_HashTable__F1__V(this, f)
});
ScalaJS.c.scm_HashMap.prototype.nnSizeMapAdd__I__V = (function(h) {
  ScalaJS.i.scm_HashTable$class__nnSizeMapAdd__scm_HashTable__I__V(this, h)
});
ScalaJS.c.scm_HashMap.prototype.nnSizeMapReset__I__V = (function(tableLength) {
  ScalaJS.i.scm_HashTable$class__nnSizeMapReset__scm_HashTable__I__V(this, tableLength)
});
ScalaJS.c.scm_HashMap.prototype.totalSizeMapBuckets__I = (function() {
  return ScalaJS.i.scm_HashTable$class__totalSizeMapBuckets__scm_HashTable__I(this)
});
ScalaJS.c.scm_HashMap.prototype.calcSizeMapSize__I__I = (function(tableLength) {
  return ScalaJS.i.scm_HashTable$class__calcSizeMapSize__scm_HashTable__I__I(this, tableLength)
});
ScalaJS.c.scm_HashMap.prototype.sizeMapInit__I__V = (function(tableLength) {
  ScalaJS.i.scm_HashTable$class__sizeMapInit__scm_HashTable__I__V(this, tableLength)
});
ScalaJS.c.scm_HashMap.prototype.sizeMapInitAndRebuild__V = (function() {
  ScalaJS.i.scm_HashTable$class__sizeMapInitAndRebuild__scm_HashTable__V(this)
});
ScalaJS.c.scm_HashMap.prototype.alwaysInitSizeMap__Z = (function() {
  return ScalaJS.i.scm_HashTable$class__alwaysInitSizeMap__scm_HashTable__Z(this)
});
ScalaJS.c.scm_HashMap.prototype.elemEquals__O__O__Z = (function(key1, key2) {
  return ScalaJS.i.scm_HashTable$class__elemEquals__scm_HashTable__O__O__Z(this, key1, key2)
});
ScalaJS.c.scm_HashMap.prototype.index__I__I = (function(hcode) {
  return ScalaJS.i.scm_HashTable$class__index__scm_HashTable__I__I(this, hcode)
});
ScalaJS.c.scm_HashMap.prototype.initWithContents__scm_HashTable$Contents__V = (function(c) {
  ScalaJS.i.scm_HashTable$class__initWithContents__scm_HashTable__scm_HashTable$Contents__V(this, c)
});
ScalaJS.c.scm_HashMap.prototype.sizeMapBucketBitSize__I = (function() {
  return ScalaJS.i.scm_HashTable$HashUtils$class__sizeMapBucketBitSize__scm_HashTable$HashUtils__I(this)
});
ScalaJS.c.scm_HashMap.prototype.sizeMapBucketSize__I = (function() {
  return ScalaJS.i.scm_HashTable$HashUtils$class__sizeMapBucketSize__scm_HashTable$HashUtils__I(this)
});
ScalaJS.c.scm_HashMap.prototype.elemHashCode__O__I = (function(key) {
  return ScalaJS.i.scm_HashTable$HashUtils$class__elemHashCode__scm_HashTable$HashUtils__O__I(this, key)
});
ScalaJS.c.scm_HashMap.prototype.improve__I__I__I = (function(hcode, seed) {
  return ScalaJS.i.scm_HashTable$HashUtils$class__improve__scm_HashTable$HashUtils__I__I__I(this, hcode, seed)
});
ScalaJS.c.scm_HashMap.prototype.empty__scm_HashMap = (function() {
  return ScalaJS.m.scm_HashMap().empty__scm_HashMap()
});
ScalaJS.c.scm_HashMap.prototype.size__I = (function() {
  return this.tableSize__I()
});
ScalaJS.c.scm_HashMap.prototype.contains__O__Z = (function(key) {
  return (this.findEntry__O__scm_HashEntry(key) !== null)
});
ScalaJS.c.scm_HashMap.prototype.apply__O__O = (function(key) {
  var result = ScalaJS.as.scm_DefaultEntry(this.findEntry__O__scm_HashEntry(key));
  if ((result === null)) {
    return this.$default__O__O(key)
  } else {
    return result.value__O()
  }
});
ScalaJS.c.scm_HashMap.prototype.get__O__s_Option = (function(key) {
  var e = ScalaJS.as.scm_DefaultEntry(this.findEntry__O__scm_HashEntry(key));
  if ((e === null)) {
    return ScalaJS.m.s_None()
  } else {
    return new ScalaJS.c.s_Some().init___O(e.value__O())
  }
});
ScalaJS.c.scm_HashMap.prototype.$$plus$eq__T2__scm_HashMap = (function(kv) {
  var e = ScalaJS.as.scm_DefaultEntry(this.findOrAddEntry__O__O__scm_HashEntry(kv.$$und1__O(), kv.$$und2__O()));
  if ((e !== null)) {
    e.value$und$eq__O__V(kv.$$und2__O())
  };
  return this
});
ScalaJS.c.scm_HashMap.prototype.iterator__sc_Iterator = (function() {
  return this.entriesIterator__sc_Iterator().map__F1__sc_Iterator(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(e$2) {
      var e = ScalaJS.as.scm_DefaultEntry(e$2);
      return new ScalaJS.c.T2().init___O__O(e.key__O(), e.value__O())
    })
  })()))
});
ScalaJS.c.scm_HashMap.prototype.foreach__F1__V = (function(f) {
  this.foreachEntry__F1__V(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function(f$1) {
    return (function(e$2) {
      var e = ScalaJS.as.scm_DefaultEntry(e$2);
      return f$1.apply__O__O(new ScalaJS.c.T2().init___O__O(e.key__O(), e.value__O()))
    })
  })(f)))
});
ScalaJS.c.scm_HashMap.prototype.valuesIterator__sc_Iterator = (function() {
  return new ScalaJS.c.scm_HashMap$$anon$4().init___scm_HashMap(this)
});
ScalaJS.c.scm_HashMap.prototype.createNewEntry__O__O__scm_DefaultEntry = (function(key, value) {
  return new ScalaJS.c.scm_DefaultEntry().init___O__O(key, value)
});
ScalaJS.c.scm_HashMap.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.scm_HashMap.prototype.result__O = (function() {
  return this.result__scm_Map()
});
ScalaJS.c.scm_HashMap.prototype.$$plus__T2__sc_GenMap = (function(kv) {
  return this.$$plus__T2__scm_Map(kv)
});
ScalaJS.c.scm_HashMap.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_Map()
});
ScalaJS.c.scm_HashMap.prototype.seq__sc_Map = (function() {
  return this.seq__scm_Map()
});
ScalaJS.c.scm_HashMap.prototype.createNewEntry__O__O__scm_HashEntry = (function(key, value) {
  return this.createNewEntry__O__O__scm_DefaultEntry(key, value)
});
ScalaJS.c.scm_HashMap.prototype.$$plus$eq__O__scg_Growable = (function(elem) {
  return this.$$plus$eq__T2__scm_HashMap(ScalaJS.as.T2(elem))
});
ScalaJS.c.scm_HashMap.prototype.$$plus$eq__O__scm_Builder = (function(elem) {
  return this.$$plus$eq__T2__scm_HashMap(ScalaJS.as.T2(elem))
});
ScalaJS.c.scm_HashMap.prototype.$$plus$eq__T2__scm_MapLike = (function(kv) {
  return this.$$plus$eq__T2__scm_HashMap(kv)
});
ScalaJS.c.scm_HashMap.prototype.empty__sc_Map = (function() {
  return this.empty__scm_HashMap()
});
ScalaJS.c.scm_HashMap.prototype.init___scm_HashTable$Contents = (function(contents) {
  ScalaJS.c.scm_AbstractMap.prototype.init___.call(this);
  ScalaJS.i.scm_HashTable$HashUtils$class__$init$__scm_HashTable$HashUtils__V(this);
  ScalaJS.i.scm_HashTable$class__$init$__scm_HashTable__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  this.initWithContents__scm_HashTable$Contents__V(contents);
  return this
});
ScalaJS.c.scm_HashMap.prototype.init___ = (function() {
  ScalaJS.c.scm_HashMap.prototype.init___scm_HashTable$Contents.call(this, null);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_HashMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_HashMap)))
});
ScalaJS.as.scm_HashMap = (function(obj) {
  if ((ScalaJS.is.scm_HashMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.HashMap")
  }
});
ScalaJS.isArrayOf.scm_HashMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_HashMap)))
});
ScalaJS.asArrayOf.scm_HashMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_HashMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.HashMap;", depth)
  }
});
ScalaJS.d.scm_HashMap = new ScalaJS.ClassTypeData({
  scm_HashMap: 0
}, false, "scala.collection.mutable.HashMap", ScalaJS.d.scm_AbstractMap, {
  scm_HashMap: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  scm_HashTable: 1,
  scm_HashTable$HashUtils: 1,
  scm_AbstractMap: 1,
  scm_Map: 1,
  scm_MapLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scg_Shrinkable: 1,
  scm_Builder: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_HashMap.prototype.$classData = ScalaJS.d.scm_HashMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_HashSet = (function() {
  ScalaJS.c.scm_AbstractSet.call(this);
  this.$$undloadFactor$5 = 0;
  this.table$5 = null;
  this.tableSize$5 = 0;
  this.threshold$5 = 0;
  this.sizemap$5 = null;
  this.seedvalue$5 = 0
});
ScalaJS.c.scm_HashSet.prototype = new ScalaJS.h.scm_AbstractSet();
ScalaJS.c.scm_HashSet.prototype.constructor = ScalaJS.c.scm_HashSet;
/** @constructor */
ScalaJS.h.scm_HashSet = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_HashSet.prototype = ScalaJS.c.scm_HashSet.prototype;
ScalaJS.c.scm_HashSet.prototype.$$undloadFactor__I = (function() {
  return this.$$undloadFactor$5
});
ScalaJS.c.scm_HashSet.prototype.$$undloadFactor$und$eq__I__V = (function(x$1) {
  this.$$undloadFactor$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.table__AO = (function() {
  return this.table$5
});
ScalaJS.c.scm_HashSet.prototype.table$und$eq__AO__V = (function(x$1) {
  this.table$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.tableSize__I = (function() {
  return this.tableSize$5
});
ScalaJS.c.scm_HashSet.prototype.tableSize$und$eq__I__V = (function(x$1) {
  this.tableSize$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.threshold__I = (function() {
  return this.threshold$5
});
ScalaJS.c.scm_HashSet.prototype.threshold$und$eq__I__V = (function(x$1) {
  this.threshold$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.sizemap__AI = (function() {
  return this.sizemap$5
});
ScalaJS.c.scm_HashSet.prototype.sizemap$und$eq__AI__V = (function(x$1) {
  this.sizemap$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.seedvalue__I = (function() {
  return this.seedvalue$5
});
ScalaJS.c.scm_HashSet.prototype.seedvalue$und$eq__I__V = (function(x$1) {
  this.seedvalue$5 = x$1
});
ScalaJS.c.scm_HashSet.prototype.capacity__I__I = (function(expectedSize) {
  return ScalaJS.i.scm_FlatHashTable$class__capacity__scm_FlatHashTable__I__I(this, expectedSize)
});
ScalaJS.c.scm_HashSet.prototype.initialSize__I = (function() {
  return ScalaJS.i.scm_FlatHashTable$class__initialSize__scm_FlatHashTable__I(this)
});
ScalaJS.c.scm_HashSet.prototype.tableSizeSeed__I = (function() {
  return ScalaJS.i.scm_FlatHashTable$class__tableSizeSeed__scm_FlatHashTable__I(this)
});
ScalaJS.c.scm_HashSet.prototype.containsEntry__O__Z = (function(elem) {
  return ScalaJS.i.scm_FlatHashTable$class__containsEntry__scm_FlatHashTable__O__Z(this, elem)
});
ScalaJS.c.scm_HashSet.prototype.addEntry__O__Z = (function(elem) {
  return ScalaJS.i.scm_FlatHashTable$class__addEntry__scm_FlatHashTable__O__Z(this, elem)
});
ScalaJS.c.scm_HashSet.prototype.nnSizeMapAdd__I__V = (function(h) {
  ScalaJS.i.scm_FlatHashTable$class__nnSizeMapAdd__scm_FlatHashTable__I__V(this, h)
});
ScalaJS.c.scm_HashSet.prototype.nnSizeMapReset__I__V = (function(tableLength) {
  ScalaJS.i.scm_FlatHashTable$class__nnSizeMapReset__scm_FlatHashTable__I__V(this, tableLength)
});
ScalaJS.c.scm_HashSet.prototype.totalSizeMapBuckets__I = (function() {
  return ScalaJS.i.scm_FlatHashTable$class__totalSizeMapBuckets__scm_FlatHashTable__I(this)
});
ScalaJS.c.scm_HashSet.prototype.calcSizeMapSize__I__I = (function(tableLength) {
  return ScalaJS.i.scm_FlatHashTable$class__calcSizeMapSize__scm_FlatHashTable__I__I(this, tableLength)
});
ScalaJS.c.scm_HashSet.prototype.sizeMapInit__I__V = (function(tableLength) {
  ScalaJS.i.scm_FlatHashTable$class__sizeMapInit__scm_FlatHashTable__I__V(this, tableLength)
});
ScalaJS.c.scm_HashSet.prototype.sizeMapInitAndRebuild__V = (function() {
  ScalaJS.i.scm_FlatHashTable$class__sizeMapInitAndRebuild__scm_FlatHashTable__V(this)
});
ScalaJS.c.scm_HashSet.prototype.alwaysInitSizeMap__Z = (function() {
  return ScalaJS.i.scm_FlatHashTable$class__alwaysInitSizeMap__scm_FlatHashTable__Z(this)
});
ScalaJS.c.scm_HashSet.prototype.index__I__I = (function(hcode) {
  return ScalaJS.i.scm_FlatHashTable$class__index__scm_FlatHashTable__I__I(this, hcode)
});
ScalaJS.c.scm_HashSet.prototype.initWithContents__scm_FlatHashTable$Contents__V = (function(c) {
  ScalaJS.i.scm_FlatHashTable$class__initWithContents__scm_FlatHashTable__scm_FlatHashTable$Contents__V(this, c)
});
ScalaJS.c.scm_HashSet.prototype.sizeMapBucketBitSize__I = (function() {
  return ScalaJS.i.scm_FlatHashTable$HashUtils$class__sizeMapBucketBitSize__scm_FlatHashTable$HashUtils__I(this)
});
ScalaJS.c.scm_HashSet.prototype.sizeMapBucketSize__I = (function() {
  return ScalaJS.i.scm_FlatHashTable$HashUtils$class__sizeMapBucketSize__scm_FlatHashTable$HashUtils__I(this)
});
ScalaJS.c.scm_HashSet.prototype.elemHashCode__O__I = (function(elem) {
  return ScalaJS.i.scm_FlatHashTable$HashUtils$class__elemHashCode__scm_FlatHashTable$HashUtils__O__I(this, elem)
});
ScalaJS.c.scm_HashSet.prototype.improve__I__I__I = (function(hcode, seed) {
  return ScalaJS.i.scm_FlatHashTable$HashUtils$class__improve__scm_FlatHashTable$HashUtils__I__I__I(this, hcode, seed)
});
ScalaJS.c.scm_HashSet.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.scm_HashSet()
});
ScalaJS.c.scm_HashSet.prototype.size__I = (function() {
  return this.tableSize__I()
});
ScalaJS.c.scm_HashSet.prototype.contains__O__Z = (function(elem) {
  return this.containsEntry__O__Z(elem)
});
ScalaJS.c.scm_HashSet.prototype.$$plus$eq__O__scm_HashSet = (function(elem) {
  this.addEntry__O__Z(elem);
  return this
});
ScalaJS.c.scm_HashSet.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.scm_FlatHashTable$class__iterator__scm_FlatHashTable__sc_Iterator(this)
});
ScalaJS.c.scm_HashSet.prototype.foreach__F1__V = (function(f) {
  var i = 0;
  var len = this.table__AO().u["length"];
  while ((i < len)) {
    var elem = this.table__AO().u[i];
    if ((elem !== null)) {
      f.apply__O__O(elem)
    };
    i = ((i + 1) | 0)
  }
});
ScalaJS.c.scm_HashSet.prototype.clone__scm_HashSet = (function() {
  return ScalaJS.as.scm_HashSet(new ScalaJS.c.scm_HashSet().init___().$$plus$plus$eq__sc_TraversableOnce__scg_Growable(this))
});
ScalaJS.c.scm_HashSet.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Iterable()
});
ScalaJS.c.scm_HashSet.prototype.apply__O__O = (function(v1) {
  return this.apply__O__Z(v1)
});
ScalaJS.c.scm_HashSet.prototype.empty__sc_Set = (function() {
  return ScalaJS.as.sc_Set(this.empty__sc_GenSet())
});
ScalaJS.c.scm_HashSet.prototype.$$plus__O__sc_Set = (function(elem) {
  return this.$$plus__O__scm_Set(elem)
});
ScalaJS.c.scm_HashSet.prototype.result__O = (function() {
  return this.result__scm_Set()
});
ScalaJS.c.scm_HashSet.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_Set()
});
ScalaJS.c.scm_HashSet.prototype.seq__sc_Set = (function() {
  return this.seq__scm_Set()
});
ScalaJS.c.scm_HashSet.prototype.clone__scm_Set = (function() {
  return this.clone__scm_HashSet()
});
ScalaJS.c.scm_HashSet.prototype.$$plus$eq__O__scg_Growable = (function(elem) {
  return this.$$plus$eq__O__scm_HashSet(elem)
});
ScalaJS.c.scm_HashSet.prototype.$$plus$eq__O__scm_Builder = (function(elem) {
  return this.$$plus$eq__O__scm_HashSet(elem)
});
ScalaJS.c.scm_HashSet.prototype.$$plus$eq__O__scm_SetLike = (function(elem) {
  return this.$$plus$eq__O__scm_HashSet(elem)
});
ScalaJS.c.scm_HashSet.prototype.init___scm_FlatHashTable$Contents = (function(contents) {
  ScalaJS.c.scm_AbstractSet.prototype.init___.call(this);
  ScalaJS.i.scm_FlatHashTable$HashUtils$class__$init$__scm_FlatHashTable$HashUtils__V(this);
  ScalaJS.i.scm_FlatHashTable$class__$init$__scm_FlatHashTable__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  this.initWithContents__scm_FlatHashTable$Contents__V(contents);
  return this
});
ScalaJS.c.scm_HashSet.prototype.init___ = (function() {
  ScalaJS.c.scm_HashSet.prototype.init___scm_FlatHashTable$Contents.call(this, null);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_HashSet = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_HashSet)))
});
ScalaJS.as.scm_HashSet = (function(obj) {
  if ((ScalaJS.is.scm_HashSet(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.HashSet")
  }
});
ScalaJS.isArrayOf.scm_HashSet = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_HashSet)))
});
ScalaJS.asArrayOf.scm_HashSet = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_HashSet(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.HashSet;", depth)
  }
});
ScalaJS.d.scm_HashSet = new ScalaJS.ClassTypeData({
  scm_HashSet: 0
}, false, "scala.collection.mutable.HashSet", ScalaJS.d.scm_AbstractSet, {
  scm_HashSet: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  scm_FlatHashTable: 1,
  scm_FlatHashTable$HashUtils: 1,
  scm_AbstractSet: 1,
  scm_Set: 1,
  scm_SetLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scg_Shrinkable: 1,
  scm_Builder: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  sc_script_Scriptable: 1,
  sc_Set: 1,
  sc_SetLike: 1,
  scg_Subtractable: 1,
  sc_GenSet: 1,
  scg_GenericSetTemplate: 1,
  sc_GenSetLike: 1,
  F1: 1,
  scm_AbstractIterable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_HashSet.prototype.$classData = ScalaJS.d.scm_HashSet;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_HashSet$ = (function() {
  ScalaJS.c.scg_MutableSetFactory.call(this)
});
ScalaJS.c.scm_HashSet$.prototype = new ScalaJS.h.scg_MutableSetFactory();
ScalaJS.c.scm_HashSet$.prototype.constructor = ScalaJS.c.scm_HashSet$;
/** @constructor */
ScalaJS.h.scm_HashSet$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_HashSet$.prototype = ScalaJS.c.scm_HashSet$.prototype;
ScalaJS.c.scm_HashSet$.prototype.empty__scm_HashSet = (function() {
  return new ScalaJS.c.scm_HashSet().init___()
});
ScalaJS.c.scm_HashSet$.prototype.empty__sc_GenTraversable = (function() {
  return this.empty__scm_HashSet()
});
/*<skip>*/;
ScalaJS.is.scm_HashSet$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_HashSet$)))
});
ScalaJS.as.scm_HashSet$ = (function(obj) {
  if ((ScalaJS.is.scm_HashSet$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.HashSet$")
  }
});
ScalaJS.isArrayOf.scm_HashSet$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_HashSet$)))
});
ScalaJS.asArrayOf.scm_HashSet$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_HashSet$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.HashSet$;", depth)
  }
});
ScalaJS.d.scm_HashSet$ = new ScalaJS.ClassTypeData({
  scm_HashSet$: 0
}, false, "scala.collection.mutable.HashSet$", ScalaJS.d.scg_MutableSetFactory, {
  scm_HashSet$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_MutableSetFactory: 1,
  scg_SetFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSetFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scm_HashSet$.prototype.$classData = ScalaJS.d.scm_HashSet$;
ScalaJS.n.scm_HashSet = undefined;
ScalaJS.m.scm_HashSet = (function() {
  if ((!ScalaJS.n.scm_HashSet)) {
    ScalaJS.n.scm_HashSet = new ScalaJS.c.scm_HashSet$().init___()
  };
  return ScalaJS.n.scm_HashSet
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_IndexedSeq$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.scm_IndexedSeq$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.scm_IndexedSeq$.prototype.constructor = ScalaJS.c.scm_IndexedSeq$;
/** @constructor */
ScalaJS.h.scm_IndexedSeq$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_IndexedSeq$.prototype = ScalaJS.c.scm_IndexedSeq$.prototype;
ScalaJS.c.scm_IndexedSeq$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_ArrayBuffer().init___()
});
/*<skip>*/;
ScalaJS.is.scm_IndexedSeq$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_IndexedSeq$)))
});
ScalaJS.as.scm_IndexedSeq$ = (function(obj) {
  if ((ScalaJS.is.scm_IndexedSeq$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.IndexedSeq$")
  }
});
ScalaJS.isArrayOf.scm_IndexedSeq$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_IndexedSeq$)))
});
ScalaJS.asArrayOf.scm_IndexedSeq$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_IndexedSeq$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.IndexedSeq$;", depth)
  }
});
ScalaJS.d.scm_IndexedSeq$ = new ScalaJS.ClassTypeData({
  scm_IndexedSeq$: 0
}, false, "scala.collection.mutable.IndexedSeq$", ScalaJS.d.scg_SeqFactory, {
  scm_IndexedSeq$: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scm_IndexedSeq$.prototype.$classData = ScalaJS.d.scm_IndexedSeq$;
ScalaJS.n.scm_IndexedSeq = undefined;
ScalaJS.m.scm_IndexedSeq = (function() {
  if ((!ScalaJS.n.scm_IndexedSeq)) {
    ScalaJS.n.scm_IndexedSeq = new ScalaJS.c.scm_IndexedSeq$().init___()
  };
  return ScalaJS.n.scm_IndexedSeq
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_ListBuffer$ = (function() {
  ScalaJS.c.scg_SeqFactory.call(this)
});
ScalaJS.c.scm_ListBuffer$.prototype = new ScalaJS.h.scg_SeqFactory();
ScalaJS.c.scm_ListBuffer$.prototype.constructor = ScalaJS.c.scm_ListBuffer$;
/** @constructor */
ScalaJS.h.scm_ListBuffer$ = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_ListBuffer$.prototype = ScalaJS.c.scm_ListBuffer$.prototype;
ScalaJS.c.scm_ListBuffer$.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_GrowingBuilder().init___scg_Growable(new ScalaJS.c.scm_ListBuffer().init___())
});
/*<skip>*/;
ScalaJS.is.scm_ListBuffer$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_ListBuffer$)))
});
ScalaJS.as.scm_ListBuffer$ = (function(obj) {
  if ((ScalaJS.is.scm_ListBuffer$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.ListBuffer$")
  }
});
ScalaJS.isArrayOf.scm_ListBuffer$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_ListBuffer$)))
});
ScalaJS.asArrayOf.scm_ListBuffer$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_ListBuffer$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.ListBuffer$;", depth)
  }
});
ScalaJS.d.scm_ListBuffer$ = new ScalaJS.ClassTypeData({
  scm_ListBuffer$: 0
}, false, "scala.collection.mutable.ListBuffer$", ScalaJS.d.scg_SeqFactory, {
  scm_ListBuffer$: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scg_SeqFactory: 1,
  scg_TraversableFactory: 1,
  scg_GenericSeqCompanion: 1,
  scg_GenSeqFactory: 1,
  scg_GenTraversableFactory: 1,
  scg_GenericCompanion: 1,
  O: 1
});
ScalaJS.c.scm_ListBuffer$.prototype.$classData = ScalaJS.d.scm_ListBuffer$;
ScalaJS.n.scm_ListBuffer = undefined;
ScalaJS.m.scm_ListBuffer = (function() {
  if ((!ScalaJS.n.scm_ListBuffer)) {
    ScalaJS.n.scm_ListBuffer = new ScalaJS.c.scm_ListBuffer$().init___()
  };
  return ScalaJS.n.scm_ListBuffer
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_StringBuilder = (function() {
  ScalaJS.c.scm_AbstractSeq.call(this);
  this.underlying$5 = null
});
ScalaJS.c.scm_StringBuilder.prototype = new ScalaJS.h.scm_AbstractSeq();
ScalaJS.c.scm_StringBuilder.prototype.constructor = ScalaJS.c.scm_StringBuilder;
/** @constructor */
ScalaJS.h.scm_StringBuilder = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_StringBuilder.prototype = ScalaJS.c.scm_StringBuilder.prototype;
ScalaJS.c.scm_StringBuilder.prototype.sizeHint__I__V = (function(size) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__I__V(this, size)
});
ScalaJS.c.scm_StringBuilder.prototype.sizeHint__sc_TraversableLike__V = (function(coll) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V(this, coll)
});
ScalaJS.c.scm_StringBuilder.prototype.sizeHint__sc_TraversableLike__I__V = (function(coll, delta) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V(this, coll, delta)
});
ScalaJS.c.scm_StringBuilder.prototype.sizeHintBounded__I__sc_TraversableLike__V = (function(size, boundingColl) {
  ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V(this, size, boundingColl)
});
ScalaJS.c.scm_StringBuilder.prototype.mapResult__F1__scm_Builder = (function(f) {
  return ScalaJS.i.scm_Builder$class__mapResult__scm_Builder__F1__scm_Builder(this, f)
});
ScalaJS.c.scm_StringBuilder.prototype.$$plus$plus$eq__sc_TraversableOnce__scg_Growable = (function(xs) {
  return ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable(this, xs)
});
ScalaJS.c.scm_StringBuilder.prototype.linesWithSeparators__sc_Iterator = (function() {
  return ScalaJS.i.sci_StringLike$class__linesWithSeparators__sci_StringLike__sc_Iterator(this)
});
ScalaJS.c.scm_StringBuilder.prototype.stripMargin__C__T = (function(marginChar) {
  return ScalaJS.i.sci_StringLike$class__stripMargin__sci_StringLike__C__T(this, marginChar)
});
ScalaJS.c.scm_StringBuilder.prototype.toArray__s_reflect_ClassTag__O = (function(evidence$1) {
  return ScalaJS.i.sci_StringLike$class__toArray__sci_StringLike__s_reflect_ClassTag__O(this, evidence$1)
});
ScalaJS.c.scm_StringBuilder.prototype.scala$collection$IndexedSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_StringBuilder.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__isEmpty__sc_IndexedSeqOptimized__Z(this)
});
ScalaJS.c.scm_StringBuilder.prototype.foreach__F1__V = (function(f) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__foreach__sc_IndexedSeqOptimized__F1__V(this, f)
});
ScalaJS.c.scm_StringBuilder.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__find__sc_IndexedSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.scm_StringBuilder.prototype.foldLeft__O__F2__O = (function(z, op) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__foldLeft__sc_IndexedSeqOptimized__O__F2__O(this, z, op)
});
ScalaJS.c.scm_StringBuilder.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__sameElements__sc_IndexedSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_StringBuilder.prototype.copyToArray__O__I__I__V = (function(xs, start, len) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__copyToArray__sc_IndexedSeqOptimized__O__I__I__V(this, xs, start, len)
});
ScalaJS.c.scm_StringBuilder.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__lengthCompare__sc_IndexedSeqOptimized__I__I(this, len)
});
ScalaJS.c.scm_StringBuilder.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__segmentLength__sc_IndexedSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.scm_StringBuilder.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.scm_IndexedSeq$class__companion__scm_IndexedSeq__scg_GenericCompanion(this)
});
ScalaJS.c.scm_StringBuilder.prototype.seq__scm_IndexedSeq = (function() {
  return ScalaJS.i.scm_IndexedSeq$class__seq__scm_IndexedSeq__scm_IndexedSeq(this)
});
ScalaJS.c.scm_StringBuilder.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.scm_StringBuilder.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator(this)
});
ScalaJS.c.scm_StringBuilder.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.scm_StringBuilder.prototype.underlying__p5__jl_StringBuilder = (function() {
  return this.underlying$5
});
ScalaJS.c.scm_StringBuilder.prototype.thisCollection__scm_StringBuilder = (function() {
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.toCollection__scm_StringBuilder__scm_StringBuilder = (function(repr) {
  return repr
});
ScalaJS.c.scm_StringBuilder.prototype.newBuilder__scm_GrowingBuilder = (function() {
  return new ScalaJS.c.scm_GrowingBuilder().init___scg_Growable(new ScalaJS.c.scm_StringBuilder().init___())
});
ScalaJS.c.scm_StringBuilder.prototype.length__I = (function() {
  return this.underlying__p5__jl_StringBuilder().length__I()
});
ScalaJS.c.scm_StringBuilder.prototype.apply__I__C = (function(index) {
  return this.underlying__p5__jl_StringBuilder().charAt__I__C(index)
});
ScalaJS.c.scm_StringBuilder.prototype.substring__I__I__T = (function(start, end) {
  return this.underlying__p5__jl_StringBuilder().substring__I__I__T(start, end)
});
ScalaJS.c.scm_StringBuilder.prototype.subSequence__I__I__jl_CharSequence = (function(start, end) {
  return this.substring__I__I__T(start, end)
});
ScalaJS.c.scm_StringBuilder.prototype.$$plus$eq__C__scm_StringBuilder = (function(x) {
  this.append__C__scm_StringBuilder(x);
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.append__O__scm_StringBuilder = (function(x) {
  this.underlying__p5__jl_StringBuilder().append__T__jl_StringBuilder(ScalaJS.m.sjsr_RuntimeString().valueOf__O__T(x));
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.append__T__scm_StringBuilder = (function(s) {
  this.underlying__p5__jl_StringBuilder().append__T__jl_StringBuilder(s);
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.append__C__scm_StringBuilder = (function(x) {
  this.underlying__p5__jl_StringBuilder().append__C__jl_StringBuilder(x);
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.reverse__scm_StringBuilder = (function() {
  return new ScalaJS.c.scm_StringBuilder().init___jl_StringBuilder(new ScalaJS.c.jl_StringBuilder().init___jl_CharSequence(this.underlying__p5__jl_StringBuilder()).reverse__jl_StringBuilder())
});
ScalaJS.c.scm_StringBuilder.prototype.toString__T = (function() {
  return this.underlying__p5__jl_StringBuilder().toString__T()
});
ScalaJS.c.scm_StringBuilder.prototype.result__T = (function() {
  return this.toString__T()
});
ScalaJS.c.scm_StringBuilder.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.scm_StringBuilder.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_StringBuilder.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_StringBuilder.prototype.seq__sc_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_StringBuilder.prototype.seq__scm_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_StringBuilder.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_StringBuilder.prototype.result__O = (function() {
  return this.result__T()
});
ScalaJS.c.scm_StringBuilder.prototype.reverse__O = (function() {
  return this.reverse__scm_StringBuilder()
});
ScalaJS.c.scm_StringBuilder.prototype.$$plus$eq__O__scg_Growable = (function(elem) {
  return this.$$plus$eq__C__scm_StringBuilder(ScalaJS.uC(elem))
});
ScalaJS.c.scm_StringBuilder.prototype.$$plus$eq__O__scm_Builder = (function(elem) {
  return this.$$plus$eq__C__scm_StringBuilder(ScalaJS.uC(elem))
});
ScalaJS.c.scm_StringBuilder.prototype.apply__O__O = (function(v1) {
  return ScalaJS.bC(this.apply__I__C(ScalaJS.uI(v1)))
});
ScalaJS.c.scm_StringBuilder.prototype.apply__I__O = (function(idx) {
  return ScalaJS.bC(this.apply__I__C(idx))
});
ScalaJS.c.scm_StringBuilder.prototype.newBuilder__scm_Builder = (function() {
  return this.newBuilder__scm_GrowingBuilder()
});
ScalaJS.c.scm_StringBuilder.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__scm_StringBuilder__scm_StringBuilder(ScalaJS.as.scm_StringBuilder(repr))
});
ScalaJS.c.scm_StringBuilder.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__scm_StringBuilder()
});
ScalaJS.c.scm_StringBuilder.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__scm_StringBuilder()
});
ScalaJS.c.scm_StringBuilder.prototype.init___jl_StringBuilder = (function(underlying) {
  this.underlying$5 = underlying;
  ScalaJS.c.scm_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.scm_IndexedSeqLike$class__$init$__scm_IndexedSeqLike__V(this);
  ScalaJS.i.scm_IndexedSeq$class__$init$__scm_IndexedSeq__V(this);
  ScalaJS.i.sc_IndexedSeqOptimized$class__$init$__sc_IndexedSeqOptimized__V(this);
  ScalaJS.i.s_math_Ordered$class__$init$__s_math_Ordered__V(this);
  ScalaJS.i.sci_StringLike$class__$init$__sci_StringLike__V(this);
  ScalaJS.i.scg_Growable$class__$init$__scg_Growable__V(this);
  ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V(this);
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.init___I__T = (function(initCapacity, initValue) {
  ScalaJS.c.scm_StringBuilder.prototype.init___jl_StringBuilder.call(this, new ScalaJS.c.jl_StringBuilder().init___I(((ScalaJS.i.sjsr_RuntimeString$class__length__sjsr_RuntimeString__I(initValue) + initCapacity) | 0)).append__T__jl_StringBuilder(initValue));
  return this
});
ScalaJS.c.scm_StringBuilder.prototype.init___ = (function() {
  ScalaJS.c.scm_StringBuilder.prototype.init___I__T.call(this, 16, "");
  return this
});
/*<skip>*/;
ScalaJS.is.scm_StringBuilder = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_StringBuilder)))
});
ScalaJS.as.scm_StringBuilder = (function(obj) {
  if ((ScalaJS.is.scm_StringBuilder(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.StringBuilder")
  }
});
ScalaJS.isArrayOf.scm_StringBuilder = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_StringBuilder)))
});
ScalaJS.asArrayOf.scm_StringBuilder = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_StringBuilder(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.StringBuilder;", depth)
  }
});
ScalaJS.d.scm_StringBuilder = new ScalaJS.ClassTypeData({
  scm_StringBuilder: 0
}, false, "scala.collection.mutable.StringBuilder", ScalaJS.d.scm_AbstractSeq, {
  scm_StringBuilder: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_Builder: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  sci_StringLike: 1,
  s_math_Ordered: 1,
  jl_Comparable: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  jl_CharSequence: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_StringBuilder.prototype.$classData = ScalaJS.d.scm_StringBuilder;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray = (function() {
  ScalaJS.c.scm_AbstractSeq.call(this)
});
ScalaJS.c.scm_WrappedArray.prototype = new ScalaJS.h.scm_AbstractSeq();
ScalaJS.c.scm_WrappedArray.prototype.constructor = ScalaJS.c.scm_WrappedArray;
/** @constructor */
ScalaJS.h.scm_WrappedArray = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray.prototype = ScalaJS.c.scm_WrappedArray.prototype;
ScalaJS.c.scm_WrappedArray.prototype.scala$collection$IndexedSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_WrappedArray.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__isEmpty__sc_IndexedSeqOptimized__Z(this)
});
ScalaJS.c.scm_WrappedArray.prototype.foreach__F1__V = (function(f) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__foreach__sc_IndexedSeqOptimized__F1__V(this, f)
});
ScalaJS.c.scm_WrappedArray.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__find__sc_IndexedSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.scm_WrappedArray.prototype.foldLeft__O__F2__O = (function(z, op) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__foldLeft__sc_IndexedSeqOptimized__O__F2__O(this, z, op)
});
ScalaJS.c.scm_WrappedArray.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__sameElements__sc_IndexedSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_WrappedArray.prototype.copyToArray__O__I__I__V = (function(xs, start, len) {
  ScalaJS.i.sc_IndexedSeqOptimized$class__copyToArray__sc_IndexedSeqOptimized__O__I__I__V(this, xs, start, len)
});
ScalaJS.c.scm_WrappedArray.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__lengthCompare__sc_IndexedSeqOptimized__I__I(this, len)
});
ScalaJS.c.scm_WrappedArray.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__segmentLength__sc_IndexedSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.scm_WrappedArray.prototype.reverse__O = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__reverse__sc_IndexedSeqOptimized__O(this)
});
ScalaJS.c.scm_WrappedArray.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.i.scm_IndexedSeq$class__companion__scm_IndexedSeq__scg_GenericCompanion(this)
});
ScalaJS.c.scm_WrappedArray.prototype.seq__scm_IndexedSeq = (function() {
  return ScalaJS.i.scm_IndexedSeq$class__seq__scm_IndexedSeq__scm_IndexedSeq(this)
});
ScalaJS.c.scm_WrappedArray.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.scm_WrappedArray.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator(this)
});
ScalaJS.c.scm_WrappedArray.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.scm_WrappedArray.prototype.thisCollection__scm_WrappedArray = (function() {
  return this
});
ScalaJS.c.scm_WrappedArray.prototype.toCollection__scm_WrappedArray__scm_WrappedArray = (function(repr) {
  return repr
});
ScalaJS.c.scm_WrappedArray.prototype.elementClass__p5__jl_Class = (function() {
  return ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(ScalaJS.objectGetClass(this.array__O()))
});
ScalaJS.c.scm_WrappedArray.prototype.toArray__s_reflect_ClassTag__O = (function(evidence$1) {
  var thatElementClass = ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(ScalaJS.m.s_Predef().implicitly__O__O(evidence$1));
  if ((this.elementClass__p5__jl_Class() === thatElementClass)) {
    return this.array__O()
  } else {
    return ScalaJS.i.sc_TraversableOnce$class__toArray__sc_TraversableOnce__s_reflect_ClassTag__O(this, evidence$1)
  }
});
ScalaJS.c.scm_WrappedArray.prototype.stringPrefix__T = (function() {
  return "WrappedArray"
});
ScalaJS.c.scm_WrappedArray.prototype.newBuilder__scm_Builder = (function() {
  return new ScalaJS.c.scm_WrappedArrayBuilder().init___s_reflect_ClassTag(this.elemTag__s_reflect_ClassTag())
});
ScalaJS.c.scm_WrappedArray.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.scm_WrappedArray.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_WrappedArray.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_WrappedArray.prototype.seq__sc_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_WrappedArray.prototype.seq__scm_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_WrappedArray.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_WrappedArray.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__scm_WrappedArray__scm_WrappedArray(ScalaJS.as.scm_WrappedArray(repr))
});
ScalaJS.c.scm_WrappedArray.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__scm_WrappedArray()
});
ScalaJS.c.scm_WrappedArray.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__scm_WrappedArray()
});
ScalaJS.c.scm_WrappedArray.prototype.init___ = (function() {
  ScalaJS.c.scm_AbstractSeq.prototype.init___.call(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.scm_IndexedSeqLike$class__$init$__scm_IndexedSeqLike__V(this);
  ScalaJS.i.scm_IndexedSeq$class__$init$__scm_IndexedSeq__V(this);
  ScalaJS.i.sc_IndexedSeqOptimized$class__$init$__sc_IndexedSeqOptimized__V(this);
  ScalaJS.i.scm_ArrayLike$class__$init$__scm_ArrayLike__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray)))
});
ScalaJS.as.scm_WrappedArray = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray)))
});
ScalaJS.asArrayOf.scm_WrappedArray = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray;", depth)
  }
});
ScalaJS.d.scm_WrappedArray = new ScalaJS.ClassTypeData({
  scm_WrappedArray: 0
}, false, "scala.collection.mutable.WrappedArray", ScalaJS.d.scm_AbstractSeq, {
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray.prototype.$classData = ScalaJS.d.scm_WrappedArray;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView = (function() {
  ScalaJS.c.Lorg_denigma_views_ListView.call(this);
  this.path$6 = null;
  this.fromFuture$6 = null;
  this.menu$6 = null;
  this.items$6 = null;
  this.tags$6 = null;
  this.strings$6 = null;
  this.bools$6 = null;
  this.mouseEvents$6 = null;
  this.lists$6 = null;
  this.bitmap$0$6 = 0
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype = new ScalaJS.h.Lorg_denigma_views_ListView();
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_MenuView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.tags$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 1) === 0)) {
    this.tags$6 = this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$1().init___Lorg_denigma_binding_frontend_MenuView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 1)
  };
  return this.tags$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.strings$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 2) === 0)) {
    this.strings$6 = this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$2().init___Lorg_denigma_binding_frontend_MenuView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 2)
  };
  return this.strings$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.bools$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 4) === 0)) {
    this.bools$6 = this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$3().init___Lorg_denigma_binding_frontend_MenuView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 4)
  };
  return this.bools$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.mouseEvents$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 8) === 0)) {
    this.mouseEvents$6 = this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$4().init___Lorg_denigma_binding_frontend_MenuView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 8)
  };
  return this.mouseEvents$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.lists$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 16) === 0)) {
    this.lists$6 = this.extractListRx__O__Lorg_denigma_binding_macroses_ListRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anon$5().init___Lorg_denigma_binding_frontend_MenuView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 16)
  };
  return this.lists$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.futureData__F1__s_concurrent_Future = (function(getFuture) {
  return ScalaJS.i.Lorg_denigma_views_RemoteView$class__futureData__Lorg_denigma_views_RemoteView__F1__s_concurrent_Future(this, getFuture)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.org$denigma$binding$frontend$MenuView$$super$bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  ScalaJS.c.Lorg_denigma_views_ListView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V.call(this, el)
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.path__T = (function() {
  return this.path$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.fromFuture__F1 = (function() {
  return this.fromFuture$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.menu__Lrx_core_Var = (function() {
  return this.menu$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.items__Lrx_core_Rx = (function() {
  return this.items$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.bindView__Lorg_scalajs_dom_HTMLElement__V = (function(el) {
  var futureMenu = this.futureData__F1__s_concurrent_Future(this.fromFuture__F1());
  futureMenu.onComplete__F1__s_concurrent_ExecutionContext__V(new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anonfun$bindView$1().init___Lorg_denigma_binding_frontend_MenuView__Lorg_scalajs_dom_HTMLElement(this, el), ScalaJS.m.sjs_concurrent_JSExecutionContext$Implicits().queue__s_concurrent_ExecutionContext())
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.tags__sci_Map = (function() {
  if (((this.bitmap$0$6 & 1) === 0)) {
    return this.tags$lzycompute__p6__sci_Map()
  } else {
    return this.tags$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.strings__sci_Map = (function() {
  if (((this.bitmap$0$6 & 2) === 0)) {
    return this.strings$lzycompute__p6__sci_Map()
  } else {
    return this.strings$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.bools__sci_Map = (function() {
  if (((this.bitmap$0$6 & 4) === 0)) {
    return this.bools$lzycompute__p6__sci_Map()
  } else {
    return this.bools$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.mouseEvents__sci_Map = (function() {
  if (((this.bitmap$0$6 & 8) === 0)) {
    return this.mouseEvents$lzycompute__p6__sci_Map()
  } else {
    return this.mouseEvents$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.lists__sci_Map = (function() {
  if (((this.bitmap$0$6 & 16) === 0)) {
    return this.lists$lzycompute__p6__sci_Map()
  } else {
    return this.lists$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(el, params) {
  ScalaJS.c.Lorg_denigma_views_ListView.prototype.init___T__Lorg_scalajs_dom_HTMLElement__sci_Map.call(this, "menu", el, params);
  ScalaJS.i.Lorg_denigma_views_RemoteView$class__$init$__Lorg_denigma_views_RemoteView__V(this);
  this.path$6 = ScalaJS.as.T(params.get__O__s_Option("path").map__F1__s_Option(new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(x$1$2) {
      var x$1 = ScalaJS.as.O(x$1$2);
      return ScalaJS.objectToString(x$1)
    })
  })())).getOrElse__F0__O(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return "/menu/"
    })
  })())));
  this.fromFuture$6 = new ScalaJS.c.sjsr_AnonFunction1().init___sjs_js_Function1((function() {
    return (function(str$2) {
      var str = ScalaJS.as.T(str$2);
      ScalaJS.m.Lmodels_RegisterPicklers().registerPicklers__V();
      return ScalaJS.m.Lorg_denigma_extensions_sq().get__T__I__sc_Seq__Z__s_concurrent_Future(ScalaJS.m.Lorg_denigma_extensions_sq().withHost__T__T(str), ScalaJS.m.Lorg_denigma_extensions_sq().get$default$2__I(), ScalaJS.m.Lorg_denigma_extensions_sq().get$default$3__sc_Seq(), ScalaJS.m.Lorg_denigma_extensions_sq().get$default$4__Z())
    })
  })());
  this.menu$6 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return new ScalaJS.c.Lmodels_Menu().init___Lorg_scalax_semweb_rdf_IRI__T__sci_List(new ScalaJS.c.Lorg_scalax_semweb_rdf_IRI().init___T(new ScalaJS.c.s_StringContext().init___sc_Seq(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T.getArrayOf(), ["http://", ""]), 1))).s__sc_Seq__T(ScalaJS.m.s_Predef().genericWrapArray__O__scm_WrappedArray(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.O.getArrayOf(), [ScalaJS.as.T(ScalaJS.g["window"]["location"]["host"])])))), ScalaJS.as.T(ScalaJS.g["window"]["location"]["host"]), ScalaJS.m.sci_List().empty__sci_List())
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  this.items$6 = ScalaJS.m.Lrx_package().Rx__Lrx_core_Rx$().apply__F0__Lrx_core_Rx(new ScalaJS.c.Lorg_denigma_binding_frontend_MenuView$$anonfun$5().init___Lorg_denigma_binding_frontend_MenuView(this));
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_MenuView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_MenuView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_MenuView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_MenuView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.MenuView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_MenuView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_MenuView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_MenuView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.MenuView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_MenuView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_MenuView: 0
}, false, "org.denigma.binding.frontend.MenuView", ScalaJS.d.Lorg_denigma_views_ListView, {
  Lorg_denigma_binding_frontend_MenuView: 1,
  Lorg_denigma_views_RemoteView: 1,
  Lorg_denigma_views_Remote: 1,
  Lorg_denigma_views_ListView: 1,
  Lorg_denigma_binding_CollectionBinding: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_MenuView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_MenuView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView = (function() {
  ScalaJS.c.Lorg_denigma_views_ListView.call(this);
  this.items$6 = null;
  this.lists$6 = null;
  this.tags$6 = null;
  this.strings$6 = null;
  this.bools$6 = null;
  this.mouseEvents$6 = null;
  this.bitmap$0$6 = 0
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype = new ScalaJS.h.Lorg_denigma_views_ListView();
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.constructor = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView;
/** @constructor */
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_binding_frontend_tests_LongListView.prototype = ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype;
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.lists$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 1) === 0)) {
    this.lists$6 = this.extractListRx__O__Lorg_denigma_binding_macroses_ListRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$1().init___Lorg_denigma_binding_frontend_tests_LongListView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 1)
  };
  return this.lists$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.tags$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 2) === 0)) {
    this.tags$6 = this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$2().init___Lorg_denigma_binding_frontend_tests_LongListView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 2)
  };
  return this.tags$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.strings$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 4) === 0)) {
    this.strings$6 = this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$3().init___Lorg_denigma_binding_frontend_tests_LongListView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 4)
  };
  return this.strings$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.bools$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 8) === 0)) {
    this.bools$6 = this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$4().init___Lorg_denigma_binding_frontend_tests_LongListView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 8)
  };
  return this.bools$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.mouseEvents$lzycompute__p6__sci_Map = (function() {
  if (((this.bitmap$0$6 & 16) === 0)) {
    this.mouseEvents$6 = this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView$$anon$5().init___Lorg_denigma_binding_frontend_tests_LongListView(this));
    this.bitmap$0$6 = (this.bitmap$0$6 | 16)
  };
  return this.mouseEvents$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.items__Lrx_core_Var = (function() {
  return this.items$6
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.lists__sci_Map = (function() {
  if (((this.bitmap$0$6 & 1) === 0)) {
    return this.lists$lzycompute__p6__sci_Map()
  } else {
    return this.lists$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.tags__sci_Map = (function() {
  if (((this.bitmap$0$6 & 2) === 0)) {
    return this.tags$lzycompute__p6__sci_Map()
  } else {
    return this.tags$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.strings__sci_Map = (function() {
  if (((this.bitmap$0$6 & 4) === 0)) {
    return this.strings$lzycompute__p6__sci_Map()
  } else {
    return this.strings$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.bools__sci_Map = (function() {
  if (((this.bitmap$0$6 & 8) === 0)) {
    return this.bools$lzycompute__p6__sci_Map()
  } else {
    return this.bools$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.mouseEvents__sci_Map = (function() {
  if (((this.bitmap$0$6 & 16) === 0)) {
    return this.mouseEvents$lzycompute__p6__sci_Map()
  } else {
    return this.mouseEvents$6
  }
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(element, params) {
  ScalaJS.c.Lorg_denigma_views_ListView.prototype.init___T__Lorg_scalajs_dom_HTMLElement__sci_Map.call(this, "lists", element, params);
  this.items$6 = ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply__F0__T__Lrx_core_Var(new ScalaJS.c.sjsr_AnonFunction0().init___sjs_js_Function0((function() {
    return (function() {
      return ScalaJS.m.sci_List().apply__sc_Seq__sci_List(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.sci_Map.getArrayOf(), [ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("prop"), "value1")]), 1)))), ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("prop"), "value2")]), 1)))), ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("prop"), "value3")]), 1)))), ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("prop"), "value4")]), 1)))), ScalaJS.as.sci_Map(ScalaJS.m.sci_Map().apply__sc_Seq__sc_GenMap(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [ScalaJS.m.s_Predef$ArrowAssoc().$$minus$greater$extension__O__O__T2(ScalaJS.m.s_Predef().any2ArrowAssoc__O__O("prop"), "value5")]), 1))))]), 1)))
    })
  })()), ScalaJS.m.Lrx_package().Var__Lrx_core_Var$().apply$default$2__T());
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_binding_frontend_tests_LongListView)))
});
ScalaJS.as.Lorg_denigma_binding_frontend_tests_LongListView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_binding_frontend_tests_LongListView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.binding.frontend.tests.LongListView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_binding_frontend_tests_LongListView)))
});
ScalaJS.asArrayOf.Lorg_denigma_binding_frontend_tests_LongListView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_binding_frontend_tests_LongListView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.binding.frontend.tests.LongListView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView = new ScalaJS.ClassTypeData({
  Lorg_denigma_binding_frontend_tests_LongListView: 0
}, false, "org.denigma.binding.frontend.tests.LongListView", ScalaJS.d.Lorg_denigma_views_ListView, {
  Lorg_denigma_binding_frontend_tests_LongListView: 1,
  Lorg_denigma_views_ListView: 1,
  Lorg_denigma_binding_CollectionBinding: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_binding_frontend_tests_LongListView.prototype.$classData = ScalaJS.d.Lorg_denigma_binding_frontend_tests_LongListView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView = (function() {
  ScalaJS.c.Lorg_denigma_views_MapView.call(this)
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype = new ScalaJS.h.Lorg_denigma_views_MapView();
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.constructor = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView;
/** @constructor */
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView = (function() {
  /*<skip>*/
});
ScalaJS.h.Lorg_denigma_views_ListView$JustMapView.prototype = ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype;
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.tags__sci_Map = (function() {
  return this.extractTagRx__O__Lorg_denigma_binding_macroses_TagRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$1().init___Lorg_denigma_views_ListView$JustMapView(this))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.strings__sci_Map = (function() {
  return this.extractStringRx__O__Lorg_denigma_binding_macroses_StringRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$2().init___Lorg_denigma_views_ListView$JustMapView(this))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.bools__sci_Map = (function() {
  return this.extractBooleanRx__O__Lorg_denigma_binding_macroses_BooleanRxMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$3().init___Lorg_denigma_views_ListView$JustMapView(this))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.mouseEvents__sci_Map = (function() {
  return this.extractMouseEvens__O__Lorg_denigma_binding_macroses_MouseEventMap__sci_Map(this, new ScalaJS.c.Lorg_denigma_views_ListView$JustMapView$$anon$4().init___Lorg_denigma_views_ListView$JustMapView(this))
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.init___Lorg_scalajs_dom_HTMLElement__sci_Map = (function(el, props) {
  ScalaJS.c.Lorg_denigma_views_MapView.prototype.init___T__Lorg_scalajs_dom_HTMLElement__sci_Map.call(this, "justmapview", el, props);
  return this
});
/*<skip>*/;
ScalaJS.is.Lorg_denigma_views_ListView$JustMapView = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.Lorg_denigma_views_ListView$JustMapView)))
});
ScalaJS.as.Lorg_denigma_views_ListView$JustMapView = (function(obj) {
  if ((ScalaJS.is.Lorg_denigma_views_ListView$JustMapView(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "org.denigma.views.ListView$JustMapView")
  }
});
ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.Lorg_denigma_views_ListView$JustMapView)))
});
ScalaJS.asArrayOf.Lorg_denigma_views_ListView$JustMapView = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.Lorg_denigma_views_ListView$JustMapView(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lorg.denigma.views.ListView$JustMapView;", depth)
  }
});
ScalaJS.d.Lorg_denigma_views_ListView$JustMapView = new ScalaJS.ClassTypeData({
  Lorg_denigma_views_ListView$JustMapView: 0
}, false, "org.denigma.views.ListView$JustMapView", ScalaJS.d.Lorg_denigma_views_MapView, {
  Lorg_denigma_views_ListView$JustMapView: 1,
  Lorg_denigma_views_MapView: 1,
  Lorg_denigma_views_OrdinaryView: 1,
  Lorg_denigma_binding_EventBinding: 1,
  Lorg_denigma_binding_ScalaTagsBinder: 1,
  Lorg_denigma_views_OrganizedView: 1,
  Lorg_denigma_binding_GeneralBinding: 1,
  Lorg_denigma_binding_PropertyBinder: 1,
  Lorg_denigma_binding_ClassBinder: 1,
  Lorg_denigma_binding_VisibilityBinder: 1,
  Lorg_denigma_views_BindingView: 1,
  Lorg_denigma_binding_JustBinding: 1,
  O: 1
});
ScalaJS.c.Lorg_denigma_views_ListView$JustMapView.prototype.$classData = ScalaJS.d.Lorg_denigma_views_ListView$JustMapView;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_FormatFlagsConversionMismatchException = (function() {
  ScalaJS.c.ju_IllegalFormatException.call(this);
  this.c$6 = 0;
  this.f$6 = null
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype = new ScalaJS.h.ju_IllegalFormatException();
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.constructor = ScalaJS.c.ju_FormatFlagsConversionMismatchException;
/** @constructor */
ScalaJS.h.ju_FormatFlagsConversionMismatchException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_FormatFlagsConversionMismatchException.prototype = ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype;
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.c__p6__C = (function() {
  return this.c$6
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.f__p6__T = (function() {
  return this.f$6
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.f$und$eq__p6__T__V = (function(x$1) {
  this.f$6 = x$1
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.getMessage__T = (function() {
  return ((("Conversion = " + ScalaJS.bC(this.c__p6__C())) + ", Flags = ") + this.f__p6__T())
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.init___C = (function(c) {
  this.c$6 = c;
  ScalaJS.c.ju_IllegalFormatException.prototype.init___.call(this);
  this.f$6 = null;
  return this
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.init___T__C = (function(f, c) {
  ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.init___C.call(this, c);
  if ((f === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  };
  this.f$und$eq__p6__T__V(f);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_FormatFlagsConversionMismatchException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_FormatFlagsConversionMismatchException)))
});
ScalaJS.as.ju_FormatFlagsConversionMismatchException = (function(obj) {
  if ((ScalaJS.is.ju_FormatFlagsConversionMismatchException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.FormatFlagsConversionMismatchException")
  }
});
ScalaJS.isArrayOf.ju_FormatFlagsConversionMismatchException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_FormatFlagsConversionMismatchException)))
});
ScalaJS.asArrayOf.ju_FormatFlagsConversionMismatchException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_FormatFlagsConversionMismatchException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.FormatFlagsConversionMismatchException;", depth)
  }
});
ScalaJS.d.ju_FormatFlagsConversionMismatchException = new ScalaJS.ClassTypeData({
  ju_FormatFlagsConversionMismatchException: 0
}, false, "java.util.FormatFlagsConversionMismatchException", ScalaJS.d.ju_IllegalFormatException, {
  ju_FormatFlagsConversionMismatchException: 1,
  ju_IllegalFormatException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_FormatFlagsConversionMismatchException.prototype.$classData = ScalaJS.d.ju_FormatFlagsConversionMismatchException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_IllegalFormatFlagsException = (function() {
  ScalaJS.c.ju_IllegalFormatException.call(this);
  this.flags$6 = null
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype = new ScalaJS.h.ju_IllegalFormatException();
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.constructor = ScalaJS.c.ju_IllegalFormatFlagsException;
/** @constructor */
ScalaJS.h.ju_IllegalFormatFlagsException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_IllegalFormatFlagsException.prototype = ScalaJS.c.ju_IllegalFormatFlagsException.prototype;
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.flags__p6__T = (function() {
  return this.flags$6
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.flags$und$eq__p6__T__V = (function(x$1) {
  this.flags$6 = x$1
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.getMessage__T = (function() {
  return (("Flags = '" + this.flags__p6__T()) + "'")
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.init___ = (function() {
  ScalaJS.c.ju_IllegalFormatException.prototype.init___.call(this);
  this.flags$6 = null;
  return this
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.init___T = (function(f) {
  ScalaJS.c.ju_IllegalFormatFlagsException.prototype.init___.call(this);
  if ((f === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  };
  this.flags$und$eq__p6__T__V(f);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_IllegalFormatFlagsException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_IllegalFormatFlagsException)))
});
ScalaJS.as.ju_IllegalFormatFlagsException = (function(obj) {
  if ((ScalaJS.is.ju_IllegalFormatFlagsException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.IllegalFormatFlagsException")
  }
});
ScalaJS.isArrayOf.ju_IllegalFormatFlagsException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_IllegalFormatFlagsException)))
});
ScalaJS.asArrayOf.ju_IllegalFormatFlagsException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_IllegalFormatFlagsException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.IllegalFormatFlagsException;", depth)
  }
});
ScalaJS.d.ju_IllegalFormatFlagsException = new ScalaJS.ClassTypeData({
  ju_IllegalFormatFlagsException: 0
}, false, "java.util.IllegalFormatFlagsException", ScalaJS.d.ju_IllegalFormatException, {
  ju_IllegalFormatFlagsException: 1,
  ju_IllegalFormatException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_IllegalFormatFlagsException.prototype.$classData = ScalaJS.d.ju_IllegalFormatFlagsException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.ju_MissingFormatArgumentException = (function() {
  ScalaJS.c.ju_IllegalFormatException.call(this);
  this.s$6 = null
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype = new ScalaJS.h.ju_IllegalFormatException();
ScalaJS.c.ju_MissingFormatArgumentException.prototype.constructor = ScalaJS.c.ju_MissingFormatArgumentException;
/** @constructor */
ScalaJS.h.ju_MissingFormatArgumentException = (function() {
  /*<skip>*/
});
ScalaJS.h.ju_MissingFormatArgumentException.prototype = ScalaJS.c.ju_MissingFormatArgumentException.prototype;
ScalaJS.c.ju_MissingFormatArgumentException.prototype.s__p6__T = (function() {
  return this.s$6
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype.s$und$eq__p6__T__V = (function(x$1) {
  this.s$6 = x$1
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype.getMessage__T = (function() {
  return (("Format specifier '" + this.s__p6__T()) + "'")
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype.init___ = (function() {
  ScalaJS.c.ju_IllegalFormatException.prototype.init___.call(this);
  this.s$6 = null;
  return this
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype.init___T = (function(s) {
  ScalaJS.c.ju_MissingFormatArgumentException.prototype.init___.call(this);
  if ((s === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  };
  this.s$und$eq__p6__T__V(s);
  return this
});
/*<skip>*/;
ScalaJS.is.ju_MissingFormatArgumentException = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.ju_MissingFormatArgumentException)))
});
ScalaJS.as.ju_MissingFormatArgumentException = (function(obj) {
  if ((ScalaJS.is.ju_MissingFormatArgumentException(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "java.util.MissingFormatArgumentException")
  }
});
ScalaJS.isArrayOf.ju_MissingFormatArgumentException = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.ju_MissingFormatArgumentException)))
});
ScalaJS.asArrayOf.ju_MissingFormatArgumentException = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.ju_MissingFormatArgumentException(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Ljava.util.MissingFormatArgumentException;", depth)
  }
});
ScalaJS.d.ju_MissingFormatArgumentException = new ScalaJS.ClassTypeData({
  ju_MissingFormatArgumentException: 0
}, false, "java.util.MissingFormatArgumentException", ScalaJS.d.ju_IllegalFormatException, {
  ju_MissingFormatArgumentException: 1,
  ju_IllegalFormatException: 1,
  jl_IllegalArgumentException: 1,
  jl_RuntimeException: 1,
  jl_Exception: 1,
  jl_Throwable: 1,
  Ljava_io_Serializable: 1,
  O: 1
});
ScalaJS.c.ju_MissingFormatArgumentException.prototype.$classData = ScalaJS.d.ju_MissingFormatArgumentException;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$EmptyHashMap$ = (function() {
  ScalaJS.c.sci_HashMap.call(this)
});
ScalaJS.c.sci_HashMap$EmptyHashMap$.prototype = new ScalaJS.h.sci_HashMap();
ScalaJS.c.sci_HashMap$EmptyHashMap$.prototype.constructor = ScalaJS.c.sci_HashMap$EmptyHashMap$;
/** @constructor */
ScalaJS.h.sci_HashMap$EmptyHashMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$EmptyHashMap$.prototype = ScalaJS.c.sci_HashMap$EmptyHashMap$.prototype;
/*<skip>*/;
ScalaJS.is.sci_HashMap$EmptyHashMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$EmptyHashMap$)))
});
ScalaJS.as.sci_HashMap$EmptyHashMap$ = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$EmptyHashMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$EmptyHashMap$")
  }
});
ScalaJS.isArrayOf.sci_HashMap$EmptyHashMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$EmptyHashMap$)))
});
ScalaJS.asArrayOf.sci_HashMap$EmptyHashMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$EmptyHashMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$EmptyHashMap$;", depth)
  }
});
ScalaJS.d.sci_HashMap$EmptyHashMap$ = new ScalaJS.ClassTypeData({
  sci_HashMap$EmptyHashMap$: 0
}, false, "scala.collection.immutable.HashMap$EmptyHashMap$", ScalaJS.d.sci_HashMap, {
  sci_HashMap$EmptyHashMap$: 1,
  sci_HashMap: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$EmptyHashMap$.prototype.$classData = ScalaJS.d.sci_HashMap$EmptyHashMap$;
ScalaJS.n.sci_HashMap$EmptyHashMap = undefined;
ScalaJS.m.sci_HashMap$EmptyHashMap = (function() {
  if ((!ScalaJS.n.sci_HashMap$EmptyHashMap)) {
    ScalaJS.n.sci_HashMap$EmptyHashMap = new ScalaJS.c.sci_HashMap$EmptyHashMap$().init___()
  };
  return ScalaJS.n.sci_HashMap$EmptyHashMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$HashMap1 = (function() {
  ScalaJS.c.sci_HashMap.call(this);
  this.key$6 = null;
  this.hash$6 = 0;
  this.value$6 = null;
  this.kv$6 = null
});
ScalaJS.c.sci_HashMap$HashMap1.prototype = new ScalaJS.h.sci_HashMap();
ScalaJS.c.sci_HashMap$HashMap1.prototype.constructor = ScalaJS.c.sci_HashMap$HashMap1;
/** @constructor */
ScalaJS.h.sci_HashMap$HashMap1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$HashMap1.prototype = ScalaJS.c.sci_HashMap$HashMap1.prototype;
ScalaJS.c.sci_HashMap$HashMap1.prototype.key__O = (function() {
  return this.key$6
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.hash__I = (function() {
  return this.hash$6
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.value__O = (function() {
  return this.value$6
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.kv__T2 = (function() {
  return this.kv$6
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.kv$und$eq__T2__V = (function(x$1) {
  this.kv$6 = x$1
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.size__I = (function() {
  return 1
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.get0__O__I__I__s_Option = (function(key, hash, level) {
  if (((hash === this.hash__I()) && ScalaJS.anyEqEq(key, this.key__O()))) {
    return new ScalaJS.c.s_Some().init___O(this.value__O())
  } else {
    return ScalaJS.m.s_None()
  }
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap = (function(key, hash, level, value, kv, merger) {
  if (((hash === this.hash__I()) && ScalaJS.anyEqEq(key, this.key__O()))) {
    if ((merger === null)) {
      if ((this.value__O() === value)) {
        return this
      } else {
        return new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(key, hash, value, kv)
      }
    } else {
      var nkv = merger.apply__T2__T2__T2(this.kv__T2(), kv);
      return new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(nkv.$$und1__O(), hash, nkv.$$und2__O(), nkv)
    }
  } else {
    if ((hash !== this.hash__I())) {
      var that = new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(key, hash, value, kv);
      return ScalaJS.m.sci_HashMap().scala$collection$immutable$HashMap$$makeHashTrieMap__I__sci_HashMap__I__sci_HashMap__I__I__sci_HashMap$HashTrieMap(this.hash__I(), this, hash, that, level, 2)
    } else {
      return new ScalaJS.c.sci_HashMap$HashMapCollision1().init___I__sci_ListMap(hash, ScalaJS.m.sci_ListMap().empty__sci_ListMap().updated__O__O__sci_ListMap(this.key__O(), this.value__O()).updated__O__O__sci_ListMap(key, value))
    }
  }
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.removed0__O__I__I__sci_HashMap = (function(key, hash, level) {
  if (((hash === this.hash__I()) && ScalaJS.anyEqEq(key, this.key__O()))) {
    return ScalaJS.m.sci_HashMap().empty__sci_HashMap()
  } else {
    return this
  }
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.m.sc_Iterator().apply__sc_Seq__sc_Iterator(ScalaJS.m.s_Predef().wrapRefArray__AO__scm_WrappedArray(ScalaJS.asArrayOf.O(ScalaJS.makeNativeArrayWrapper(ScalaJS.d.T2.getArrayOf(), [this.ensurePair__T2()]), 1)))
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.foreach__F1__V = (function(f) {
  f.apply__O__O(this.ensurePair__T2())
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.ensurePair__T2 = (function() {
  if ((this.kv__T2() !== null)) {
    return this.kv__T2()
  } else {
    this.kv$und$eq__T2__V(new ScalaJS.c.T2().init___O__O(this.key__O(), this.value__O()));
    return this.kv__T2()
  }
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.init___O__I__O__T2 = (function(key, hash, value, kv) {
  this.key$6 = key;
  this.hash$6 = hash;
  this.value$6 = value;
  this.kv$6 = kv;
  ScalaJS.c.sci_HashMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap$HashMap1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$HashMap1)))
});
ScalaJS.as.sci_HashMap$HashMap1 = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$HashMap1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$HashMap1")
  }
});
ScalaJS.isArrayOf.sci_HashMap$HashMap1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$HashMap1)))
});
ScalaJS.asArrayOf.sci_HashMap$HashMap1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$HashMap1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$HashMap1;", depth)
  }
});
ScalaJS.d.sci_HashMap$HashMap1 = new ScalaJS.ClassTypeData({
  sci_HashMap$HashMap1: 0
}, false, "scala.collection.immutable.HashMap$HashMap1", ScalaJS.d.sci_HashMap, {
  sci_HashMap$HashMap1: 1,
  sci_HashMap: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$HashMap1.prototype.$classData = ScalaJS.d.sci_HashMap$HashMap1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$HashMapCollision1 = (function() {
  ScalaJS.c.sci_HashMap.call(this);
  this.hash$6 = 0;
  this.kvs$6 = null
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype = new ScalaJS.h.sci_HashMap();
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.constructor = ScalaJS.c.sci_HashMap$HashMapCollision1;
/** @constructor */
ScalaJS.h.sci_HashMap$HashMapCollision1 = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$HashMapCollision1.prototype = ScalaJS.c.sci_HashMap$HashMapCollision1.prototype;
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.hash__I = (function() {
  return this.hash$6
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.kvs__sci_ListMap = (function() {
  return this.kvs$6
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.size__I = (function() {
  return this.kvs__sci_ListMap().size__I()
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.get0__O__I__I__s_Option = (function(key, hash, level) {
  if ((hash === this.hash__I())) {
    return this.kvs__sci_ListMap().get__O__s_Option(key)
  } else {
    return ScalaJS.m.s_None()
  }
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap = (function(key, hash, level, value, kv, merger) {
  if ((hash === this.hash__I())) {
    if (((merger === null) || (!this.kvs__sci_ListMap().contains__O__Z(key)))) {
      return new ScalaJS.c.sci_HashMap$HashMapCollision1().init___I__sci_ListMap(hash, this.kvs__sci_ListMap().updated__O__O__sci_ListMap(key, value))
    } else {
      return new ScalaJS.c.sci_HashMap$HashMapCollision1().init___I__sci_ListMap(hash, this.kvs__sci_ListMap().$$plus__T2__sci_ListMap(merger.apply__T2__T2__T2(new ScalaJS.c.T2().init___O__O(key, this.kvs__sci_ListMap().apply__O__O(key)), kv)))
    }
  } else {
    var that = new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(key, hash, value, kv);
    return ScalaJS.m.sci_HashMap().scala$collection$immutable$HashMap$$makeHashTrieMap__I__sci_HashMap__I__sci_HashMap__I__I__sci_HashMap$HashTrieMap(this.hash__I(), this, hash, that, level, ((this.size__I() + 1) | 0))
  }
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.removed0__O__I__I__sci_HashMap = (function(key, hash, level) {
  if ((hash === this.hash__I())) {
    var kvs1 = this.kvs__sci_ListMap().$$minus__O__sci_ListMap(key);
    if (kvs1.isEmpty__Z()) {
      return ScalaJS.m.sci_HashMap().empty__sci_HashMap()
    } else {
      if (kvs1.tail__sci_ListMap().isEmpty__Z()) {
        var kv = ScalaJS.as.T2(kvs1.head__O());
        return new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(kv.$$und1__O(), hash, kv.$$und2__O(), kv)
      } else {
        return new ScalaJS.c.sci_HashMap$HashMapCollision1().init___I__sci_ListMap(hash, kvs1)
      }
    }
  } else {
    return this
  }
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.iterator__sc_Iterator = (function() {
  return this.kvs__sci_ListMap().iterator__sc_Iterator()
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.foreach__F1__V = (function(f) {
  this.kvs__sci_ListMap().foreach__F1__V(f)
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.init___I__sci_ListMap = (function(hash, kvs) {
  this.hash$6 = hash;
  this.kvs$6 = kvs;
  ScalaJS.c.sci_HashMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap$HashMapCollision1 = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$HashMapCollision1)))
});
ScalaJS.as.sci_HashMap$HashMapCollision1 = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$HashMapCollision1(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$HashMapCollision1")
  }
});
ScalaJS.isArrayOf.sci_HashMap$HashMapCollision1 = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$HashMapCollision1)))
});
ScalaJS.asArrayOf.sci_HashMap$HashMapCollision1 = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$HashMapCollision1(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$HashMapCollision1;", depth)
  }
});
ScalaJS.d.sci_HashMap$HashMapCollision1 = new ScalaJS.ClassTypeData({
  sci_HashMap$HashMapCollision1: 0
}, false, "scala.collection.immutable.HashMap$HashMapCollision1", ScalaJS.d.sci_HashMap, {
  sci_HashMap$HashMapCollision1: 1,
  sci_HashMap: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$HashMapCollision1.prototype.$classData = ScalaJS.d.sci_HashMap$HashMapCollision1;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_HashMap$HashTrieMap = (function() {
  ScalaJS.c.sci_HashMap.call(this);
  this.bitmap$6 = 0;
  this.elems$6 = null;
  this.size0$6 = 0
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype = new ScalaJS.h.sci_HashMap();
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.constructor = ScalaJS.c.sci_HashMap$HashTrieMap;
/** @constructor */
ScalaJS.h.sci_HashMap$HashTrieMap = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_HashMap$HashTrieMap.prototype = ScalaJS.c.sci_HashMap$HashTrieMap.prototype;
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.bitmap__I = (function() {
  return this.bitmap$6
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.elems__Asci_HashMap = (function() {
  return this.elems$6
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.size0__I = (function() {
  return this.size0$6
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.size__I = (function() {
  return this.size0__I()
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.get0__O__I__I__s_Option = (function(key, hash, level) {
  var index = (((hash >>> level) | 0) & 31);
  var mask = (1 << index);
  if ((this.bitmap__I() === -1)) {
    return this.elems__Asci_HashMap().u[(index & 31)].get0__O__I__I__s_Option(key, hash, ((level + 5) | 0))
  } else {
    if (((this.bitmap__I() & mask) !== 0)) {
      var offset = ScalaJS.m.jl_Integer().bitCount__I__I((this.bitmap__I() & ((mask - 1) | 0)));
      return this.elems__Asci_HashMap().u[offset].get0__O__I__I__s_Option(key, hash, ((level + 5) | 0))
    } else {
      return ScalaJS.m.s_None()
    }
  }
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap = (function(key, hash, level, value, kv, merger) {
  var index = (((hash >>> level) | 0) & 31);
  var mask = (1 << index);
  var offset = ScalaJS.m.jl_Integer().bitCount__I__I((this.bitmap__I() & ((mask - 1) | 0)));
  if (((this.bitmap__I() & mask) !== 0)) {
    var sub = this.elems__Asci_HashMap().u[offset];
    var subNew = sub.updated0__O__I__I__O__T2__sci_HashMap$Merger__sci_HashMap(key, hash, ((level + 5) | 0), value, kv, merger);
    if ((subNew === sub)) {
      return this
    } else {
      var elemsNew = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [this.elems__Asci_HashMap().u["length"]]);
      ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), 0, elemsNew, 0, this.elems__Asci_HashMap().u["length"]);
      elemsNew.u[offset] = subNew;
      return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I(this.bitmap__I(), elemsNew, ((this.size__I() + ((subNew.size__I() - sub.size__I()) | 0)) | 0))
    }
  } else {
    var elemsNew$2 = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [((this.elems__Asci_HashMap().u["length"] + 1) | 0)]);
    ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), 0, elemsNew$2, 0, offset);
    elemsNew$2.u[offset] = new ScalaJS.c.sci_HashMap$HashMap1().init___O__I__O__T2(key, hash, value, kv);
    ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), offset, elemsNew$2, ((offset + 1) | 0), ((this.elems__Asci_HashMap().u["length"] - offset) | 0));
    return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I((this.bitmap__I() | mask), elemsNew$2, ((this.size__I() + 1) | 0))
  }
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.removed0__O__I__I__sci_HashMap = (function(key, hash, level) {
  var index = (((hash >>> level) | 0) & 31);
  var mask = (1 << index);
  var offset = ScalaJS.m.jl_Integer().bitCount__I__I((this.bitmap__I() & ((mask - 1) | 0)));
  if (((this.bitmap__I() & mask) !== 0)) {
    var sub = this.elems__Asci_HashMap().u[offset];
    var subNew = sub.removed0__O__I__I__sci_HashMap(key, hash, ((level + 5) | 0));
    if ((subNew === sub)) {
      return this
    } else {
      if (subNew.isEmpty__Z()) {
        var bitmapNew = (this.bitmap__I() ^ mask);
        if ((bitmapNew !== 0)) {
          var elemsNew = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [((this.elems__Asci_HashMap().u["length"] - 1) | 0)]);
          ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), 0, elemsNew, 0, offset);
          ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), ((offset + 1) | 0), elemsNew, offset, ((((this.elems__Asci_HashMap().u["length"] - offset) | 0) - 1) | 0));
          var sizeNew = ((this.size__I() - sub.size__I()) | 0);
          if (((elemsNew.u["length"] === 1) && (!ScalaJS.is.sci_HashMap$HashTrieMap(elemsNew.u[0])))) {
            return elemsNew.u[0]
          } else {
            return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I(bitmapNew, elemsNew, sizeNew)
          }
        } else {
          return ScalaJS.m.sci_HashMap().empty__sci_HashMap()
        }
      } else {
        if (((this.elems__Asci_HashMap().u["length"] === 1) && (!ScalaJS.is.sci_HashMap$HashTrieMap(subNew)))) {
          return subNew
        } else {
          var elemsNew$2 = ScalaJS.newArrayObject(ScalaJS.d.sci_HashMap.getArrayOf(), [this.elems__Asci_HashMap().u["length"]]);
          ScalaJS.m.s_Array().copy__O__I__O__I__I__V(this.elems__Asci_HashMap(), 0, elemsNew$2, 0, this.elems__Asci_HashMap().u["length"]);
          elemsNew$2.u[offset] = subNew;
          var sizeNew$2 = ((this.size__I() + ((subNew.size__I() - sub.size__I()) | 0)) | 0);
          return new ScalaJS.c.sci_HashMap$HashTrieMap().init___I__Asci_HashMap__I(this.bitmap__I(), elemsNew$2, sizeNew$2)
        }
      }
    }
  } else {
    return this
  }
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.iterator__sc_Iterator = (function() {
  return new ScalaJS.c.sci_HashMap$HashTrieMap$$anon$1().init___sci_HashMap$HashTrieMap(this)
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.foreach__F1__V = (function(f) {
  var i = 0;
  while ((i < this.elems__Asci_HashMap().u["length"])) {
    this.elems__Asci_HashMap().u[i].foreach__F1__V(f);
    i = ((i + 1) | 0)
  }
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.init___I__Asci_HashMap__I = (function(bitmap, elems, size0) {
  this.bitmap$6 = bitmap;
  this.elems$6 = elems;
  this.size0$6 = size0;
  ScalaJS.c.sci_HashMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_HashMap$HashTrieMap = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_HashMap$HashTrieMap)))
});
ScalaJS.as.sci_HashMap$HashTrieMap = (function(obj) {
  if ((ScalaJS.is.sci_HashMap$HashTrieMap(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.HashMap$HashTrieMap")
  }
});
ScalaJS.isArrayOf.sci_HashMap$HashTrieMap = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_HashMap$HashTrieMap)))
});
ScalaJS.asArrayOf.sci_HashMap$HashTrieMap = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_HashMap$HashTrieMap(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.HashMap$HashTrieMap;", depth)
  }
});
ScalaJS.d.sci_HashMap$HashTrieMap = new ScalaJS.ClassTypeData({
  sci_HashMap$HashTrieMap: 0
}, false, "scala.collection.immutable.HashMap$HashTrieMap", ScalaJS.d.sci_HashMap, {
  sci_HashMap$HashTrieMap: 1,
  sci_HashMap: 1,
  sc_CustomParallelizable: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_HashMap$HashTrieMap.prototype.$classData = ScalaJS.d.sci_HashMap$HashTrieMap;
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListMap$EmptyListMap$ = (function() {
  ScalaJS.c.sci_ListMap.call(this)
});
ScalaJS.c.sci_ListMap$EmptyListMap$.prototype = new ScalaJS.h.sci_ListMap();
ScalaJS.c.sci_ListMap$EmptyListMap$.prototype.constructor = ScalaJS.c.sci_ListMap$EmptyListMap$;
/** @constructor */
ScalaJS.h.sci_ListMap$EmptyListMap$ = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListMap$EmptyListMap$.prototype = ScalaJS.c.sci_ListMap$EmptyListMap$.prototype;
/*<skip>*/;
ScalaJS.is.sci_ListMap$EmptyListMap$ = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListMap$EmptyListMap$)))
});
ScalaJS.as.sci_ListMap$EmptyListMap$ = (function(obj) {
  if ((ScalaJS.is.sci_ListMap$EmptyListMap$(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListMap$EmptyListMap$")
  }
});
ScalaJS.isArrayOf.sci_ListMap$EmptyListMap$ = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListMap$EmptyListMap$)))
});
ScalaJS.asArrayOf.sci_ListMap$EmptyListMap$ = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListMap$EmptyListMap$(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListMap$EmptyListMap$;", depth)
  }
});
ScalaJS.d.sci_ListMap$EmptyListMap$ = new ScalaJS.ClassTypeData({
  sci_ListMap$EmptyListMap$: 0
}, false, "scala.collection.immutable.ListMap$EmptyListMap$", ScalaJS.d.sci_ListMap, {
  sci_ListMap$EmptyListMap$: 1,
  sci_ListMap: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListMap$EmptyListMap$.prototype.$classData = ScalaJS.d.sci_ListMap$EmptyListMap$;
ScalaJS.n.sci_ListMap$EmptyListMap = undefined;
ScalaJS.m.sci_ListMap$EmptyListMap = (function() {
  if ((!ScalaJS.n.sci_ListMap$EmptyListMap)) {
    ScalaJS.n.sci_ListMap$EmptyListMap = new ScalaJS.c.sci_ListMap$EmptyListMap$().init___()
  };
  return ScalaJS.n.sci_ListMap$EmptyListMap
});
/*<skip>*/;
/** @constructor */
ScalaJS.c.sci_ListMap$Node = (function() {
  ScalaJS.c.sci_ListMap.call(this);
  this.key$6 = null;
  this.value$6 = null;
  this.$$outer$f = null
});
ScalaJS.c.sci_ListMap$Node.prototype = new ScalaJS.h.sci_ListMap();
ScalaJS.c.sci_ListMap$Node.prototype.constructor = ScalaJS.c.sci_ListMap$Node;
/** @constructor */
ScalaJS.h.sci_ListMap$Node = (function() {
  /*<skip>*/
});
ScalaJS.h.sci_ListMap$Node.prototype = ScalaJS.c.sci_ListMap$Node.prototype;
ScalaJS.c.sci_ListMap$Node.prototype.key__O = (function() {
  return this.key$6
});
ScalaJS.c.sci_ListMap$Node.prototype.value__O = (function() {
  return this.value$6
});
ScalaJS.c.sci_ListMap$Node.prototype.size__I = (function() {
  return this.size0__p6__sci_ListMap__I__I(this, 0)
});
ScalaJS.c.sci_ListMap$Node.prototype.size0__p6__sci_ListMap__I__I = (function(cur, acc) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (cur.isEmpty__Z()) {
      return acc
    } else {
      var temp$cur = cur.tail__sci_ListMap();
      var temp$acc = ((acc + 1) | 0);
      cur = temp$cur;
      acc = temp$acc;
      continue tailCallLoop
    }
  }
});
ScalaJS.c.sci_ListMap$Node.prototype.isEmpty__Z = (function() {
  return false
});
ScalaJS.c.sci_ListMap$Node.prototype.apply__O__O = (function(k) {
  return this.apply0__p6__sci_ListMap__O__O(this, k)
});
ScalaJS.c.sci_ListMap$Node.prototype.apply0__p6__sci_ListMap__O__O = (function(cur, k) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (cur.isEmpty__Z()) {
      throw new ScalaJS.c.ju_NoSuchElementException().init___T(("key not found: " + k))
    } else {
      if (ScalaJS.anyEqEq(k, cur.key__O())) {
        return cur.value__O()
      } else {
        cur = cur.tail__sci_ListMap();
        continue tailCallLoop
      }
    }
  }
});
ScalaJS.c.sci_ListMap$Node.prototype.get__O__s_Option = (function(k) {
  return this.get0__p6__sci_ListMap__O__s_Option(this, k)
});
ScalaJS.c.sci_ListMap$Node.prototype.get0__p6__sci_ListMap__O__s_Option = (function(cur, k) {
  var _$this = this;
  tailCallLoop: while (true) {
    if (ScalaJS.anyEqEq(k, cur.key__O())) {
      return new ScalaJS.c.s_Some().init___O(cur.value__O())
    } else {
      if (cur.tail__sci_ListMap().nonEmpty__Z()) {
        cur = cur.tail__sci_ListMap();
        continue tailCallLoop
      } else {
        return ScalaJS.m.s_None()
      }
    }
  }
});
ScalaJS.c.sci_ListMap$Node.prototype.updated__O__O__sci_ListMap = (function(k, v) {
  if (this.contains__O__Z(k)) {
    var m = this.$$minus__O__sci_ListMap(k)
  } else {
    var m = this
  };
  return new ScalaJS.c.sci_ListMap$Node().init___sci_ListMap__O__O(m, k, v)
});
ScalaJS.c.sci_ListMap$Node.prototype.$$minus__O__sci_ListMap = (function(k) {
  var cur = this;
  var lst = ScalaJS.m.sci_Nil();
  while (cur.nonEmpty__Z()) {
    if ((!ScalaJS.anyEqEq(k, cur.key__O()))) {
      lst = lst.$$colon$colon__O__sci_List(new ScalaJS.c.T2().init___O__O(cur.key__O(), cur.value__O()))
    };
    cur = cur.tail__sci_ListMap()
  };
  var acc = ScalaJS.as.sci_ListMap(ScalaJS.m.sci_ListMap().apply__sc_Seq__sc_GenMap(ScalaJS.m.sci_Nil()));
  while ((!ScalaJS.anyRefEqEq(lst, ScalaJS.m.sci_Nil()))) {
    var elem = ScalaJS.as.T2(lst.head__O());
    var stbl = acc;
    acc = new ScalaJS.c.sci_ListMap$Node().init___sci_ListMap__O__O(stbl, elem.$$und1__O(), elem.$$und2__O());
    lst = ScalaJS.as.sci_List(lst.tail__O())
  };
  return acc
});
ScalaJS.c.sci_ListMap$Node.prototype.tail__sci_ListMap = (function() {
  return this.scala$collection$immutable$ListMap$Node$$$outer__sci_ListMap()
});
ScalaJS.c.sci_ListMap$Node.prototype.scala$collection$immutable$ListMap$Node$$$outer__sci_ListMap = (function() {
  return this.$$outer$f
});
ScalaJS.c.sci_ListMap$Node.prototype.$$minus__O__sc_Map = (function(key) {
  return this.$$minus__O__sci_ListMap(key)
});
ScalaJS.c.sci_ListMap$Node.prototype.init___sci_ListMap__O__O = (function($$outer, key, value) {
  this.key$6 = key;
  this.value$6 = value;
  if (($$outer === null)) {
    throw new ScalaJS.c.jl_NullPointerException().init___()
  } else {
    this.$$outer$f = $$outer
  };
  ScalaJS.c.sci_ListMap.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.sci_ListMap$Node = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.sci_ListMap$Node)))
});
ScalaJS.as.sci_ListMap$Node = (function(obj) {
  if ((ScalaJS.is.sci_ListMap$Node(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.immutable.ListMap$Node")
  }
});
ScalaJS.isArrayOf.sci_ListMap$Node = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.sci_ListMap$Node)))
});
ScalaJS.asArrayOf.sci_ListMap$Node = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.sci_ListMap$Node(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.immutable.ListMap$Node;", depth)
  }
});
ScalaJS.d.sci_ListMap$Node = new ScalaJS.ClassTypeData({
  sci_ListMap$Node: 0
}, false, "scala.collection.immutable.ListMap$Node", ScalaJS.d.sci_ListMap, {
  sci_ListMap$Node: 1,
  sci_ListMap: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sci_AbstractMap: 1,
  sci_Map: 1,
  sci_MapLike: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractMap: 1,
  sc_Map: 1,
  sc_MapLike: 1,
  scg_Subtractable: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_GenMap: 1,
  sc_GenMapLike: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.sci_ListMap$Node.prototype.$classData = ScalaJS.d.sci_ListMap$Node;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_ArrayBuffer = (function() {
  ScalaJS.c.scm_AbstractBuffer.call(this);
  this.initialSize$6 = 0;
  this.array$6 = null;
  this.size0$6 = 0
});
ScalaJS.c.scm_ArrayBuffer.prototype = new ScalaJS.h.scm_AbstractBuffer();
ScalaJS.c.scm_ArrayBuffer.prototype.constructor = ScalaJS.c.scm_ArrayBuffer;
/** @constructor */
ScalaJS.h.scm_ArrayBuffer = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_ArrayBuffer.prototype = ScalaJS.c.scm_ArrayBuffer.prototype;
ScalaJS.c.scm_ArrayBuffer.prototype.array__AO = (function() {
  return this.array$6
});
ScalaJS.c.scm_ArrayBuffer.prototype.array$und$eq__AO__V = (function(x$1) {
  this.array$6 = x$1
});
ScalaJS.c.scm_ArrayBuffer.prototype.size0__I = (function() {
  return this.size0$6
});
ScalaJS.c.scm_ArrayBuffer.prototype.size0$und$eq__I__V = (function(x$1) {
  this.size0$6 = x$1
});
ScalaJS.c.scm_ArrayBuffer.prototype.length__I = (function() {
  return ScalaJS.i.scm_ResizableArray$class__length__scm_ResizableArray__I(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.apply__I__O = (function(idx) {
  return ScalaJS.i.scm_ResizableArray$class__apply__scm_ResizableArray__I__O(this, idx)
});
ScalaJS.c.scm_ArrayBuffer.prototype.foreach__F1__V = (function(f) {
  ScalaJS.i.scm_ResizableArray$class__foreach__scm_ResizableArray__F1__V(this, f)
});
ScalaJS.c.scm_ArrayBuffer.prototype.copyToArray__O__I__I__V = (function(xs, start, len) {
  ScalaJS.i.scm_ResizableArray$class__copyToArray__scm_ResizableArray__O__I__I__V(this, xs, start, len)
});
ScalaJS.c.scm_ArrayBuffer.prototype.ensureSize__I__V = (function(n) {
  ScalaJS.i.scm_ResizableArray$class__ensureSize__scm_ResizableArray__I__V(this, n)
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__scm_IndexedSeq = (function() {
  return ScalaJS.i.scm_IndexedSeq$class__seq__scm_IndexedSeq__scm_IndexedSeq(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.sizeHint__sc_TraversableLike__V = (function(coll) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V(this, coll)
});
ScalaJS.c.scm_ArrayBuffer.prototype.sizeHint__sc_TraversableLike__I__V = (function(coll, delta) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V(this, coll, delta)
});
ScalaJS.c.scm_ArrayBuffer.prototype.sizeHintBounded__I__sc_TraversableLike__V = (function(size, boundingColl) {
  ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V(this, size, boundingColl)
});
ScalaJS.c.scm_ArrayBuffer.prototype.scala$collection$IndexedSeqOptimized$$super$sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IterableLike$class__sameElements__sc_IterableLike__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_ArrayBuffer.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__isEmpty__sc_IndexedSeqOptimized__Z(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__find__sc_IndexedSeqOptimized__F1__s_Option(this, p)
});
ScalaJS.c.scm_ArrayBuffer.prototype.foldLeft__O__F2__O = (function(z, op) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__foldLeft__sc_IndexedSeqOptimized__O__F2__O(this, z, op)
});
ScalaJS.c.scm_ArrayBuffer.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__sameElements__sc_IndexedSeqOptimized__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_ArrayBuffer.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__lengthCompare__sc_IndexedSeqOptimized__I__I(this, len)
});
ScalaJS.c.scm_ArrayBuffer.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__segmentLength__sc_IndexedSeqOptimized__F1__I__I(this, p, from)
});
ScalaJS.c.scm_ArrayBuffer.prototype.reverse__O = (function() {
  return ScalaJS.i.sc_IndexedSeqOptimized$class__reverse__sc_IndexedSeqOptimized__O(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.thisCollection__scm_IndexedSeq = (function() {
  return ScalaJS.i.scm_IndexedSeqLike$class__thisCollection__scm_IndexedSeqLike__scm_IndexedSeq(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.toCollection__O__scm_IndexedSeq = (function(repr) {
  return ScalaJS.i.scm_IndexedSeqLike$class__toCollection__scm_IndexedSeqLike__O__scm_IndexedSeq(this, repr)
});
ScalaJS.c.scm_ArrayBuffer.prototype.hashCode__I = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__hashCode__sc_IndexedSeqLike__I(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.iterator__sc_Iterator = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__iterator__sc_IndexedSeqLike__sc_Iterator(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.sc_IndexedSeqLike$class__toBuffer__sc_IndexedSeqLike__scm_Buffer(this)
});
ScalaJS.c.scm_ArrayBuffer.prototype.initialSize__I = (function() {
  return this.initialSize$6
});
ScalaJS.c.scm_ArrayBuffer.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.scm_ArrayBuffer()
});
ScalaJS.c.scm_ArrayBuffer.prototype.sizeHint__I__V = (function(len) {
  if (((len > this.size__I()) && (len >= 1))) {
    var newarray = ScalaJS.newArrayObject(ScalaJS.d.O.getArrayOf(), [len]);
    ScalaJS.m.s_compat_Platform().arraycopy__O__I__O__I__I__V(this.array__AO(), 0, newarray, 0, this.size0__I());
    this.array$und$eq__AO__V(newarray)
  }
});
ScalaJS.c.scm_ArrayBuffer.prototype.$$plus$eq__O__scm_ArrayBuffer = (function(elem) {
  this.ensureSize__I__V(((this.size0__I() + 1) | 0));
  this.array__AO().u[this.size0__I()] = elem;
  this.size0$und$eq__I__V(((this.size0__I() + 1) | 0));
  return this
});
ScalaJS.c.scm_ArrayBuffer.prototype.$$plus$plus$eq__sc_TraversableOnce__scm_ArrayBuffer = (function(xs) {
  var x1 = xs;
  if (ScalaJS.is.sc_IndexedSeqLike(x1)) {
    var x2 = ScalaJS.as.sc_IndexedSeqLike(x1);
    var n = x2.length__I();
    this.ensureSize__I__V(((this.size0__I() + n) | 0));
    x2.copyToArray__O__I__I__V(this.array__AO(), this.size0__I(), n);
    this.size0$und$eq__I__V(((this.size0__I() + n) | 0));
    return this
  };
  return ScalaJS.as.scm_ArrayBuffer(ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable(this, xs))
});
ScalaJS.c.scm_ArrayBuffer.prototype.result__scm_ArrayBuffer = (function() {
  return this
});
ScalaJS.c.scm_ArrayBuffer.prototype.stringPrefix__T = (function() {
  return "ArrayBuffer"
});
ScalaJS.c.scm_ArrayBuffer.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.scm_ArrayBuffer.prototype.toCollection__O__sc_Seq = (function(repr) {
  return this.toCollection__O__scm_IndexedSeq(repr)
});
ScalaJS.c.scm_ArrayBuffer.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__sc_TraversableOnce = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__sc_Iterable = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__sc_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__scm_Seq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.seq__sc_IndexedSeq = (function() {
  return this.seq__scm_IndexedSeq()
});
ScalaJS.c.scm_ArrayBuffer.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.scm_ArrayBuffer.prototype.result__O = (function() {
  return this.result__scm_ArrayBuffer()
});
ScalaJS.c.scm_ArrayBuffer.prototype.$$plus$plus$eq__sc_TraversableOnce__scg_Growable = (function(xs) {
  return this.$$plus$plus$eq__sc_TraversableOnce__scm_ArrayBuffer(xs)
});
ScalaJS.c.scm_ArrayBuffer.prototype.$$plus$eq__O__scg_Growable = (function(elem) {
  return this.$$plus$eq__O__scm_ArrayBuffer(elem)
});
ScalaJS.c.scm_ArrayBuffer.prototype.$$plus$eq__O__scm_Builder = (function(elem) {
  return this.$$plus$eq__O__scm_ArrayBuffer(elem)
});
ScalaJS.c.scm_ArrayBuffer.prototype.init___I = (function(initialSize) {
  this.initialSize$6 = initialSize;
  ScalaJS.c.scm_AbstractBuffer.prototype.init___.call(this);
  ScalaJS.i.sc_IndexedSeqLike$class__$init$__sc_IndexedSeqLike__V(this);
  ScalaJS.i.scm_IndexedSeqLike$class__$init$__scm_IndexedSeqLike__V(this);
  ScalaJS.i.sc_IndexedSeqOptimized$class__$init$__sc_IndexedSeqOptimized__V(this);
  ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V(this);
  ScalaJS.i.sc_IndexedSeq$class__$init$__sc_IndexedSeq__V(this);
  ScalaJS.i.scm_IndexedSeq$class__$init$__scm_IndexedSeq__V(this);
  ScalaJS.i.scm_ResizableArray$class__$init$__scm_ResizableArray__V(this);
  ScalaJS.i.sc_CustomParallelizable$class__$init$__sc_CustomParallelizable__V(this);
  return this
});
ScalaJS.c.scm_ArrayBuffer.prototype.init___ = (function() {
  ScalaJS.c.scm_ArrayBuffer.prototype.init___I.call(this, 16);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_ArrayBuffer = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_ArrayBuffer)))
});
ScalaJS.as.scm_ArrayBuffer = (function(obj) {
  if ((ScalaJS.is.scm_ArrayBuffer(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.ArrayBuffer")
  }
});
ScalaJS.isArrayOf.scm_ArrayBuffer = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_ArrayBuffer)))
});
ScalaJS.asArrayOf.scm_ArrayBuffer = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_ArrayBuffer(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.ArrayBuffer;", depth)
  }
});
ScalaJS.d.scm_ArrayBuffer = new ScalaJS.ClassTypeData({
  scm_ArrayBuffer: 0
}, false, "scala.collection.mutable.ArrayBuffer", ScalaJS.d.scm_AbstractBuffer, {
  scm_ArrayBuffer: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  sc_CustomParallelizable: 1,
  scm_ResizableArray: 1,
  scm_IndexedSeq: 1,
  sc_IndexedSeq: 1,
  scm_Builder: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractBuffer: 1,
  scm_Buffer: 1,
  scm_BufferLike: 1,
  scg_Subtractable: 1,
  sc_script_Scriptable: 1,
  scg_Shrinkable: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_ArrayBuffer.prototype.$classData = ScalaJS.d.scm_ArrayBuffer;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_ListBuffer = (function() {
  ScalaJS.c.scm_AbstractBuffer.call(this);
  this.scala$collection$mutable$ListBuffer$$start$6 = null;
  this.last0$6 = null;
  this.exported$6 = false;
  this.len$6 = 0
});
ScalaJS.c.scm_ListBuffer.prototype = new ScalaJS.h.scm_AbstractBuffer();
ScalaJS.c.scm_ListBuffer.prototype.constructor = ScalaJS.c.scm_ListBuffer;
/** @constructor */
ScalaJS.h.scm_ListBuffer = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_ListBuffer.prototype = ScalaJS.c.scm_ListBuffer.prototype;
ScalaJS.c.scm_ListBuffer.prototype.lengthCompare__I__I = (function(len) {
  return ScalaJS.i.scg_SeqForwarder$class__lengthCompare__scg_SeqForwarder__I__I(this, len)
});
ScalaJS.c.scm_ListBuffer.prototype.isDefinedAt__I__Z = (function(x) {
  return ScalaJS.i.scg_SeqForwarder$class__isDefinedAt__scg_SeqForwarder__I__Z(this, x)
});
ScalaJS.c.scm_ListBuffer.prototype.segmentLength__F1__I__I = (function(p, from) {
  return ScalaJS.i.scg_SeqForwarder$class__segmentLength__scg_SeqForwarder__F1__I__I(this, p, from)
});
ScalaJS.c.scm_ListBuffer.prototype.sameElements__sc_GenIterable__Z = (function(that) {
  return ScalaJS.i.scg_IterableForwarder$class__sameElements__scg_IterableForwarder__sc_GenIterable__Z(this, that)
});
ScalaJS.c.scm_ListBuffer.prototype.foreach__F1__V = (function(f) {
  ScalaJS.i.scg_TraversableForwarder$class__foreach__scg_TraversableForwarder__F1__V(this, f)
});
ScalaJS.c.scm_ListBuffer.prototype.isEmpty__Z = (function() {
  return ScalaJS.i.scg_TraversableForwarder$class__isEmpty__scg_TraversableForwarder__Z(this)
});
ScalaJS.c.scm_ListBuffer.prototype.find__F1__s_Option = (function(p) {
  return ScalaJS.i.scg_TraversableForwarder$class__find__scg_TraversableForwarder__F1__s_Option(this, p)
});
ScalaJS.c.scm_ListBuffer.prototype.foldLeft__O__F2__O = (function(z, op) {
  return ScalaJS.i.scg_TraversableForwarder$class__foldLeft__scg_TraversableForwarder__O__F2__O(this, z, op)
});
ScalaJS.c.scm_ListBuffer.prototype.$$div$colon__O__F2__O = (function(z, op) {
  return ScalaJS.i.scg_TraversableForwarder$class__$div$colon__scg_TraversableForwarder__O__F2__O(this, z, op)
});
ScalaJS.c.scm_ListBuffer.prototype.copyToArray__O__I__I__V = (function(xs, start, len) {
  ScalaJS.i.scg_TraversableForwarder$class__copyToArray__scg_TraversableForwarder__O__I__I__V(this, xs, start, len)
});
ScalaJS.c.scm_ListBuffer.prototype.copyToArray__O__I__V = (function(xs, start) {
  ScalaJS.i.scg_TraversableForwarder$class__copyToArray__scg_TraversableForwarder__O__I__V(this, xs, start)
});
ScalaJS.c.scm_ListBuffer.prototype.toArray__s_reflect_ClassTag__O = (function(evidence$1) {
  return ScalaJS.i.scg_TraversableForwarder$class__toArray__scg_TraversableForwarder__s_reflect_ClassTag__O(this, evidence$1)
});
ScalaJS.c.scm_ListBuffer.prototype.toBuffer__scm_Buffer = (function() {
  return ScalaJS.i.scg_TraversableForwarder$class__toBuffer__scg_TraversableForwarder__scm_Buffer(this)
});
ScalaJS.c.scm_ListBuffer.prototype.toStream__sci_Stream = (function() {
  return ScalaJS.i.scg_TraversableForwarder$class__toStream__scg_TraversableForwarder__sci_Stream(this)
});
ScalaJS.c.scm_ListBuffer.prototype.toMap__s_Predef$$less$colon$less__sci_Map = (function(ev) {
  return ScalaJS.i.scg_TraversableForwarder$class__toMap__scg_TraversableForwarder__s_Predef$$less$colon$less__sci_Map(this, ev)
});
ScalaJS.c.scm_ListBuffer.prototype.mkString__T__T__T__T = (function(start, sep, end) {
  return ScalaJS.i.scg_TraversableForwarder$class__mkString__scg_TraversableForwarder__T__T__T__T(this, start, sep, end)
});
ScalaJS.c.scm_ListBuffer.prototype.mkString__T__T = (function(sep) {
  return ScalaJS.i.scg_TraversableForwarder$class__mkString__scg_TraversableForwarder__T__T(this, sep)
});
ScalaJS.c.scm_ListBuffer.prototype.addString__scm_StringBuilder__T__T__T__scm_StringBuilder = (function(b, start, sep, end) {
  return ScalaJS.i.scg_TraversableForwarder$class__addString__scg_TraversableForwarder__scm_StringBuilder__T__T__T__scm_StringBuilder(this, b, start, sep, end)
});
ScalaJS.c.scm_ListBuffer.prototype.sizeHint__I__V = (function(size) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__I__V(this, size)
});
ScalaJS.c.scm_ListBuffer.prototype.sizeHint__sc_TraversableLike__V = (function(coll) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__V(this, coll)
});
ScalaJS.c.scm_ListBuffer.prototype.sizeHint__sc_TraversableLike__I__V = (function(coll, delta) {
  ScalaJS.i.scm_Builder$class__sizeHint__scm_Builder__sc_TraversableLike__I__V(this, coll, delta)
});
ScalaJS.c.scm_ListBuffer.prototype.sizeHintBounded__I__sc_TraversableLike__V = (function(size, boundingColl) {
  ScalaJS.i.scm_Builder$class__sizeHintBounded__scm_Builder__I__sc_TraversableLike__V(this, size, boundingColl)
});
ScalaJS.c.scm_ListBuffer.prototype.companion__scg_GenericCompanion = (function() {
  return ScalaJS.m.scm_ListBuffer()
});
ScalaJS.c.scm_ListBuffer.prototype.scala$collection$mutable$ListBuffer$$start__sci_List = (function() {
  return this.scala$collection$mutable$ListBuffer$$start$6
});
ScalaJS.c.scm_ListBuffer.prototype.scala$collection$mutable$ListBuffer$$start$und$eq__p6__sci_List__V = (function(x$1) {
  this.scala$collection$mutable$ListBuffer$$start$6 = x$1
});
ScalaJS.c.scm_ListBuffer.prototype.last0__p6__sci_$colon$colon = (function() {
  return this.last0$6
});
ScalaJS.c.scm_ListBuffer.prototype.last0$und$eq__p6__sci_$colon$colon__V = (function(x$1) {
  this.last0$6 = x$1
});
ScalaJS.c.scm_ListBuffer.prototype.exported__p6__Z = (function() {
  return this.exported$6
});
ScalaJS.c.scm_ListBuffer.prototype.exported$und$eq__p6__Z__V = (function(x$1) {
  this.exported$6 = x$1
});
ScalaJS.c.scm_ListBuffer.prototype.len__p6__I = (function() {
  return this.len$6
});
ScalaJS.c.scm_ListBuffer.prototype.len$und$eq__p6__I__V = (function(x$1) {
  this.len$6 = x$1
});
ScalaJS.c.scm_ListBuffer.prototype.underlying__sci_Seq = (function() {
  return this.scala$collection$mutable$ListBuffer$$start__sci_List()
});
ScalaJS.c.scm_ListBuffer.prototype.length__I = (function() {
  return this.len__p6__I()
});
ScalaJS.c.scm_ListBuffer.prototype.size__I = (function() {
  return this.length__I()
});
ScalaJS.c.scm_ListBuffer.prototype.apply__I__O = (function(n) {
  if (((n < 0) || (n >= this.len__p6__I()))) {
    throw new ScalaJS.c.jl_IndexOutOfBoundsException().init___T(ScalaJS.objectToString(n))
  } else {
    return ScalaJS.i.scg_SeqForwarder$class__apply__scg_SeqForwarder__I__O(this, n)
  }
});
ScalaJS.c.scm_ListBuffer.prototype.$$plus$eq__O__scm_ListBuffer = (function(x) {
  if (this.exported__p6__Z()) {
    this.copy__p6__V()
  };
  if (this.scala$collection$mutable$ListBuffer$$start__sci_List().isEmpty__Z()) {
    this.last0$und$eq__p6__sci_$colon$colon__V(new ScalaJS.c.sci_$colon$colon().init___O__sci_List(x, ScalaJS.m.sci_Nil()));
    this.scala$collection$mutable$ListBuffer$$start$und$eq__p6__sci_List__V(this.last0__p6__sci_$colon$colon())
  } else {
    var last1 = this.last0__p6__sci_$colon$colon();
    this.last0$und$eq__p6__sci_$colon$colon__V(new ScalaJS.c.sci_$colon$colon().init___O__sci_List(x, ScalaJS.m.sci_Nil()));
    last1.tl$und$eq__sci_List__V(this.last0__p6__sci_$colon$colon())
  };
  this.len$und$eq__p6__I__V(((this.len__p6__I() + 1) | 0));
  return this
});
ScalaJS.c.scm_ListBuffer.prototype.$$plus$plus$eq__sc_TraversableOnce__scm_ListBuffer = (function(xs) {
  var _$this = this;
  tailCallLoop: while (true) {
    if ((xs === _$this)) {
      xs = ScalaJS.as.sc_TraversableOnce(_$this.take__I__O(_$this.size__I()));
      continue tailCallLoop
    } else {
      return ScalaJS.as.scm_ListBuffer(ScalaJS.i.scg_Growable$class__$plus$plus$eq__scg_Growable__sc_TraversableOnce__scg_Growable(_$this, xs))
    }
  }
});
ScalaJS.c.scm_ListBuffer.prototype.clear__V = (function() {
  this.scala$collection$mutable$ListBuffer$$start$und$eq__p6__sci_List__V(ScalaJS.m.sci_Nil());
  this.exported$und$eq__p6__Z__V(false);
  this.len$und$eq__p6__I__V(0)
});
ScalaJS.c.scm_ListBuffer.prototype.result__sci_List = (function() {
  return this.toList__sci_List()
});
ScalaJS.c.scm_ListBuffer.prototype.toList__sci_List = (function() {
  this.exported$und$eq__p6__Z__V((!this.scala$collection$mutable$ListBuffer$$start__sci_List().isEmpty__Z()));
  return this.scala$collection$mutable$ListBuffer$$start__sci_List()
});
ScalaJS.c.scm_ListBuffer.prototype.iterator__sc_Iterator = (function() {
  return new ScalaJS.c.scm_ListBuffer$$anon$1().init___scm_ListBuffer(this)
});
ScalaJS.c.scm_ListBuffer.prototype.readOnly__sci_List = (function() {
  return this.scala$collection$mutable$ListBuffer$$start__sci_List()
});
ScalaJS.c.scm_ListBuffer.prototype.copy__p6__V = (function() {
  var cursor = this.scala$collection$mutable$ListBuffer$$start__sci_List();
  var limit = this.last0__p6__sci_$colon$colon().tail__sci_List();
  this.clear__V();
  while ((cursor !== limit)) {
    this.$$plus$eq__O__scm_ListBuffer(cursor.head__O());
    cursor = ScalaJS.as.sci_List(cursor.tail__O())
  }
});
ScalaJS.c.scm_ListBuffer.prototype.equals__O__Z = (function(that) {
  var x1 = that;
  if (ScalaJS.is.scm_ListBuffer(x1)) {
    var x2 = ScalaJS.as.scm_ListBuffer(x1);
    return this.readOnly__sci_List().equals__O__Z(x2.readOnly__sci_List())
  };
  return ScalaJS.i.sc_GenSeqLike$class__equals__sc_GenSeqLike__O__Z(this, that)
});
ScalaJS.c.scm_ListBuffer.prototype.stringPrefix__T = (function() {
  return "ListBuffer"
});
ScalaJS.c.scm_ListBuffer.prototype.thisCollection__sc_Traversable = (function() {
  return this.thisCollection__sc_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.thisCollection__sc_Iterable = (function() {
  return this.thisCollection__sc_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.seq__sc_Seq = (function() {
  return this.seq__scm_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.isDefinedAt__O__Z = (function(x) {
  return this.isDefinedAt__I__Z(ScalaJS.uI(x))
});
ScalaJS.c.scm_ListBuffer.prototype.result__O = (function() {
  return this.result__sci_List()
});
ScalaJS.c.scm_ListBuffer.prototype.$$plus$plus$eq__sc_TraversableOnce__scg_Growable = (function(xs) {
  return this.$$plus$plus$eq__sc_TraversableOnce__scm_ListBuffer(xs)
});
ScalaJS.c.scm_ListBuffer.prototype.$$plus$eq__O__scg_Growable = (function(elem) {
  return this.$$plus$eq__O__scm_ListBuffer(elem)
});
ScalaJS.c.scm_ListBuffer.prototype.$$plus$eq__O__scm_Builder = (function(elem) {
  return this.$$plus$eq__O__scm_ListBuffer(elem)
});
ScalaJS.c.scm_ListBuffer.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.scm_ListBuffer.prototype.underlying__sc_Traversable = (function() {
  return this.underlying__sci_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.underlying__sc_Iterable = (function() {
  return this.underlying__sci_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.underlying__sc_Seq = (function() {
  return this.underlying__sci_Seq()
});
ScalaJS.c.scm_ListBuffer.prototype.init___ = (function() {
  ScalaJS.c.scm_AbstractBuffer.prototype.init___.call(this);
  ScalaJS.i.scm_Builder$class__$init$__scm_Builder__V(this);
  ScalaJS.i.scg_TraversableForwarder$class__$init$__scg_TraversableForwarder__V(this);
  ScalaJS.i.scg_IterableForwarder$class__$init$__scg_IterableForwarder__V(this);
  ScalaJS.i.scg_SeqForwarder$class__$init$__scg_SeqForwarder__V(this);
  this.scala$collection$mutable$ListBuffer$$start$6 = ScalaJS.m.sci_Nil();
  this.exported$6 = false;
  this.len$6 = 0;
  return this
});
/*<skip>*/;
ScalaJS.is.scm_ListBuffer = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_ListBuffer)))
});
ScalaJS.as.scm_ListBuffer = (function(obj) {
  if ((ScalaJS.is.scm_ListBuffer(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.ListBuffer")
  }
});
ScalaJS.isArrayOf.scm_ListBuffer = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_ListBuffer)))
});
ScalaJS.asArrayOf.scm_ListBuffer = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_ListBuffer(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.ListBuffer;", depth)
  }
});
ScalaJS.d.scm_ListBuffer = new ScalaJS.ClassTypeData({
  scm_ListBuffer: 0
}, false, "scala.collection.mutable.ListBuffer", ScalaJS.d.scm_AbstractBuffer, {
  scm_ListBuffer: 1,
  Ljava_io_Serializable: 1,
  scg_SeqForwarder: 1,
  scg_IterableForwarder: 1,
  scg_TraversableForwarder: 1,
  scm_Builder: 1,
  scm_AbstractBuffer: 1,
  scm_Buffer: 1,
  scm_BufferLike: 1,
  scg_Subtractable: 1,
  sc_script_Scriptable: 1,
  scg_Shrinkable: 1,
  scg_Growable: 1,
  scg_Clearable: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_ListBuffer.prototype.$classData = ScalaJS.d.scm_ListBuffer;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofBoolean = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofBoolean;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofBoolean = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofBoolean.prototype = ScalaJS.c.scm_WrappedArray$ofBoolean.prototype;
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.array__AZ = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Boolean__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.length__I = (function() {
  return this.array__AZ().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.apply__I__Z = (function(index) {
  return this.apply$mcZI$sp__I__Z(index)
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.update__I__Z__V = (function(index, elem) {
  this.array__AZ().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.apply$mcZI$sp__I__Z = (function(index) {
  return this.array__AZ().u[index]
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__Z__V(index, ScalaJS.uZ(elem))
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.apply__O__O = (function(v1) {
  return this.apply__I__Z(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.apply__I__O = (function(index) {
  return this.apply__I__Z(index)
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.array__O = (function() {
  return this.array__AZ()
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.init___AZ = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofBoolean = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofBoolean)))
});
ScalaJS.as.scm_WrappedArray$ofBoolean = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofBoolean(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofBoolean")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofBoolean = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofBoolean)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofBoolean = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofBoolean(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofBoolean;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofBoolean = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofBoolean: 0
}, false, "scala.collection.mutable.WrappedArray$ofBoolean", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofBoolean: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofBoolean.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofBoolean;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofByte = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofByte.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofByte;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofByte = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofByte.prototype = ScalaJS.c.scm_WrappedArray$ofByte.prototype;
ScalaJS.c.scm_WrappedArray$ofByte.prototype.array__AB = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Byte__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.length__I = (function() {
  return this.array__AB().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.apply__I__B = (function(index) {
  return this.array__AB().u[index]
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.update__I__B__V = (function(index, elem) {
  this.array__AB().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__B__V(index, ScalaJS.uB(elem))
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.apply__O__O = (function(v1) {
  return this.apply__I__B(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.apply__I__O = (function(index) {
  return this.apply__I__B(index)
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.array__O = (function() {
  return this.array__AB()
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.init___AB = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofByte = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofByte)))
});
ScalaJS.as.scm_WrappedArray$ofByte = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofByte(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofByte")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofByte = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofByte)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofByte = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofByte(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofByte;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofByte = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofByte: 0
}, false, "scala.collection.mutable.WrappedArray$ofByte", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofByte: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofByte.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofByte;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofChar = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofChar.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofChar;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofChar = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofChar.prototype = ScalaJS.c.scm_WrappedArray$ofChar.prototype;
ScalaJS.c.scm_WrappedArray$ofChar.prototype.array__AC = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Char__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.length__I = (function() {
  return this.array__AC().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.apply__I__C = (function(index) {
  return this.array__AC().u[index]
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.update__I__C__V = (function(index, elem) {
  this.array__AC().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__C__V(index, ScalaJS.uC(elem))
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.apply__O__O = (function(v1) {
  return ScalaJS.bC(this.apply__I__C(ScalaJS.uI(v1)))
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.apply__I__O = (function(index) {
  return ScalaJS.bC(this.apply__I__C(index))
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.array__O = (function() {
  return this.array__AC()
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.init___AC = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofChar = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofChar)))
});
ScalaJS.as.scm_WrappedArray$ofChar = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofChar(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofChar")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofChar = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofChar)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofChar = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofChar(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofChar;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofChar = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofChar: 0
}, false, "scala.collection.mutable.WrappedArray$ofChar", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofChar: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofChar.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofChar;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofDouble = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofDouble;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofDouble = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofDouble.prototype = ScalaJS.c.scm_WrappedArray$ofDouble.prototype;
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.array__AD = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Double__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.length__I = (function() {
  return this.array__AD().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.apply__I__D = (function(index) {
  return this.apply$mcDI$sp__I__D(index)
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.update__I__D__V = (function(index, elem) {
  this.array__AD().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.apply$mcDI$sp__I__D = (function(index) {
  return this.array__AD().u[index]
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__D__V(index, ScalaJS.uD(elem))
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.apply__O__O = (function(v1) {
  return this.apply__I__D(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.apply__I__O = (function(index) {
  return this.apply__I__D(index)
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.array__O = (function() {
  return this.array__AD()
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.init___AD = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofDouble = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofDouble)))
});
ScalaJS.as.scm_WrappedArray$ofDouble = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofDouble(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofDouble")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofDouble = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofDouble)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofDouble = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofDouble(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofDouble;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofDouble = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofDouble: 0
}, false, "scala.collection.mutable.WrappedArray$ofDouble", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofDouble: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofDouble.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofDouble;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofFloat = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofFloat;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofFloat = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofFloat.prototype = ScalaJS.c.scm_WrappedArray$ofFloat.prototype;
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.array__AF = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Float__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.length__I = (function() {
  return this.array__AF().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.apply__I__F = (function(index) {
  return this.apply$mcFI$sp__I__F(index)
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.update__I__F__V = (function(index, elem) {
  this.array__AF().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.apply$mcFI$sp__I__F = (function(index) {
  return this.array__AF().u[index]
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__F__V(index, ScalaJS.uF(elem))
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.apply__O__O = (function(v1) {
  return this.apply__I__F(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.apply__I__O = (function(index) {
  return this.apply__I__F(index)
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.array__O = (function() {
  return this.array__AF()
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.init___AF = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofFloat = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofFloat)))
});
ScalaJS.as.scm_WrappedArray$ofFloat = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofFloat(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofFloat")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofFloat = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofFloat)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofFloat = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofFloat(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofFloat;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofFloat = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofFloat: 0
}, false, "scala.collection.mutable.WrappedArray$ofFloat", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofFloat: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofFloat.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofFloat;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofInt = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofInt.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofInt;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofInt = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofInt.prototype = ScalaJS.c.scm_WrappedArray$ofInt.prototype;
ScalaJS.c.scm_WrappedArray$ofInt.prototype.array__AI = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Int__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.length__I = (function() {
  return this.array__AI().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.apply__I__I = (function(index) {
  return this.apply$mcII$sp__I__I(index)
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.update__I__I__V = (function(index, elem) {
  this.array__AI().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.apply$mcII$sp__I__I = (function(index) {
  return this.array__AI().u[index]
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__I__V(index, ScalaJS.uI(elem))
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.apply__O__O = (function(v1) {
  return this.apply__I__I(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.apply__I__O = (function(index) {
  return this.apply__I__I(index)
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.array__O = (function() {
  return this.array__AI()
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.init___AI = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofInt = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofInt)))
});
ScalaJS.as.scm_WrappedArray$ofInt = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofInt(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofInt")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofInt = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofInt)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofInt = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofInt(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofInt;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofInt = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofInt: 0
}, false, "scala.collection.mutable.WrappedArray$ofInt", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofInt: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofInt.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofInt;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofLong = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofLong.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofLong;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofLong = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofLong.prototype = ScalaJS.c.scm_WrappedArray$ofLong.prototype;
ScalaJS.c.scm_WrappedArray$ofLong.prototype.array__AJ = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Long__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.length__I = (function() {
  return this.array__AJ().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.apply__I__J = (function(index) {
  return this.apply$mcJI$sp__I__J(index)
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.update__I__J__V = (function(index, elem) {
  this.array__AJ().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.apply$mcJI$sp__I__J = (function(index) {
  return this.array__AJ().u[index]
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__J__V(index, ScalaJS.uJ(elem))
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.apply__O__O = (function(v1) {
  return this.apply__I__J(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.apply__I__O = (function(index) {
  return this.apply__I__J(index)
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.array__O = (function() {
  return this.array__AJ()
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.init___AJ = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofLong = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofLong)))
});
ScalaJS.as.scm_WrappedArray$ofLong = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofLong(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofLong")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofLong = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofLong)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofLong = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofLong(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofLong;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofLong = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofLong: 0
}, false, "scala.collection.mutable.WrappedArray$ofLong", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofLong: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofLong.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofLong;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofRef = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null;
  this.elemTag$6 = null;
  this.bitmap$0$6 = false
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofRef.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofRef;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofRef = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofRef.prototype = ScalaJS.c.scm_WrappedArray$ofRef.prototype;
ScalaJS.c.scm_WrappedArray$ofRef.prototype.elemTag$lzycompute__p6__s_reflect_ClassTag = (function() {
  if ((!this.bitmap$0$6)) {
    this.elemTag$6 = ScalaJS.m.s_reflect_ClassTag().apply__jl_Class__s_reflect_ClassTag(ScalaJS.m.sr_ScalaRunTime().arrayElementClass__O__jl_Class(ScalaJS.objectGetClass(this.array__AO())));
    this.bitmap$0$6 = true
  };
  return this.elemTag$6
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.array__AO = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.elemTag__s_reflect_ClassTag = (function() {
  if ((!this.bitmap$0$6)) {
    return this.elemTag$lzycompute__p6__s_reflect_ClassTag()
  } else {
    return this.elemTag$6
  }
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.length__I = (function() {
  return this.array__AO().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.apply__I__O = (function(index) {
  return this.array__AO().u[index]
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.update__I__O__V = (function(index, elem) {
  this.array__AO().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.apply__O__O = (function(v1) {
  return this.apply__I__O(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.array__O = (function() {
  return this.array__AO()
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.init___AO = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofRef = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofRef)))
});
ScalaJS.as.scm_WrappedArray$ofRef = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofRef(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofRef")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofRef = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofRef)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofRef = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofRef(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofRef;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofRef = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofRef: 0
}, false, "scala.collection.mutable.WrappedArray$ofRef", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofRef: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofRef.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofRef;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofShort = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofShort.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofShort;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofShort = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofShort.prototype = ScalaJS.c.scm_WrappedArray$ofShort.prototype;
ScalaJS.c.scm_WrappedArray$ofShort.prototype.array__AS = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Short__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.length__I = (function() {
  return this.array__AS().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.apply__I__S = (function(index) {
  return this.array__AS().u[index]
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.update__I__S__V = (function(index, elem) {
  this.array__AS().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__S__V(index, ScalaJS.uS(elem))
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.apply__O__O = (function(v1) {
  return this.apply__I__S(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.apply__I__O = (function(index) {
  return this.apply__I__S(index)
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.array__O = (function() {
  return this.array__AS()
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.init___AS = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofShort = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofShort)))
});
ScalaJS.as.scm_WrappedArray$ofShort = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofShort(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofShort")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofShort = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofShort)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofShort = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofShort(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofShort;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofShort = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofShort: 0
}, false, "scala.collection.mutable.WrappedArray$ofShort", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofShort: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofShort.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofShort;
/*<skip>*/;
/** @constructor */
ScalaJS.c.scm_WrappedArray$ofUnit = (function() {
  ScalaJS.c.scm_WrappedArray.call(this);
  this.array$6 = null
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype = new ScalaJS.h.scm_WrappedArray();
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.constructor = ScalaJS.c.scm_WrappedArray$ofUnit;
/** @constructor */
ScalaJS.h.scm_WrappedArray$ofUnit = (function() {
  /*<skip>*/
});
ScalaJS.h.scm_WrappedArray$ofUnit.prototype = ScalaJS.c.scm_WrappedArray$ofUnit.prototype;
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.array__Asr_BoxedUnit = (function() {
  return this.array$6
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.elemTag__s_reflect_ClassTag = (function() {
  return ScalaJS.m.s_reflect_ClassTag().Unit__s_reflect_ClassTag()
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.length__I = (function() {
  return this.array__Asr_BoxedUnit().u["length"]
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.apply__I__V = (function(index) {
  this.apply$mcVI$sp__I__V(index)
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.update__I__sr_BoxedUnit__V = (function(index, elem) {
  this.array__Asr_BoxedUnit().u[index] = elem
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.apply$mcVI$sp__I__V = (function(index) {
  this.array__Asr_BoxedUnit().u[index]
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.update__I__O__V = (function(index, elem) {
  this.update__I__sr_BoxedUnit__V(index, ScalaJS.asUnit(elem))
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.apply__O__O = (function(v1) {
  this.apply__I__V(ScalaJS.uI(v1))
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.apply__I__O = (function(index) {
  this.apply__I__V(index)
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.array__O = (function() {
  return this.array__Asr_BoxedUnit()
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.init___Asr_BoxedUnit = (function(array) {
  this.array$6 = array;
  ScalaJS.c.scm_WrappedArray.prototype.init___.call(this);
  return this
});
/*<skip>*/;
ScalaJS.is.scm_WrappedArray$ofUnit = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.scm_WrappedArray$ofUnit)))
});
ScalaJS.as.scm_WrappedArray$ofUnit = (function(obj) {
  if ((ScalaJS.is.scm_WrappedArray$ofUnit(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.collection.mutable.WrappedArray$ofUnit")
  }
});
ScalaJS.isArrayOf.scm_WrappedArray$ofUnit = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.scm_WrappedArray$ofUnit)))
});
ScalaJS.asArrayOf.scm_WrappedArray$ofUnit = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.scm_WrappedArray$ofUnit(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.collection.mutable.WrappedArray$ofUnit;", depth)
  }
});
ScalaJS.d.scm_WrappedArray$ofUnit = new ScalaJS.ClassTypeData({
  scm_WrappedArray$ofUnit: 0
}, false, "scala.collection.mutable.WrappedArray$ofUnit", ScalaJS.d.scm_WrappedArray, {
  scm_WrappedArray$ofUnit: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  scm_WrappedArray: 1,
  sc_CustomParallelizable: 1,
  scm_ArrayLike: 1,
  scm_IndexedSeqOptimized: 1,
  sc_IndexedSeqOptimized: 1,
  scm_IndexedSeq: 1,
  scm_IndexedSeqLike: 1,
  sc_IndexedSeq: 1,
  sc_IndexedSeqLike: 1,
  scm_AbstractSeq: 1,
  scm_Seq: 1,
  scm_SeqLike: 1,
  scm_Cloneable: 1,
  s_Cloneable: 1,
  jl_Cloneable: 1,
  scm_Iterable: 1,
  scm_Traversable: 1,
  s_Mutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
ScalaJS.c.scm_WrappedArray$ofUnit.prototype.$classData = ScalaJS.d.scm_WrappedArray$ofUnit;
/*<skip>*/;
ScalaJS.is.s_xml_Atom = (function(obj) {
  return (!(!((obj && obj.$classData) && obj.$classData.ancestors.s_xml_Atom)))
});
ScalaJS.as.s_xml_Atom = (function(obj) {
  if ((ScalaJS.is.s_xml_Atom(obj) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwClassCastException(obj, "scala.xml.Atom")
  }
});
ScalaJS.isArrayOf.s_xml_Atom = (function(obj, depth) {
  return (!(!(((obj && obj.$classData) && (obj.$classData.arrayDepth === depth)) && obj.$classData.arrayBase.ancestors.s_xml_Atom)))
});
ScalaJS.asArrayOf.s_xml_Atom = (function(obj, depth) {
  if ((ScalaJS.isArrayOf.s_xml_Atom(obj, depth) || (obj === null))) {
    return obj
  } else {
    ScalaJS.throwArrayCastException(obj, "Lscala.xml.Atom;", depth)
  }
});
ScalaJS.d.s_xml_Atom = new ScalaJS.ClassTypeData({
  s_xml_Atom: 0
}, false, "scala.xml.Atom", ScalaJS.d.s_xml_SpecialNode, {
  s_xml_Atom: 1,
  s_Serializable: 1,
  Ljava_io_Serializable: 1,
  s_xml_SpecialNode: 1,
  s_xml_pull_XMLEvent: 1,
  s_xml_Node: 1,
  s_xml_NodeSeq: 1,
  s_xml_Equality: 1,
  sci_Seq: 1,
  sci_Iterable: 1,
  sci_Traversable: 1,
  s_Immutable: 1,
  sc_AbstractSeq: 1,
  sc_Seq: 1,
  sc_SeqLike: 1,
  sc_GenSeq: 1,
  sc_GenSeqLike: 1,
  s_PartialFunction: 1,
  F1: 1,
  sc_AbstractIterable: 1,
  sc_Iterable: 1,
  sc_IterableLike: 1,
  s_Equals: 1,
  sc_GenIterable: 1,
  sc_GenIterableLike: 1,
  sc_AbstractTraversable: 1,
  sc_Traversable: 1,
  sc_GenTraversable: 1,
  scg_GenericTraversableTemplate: 1,
  sc_TraversableLike: 1,
  sc_GenTraversableLike: 1,
  sc_Parallelizable: 1,
  sc_TraversableOnce: 1,
  sc_GenTraversableOnce: 1,
  scg_FilterMonadic: 1,
  scg_HasNewBuilder: 1,
  O: 1
});
/*<skip>*/;
//# sourceMappingURL=frontend-fastopt.js.map
